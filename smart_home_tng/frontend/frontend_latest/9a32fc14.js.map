{"version":3,"file":"9a32fc14.js","mappings":";AA6BA;AACA;;;AAGA;AACA;;AAEA;;;AAIA;AACA;;;;;;;AAOA;;;AAKA;AACA;;;;;;AAMA;;;AAKA;AACA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA7DA;ACOA;AAEA;AACA;AAGA;;AAKA;;;AAIA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AA5BA;;;ACuBA;AAGA;AAGA;AACA;AACA;;;;AAIA;AAGA;;AAIA;AACA;;;AAGA;AAGA;AAGA;AACA;AACA;;;;AArCA;;;;;;;AAPA;ACQA;AAMA;;AAIA;AACA;;;AAGA;AAMA;;AAIA;AACA;;;AAGA;AAMA;;AAIA;AACA;AA3CA;;;;;;;AAPA;;ACFA;;;;;;;;;;;;;;;;;;;;;;;;;AANA;;AC+BA;AACA;;AAEA;;AApCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkIA;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;AC1FA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;;;AC9BA;AACA;AACA;;;AAGA;AACA;;AAEA;;;AApBA;;;;;;;;;;;;;;;ACaA;;;;;;AASA;;;;;;AAUA;;;;;;;;;;;AClBA;;;;;;;;;;AAaA;;;;;;AAUA;;;AC3BA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;;;;;;AAvBA;;;ACoBA;AACA;AACA;;;;AAIA;;AAKA;AAKA;AACA;;;;;;AA/BA;;;;;;;;;;;;;;;;;;;AAAA;;;ACOA;AACA;AACA;;;AAGA;AACA;;AAEA;;;AApBA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACgCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;;;;;;AAUA;AC3EA;;AAEA;AACA;AACA;;;AAKA;AACA;;AAEA;;;;;;;;;;;;;;;AAnBA;;;;;;;;;ACOA;;;;;;;;;;;;;;;AAkBA;;;;;;AAUA;;;;;;;;;;;ACvBA;;;;;;;;;;;;;;AAiBA;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;;;;;;;;AAWA;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;;;;;;AAUA;;;;;;;;;;;ACrEA;;;;;AAQA;;;;;;AAUA;;;ACnBA;AACA;AACA;;AAEA;AAEA;AAQA;AAEA;AAEA;AACA;;AAGA;AACA;;AAnCA;ACOA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AAGA;AACA;;;;;;;;;;;;;;;;;AArBA;;;;;;;;;;;;;;;ACYA;;;AAMA;;;;;;AAUA;;;;;;;;;;ACrBA;;;;;;AASA;;;;;;AAUA;;;;ACzBA;;;;;;AASA;;;;;;AAUA;;;;;;;;;;;;;;;ACRA;;;;;;AASA;;;;;;AAUA","sources":["webpack://home-assistant-frontend/./src/components/entity/state-info.ts","webpack://home-assistant-frontend/./src/components/ha-climate-state.ts","webpack://home-assistant-frontend/./src/components/ha-cover-controls.ts","webpack://home-assistant-frontend/./src/components/ha-cover-tilt-controls.ts","webpack://home-assistant-frontend/./src/components/ha-select.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/components/ha-vacuum-state.js","webpack://home-assistant-frontend/./src/components/ha-water_heater-state.js","webpack://home-assistant-frontend/./src/state-summary/state-card-button.ts","webpack://home-assistant-frontend/./src/state-summary/state-card-climate.js","webpack://home-assistant-frontend/./src/state-summary/state-card-configurator.js","webpack://home-assistant-frontend/./src/state-summary/state-card-cover.ts","webpack://home-assistant-frontend/./src/state-summary/state-card-display.ts","webpack://home-assistant-frontend/./src/state-summary/state-card-input_button.ts","webpack://home-assistant-frontend/./src/state-summary/state-card-input_number.js","webpack://home-assistant-frontend/./src/state-summary/state-card-input_select.ts","webpack://home-assistant-frontend/./src/state-summary/state-card-input_text.js","webpack://home-assistant-frontend/./src/state-summary/state-card-lock.js","webpack://home-assistant-frontend/./src/state-summary/state-card-media_player.js","webpack://home-assistant-frontend/./src/state-summary/state-card-number.js","webpack://home-assistant-frontend/./src/state-summary/state-card-scene.js","webpack://home-assistant-frontend/./src/state-summary/state-card-script.ts","webpack://home-assistant-frontend/./src/state-summary/state-card-select.ts","webpack://home-assistant-frontend/./src/state-summary/state-card-timer.js","webpack://home-assistant-frontend/./src/state-summary/state-card-toggle.js","webpack://home-assistant-frontend/./src/state-summary/state-card-vacuum.js","webpack://home-assistant-frontend/./src/state-summary/state-card-water_heater.js"],"sourcesContent":["import \"@polymer/paper-tooltip/paper-tooltip\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport { computeRTL } from \"../../common/util/compute_rtl\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-relative-time\";\nimport \"./state-badge\";\n\n@customElement(\"state-info\")\nclass StateInfo extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj?: HassEntity;\n\n  @property({ type: Boolean }) public inDialog = false;\n\n  // property used only in CSS\n  @property({ type: Boolean, reflect: true }) public rtl = false;\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.stateObj) {\n      return html``;\n    }\n\n    const name = computeStateName(this.stateObj);\n\n    return html`<state-badge\n        .stateObj=${this.stateObj}\n        .stateColor=${true}\n      ></state-badge>\n      <div class=\"info\">\n        <div class=\"name\" .title=${name} .inDialog=${this.inDialog}>\n          ${name}\n        </div>\n        ${this.inDialog\n          ? html`<div class=\"time-ago\">\n              <ha-relative-time\n                id=\"last_changed\"\n                .hass=${this.hass}\n                .datetime=${this.stateObj.last_changed}\n                capitalize\n              ></ha-relative-time>\n              <paper-tooltip animation-delay=\"0\" for=\"last_changed\">\n                <div>\n                  <div class=\"row\">\n                    <span class=\"column-name\">\n                      ${this.hass.localize(\n                        \"ui.dialogs.more_info_control.last_changed\"\n                      )}:\n                    </span>\n                    <ha-relative-time\n                      .hass=${this.hass}\n                      .datetime=${this.stateObj.last_changed}\n                      capitalize\n                    ></ha-relative-time>\n                  </div>\n                  <div class=\"row\">\n                    <span>\n                      ${this.hass.localize(\n                        \"ui.dialogs.more_info_control.last_updated\"\n                      )}:\n                    </span>\n                    <ha-relative-time\n                      .hass=${this.hass}\n                      .datetime=${this.stateObj.last_updated}\n                      capitalize\n                    ></ha-relative-time>\n                  </div>\n                </div>\n              </paper-tooltip>\n            </div>`\n          : html`<div class=\"extra-info\"><slot></slot></div>`}\n      </div>`;\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (!changedProps.has(\"hass\")) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (!oldHass || oldHass.locale !== this.hass.locale) {\n      this.rtl = computeRTL(this.hass);\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        min-width: 120px;\n        white-space: nowrap;\n      }\n\n      state-badge {\n        float: left;\n      }\n      :host([rtl]) state-badge {\n        float: right;\n      }\n\n      .info {\n        margin-left: 56px;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        height: 100%;\n      }\n\n      :host([rtl]) .info {\n        margin-right: 56px;\n        margin-left: 0;\n        text-align: right;\n      }\n\n      .name {\n        color: var(--primary-text-color);\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n\n      .name[in-dialog],\n      :host([secondary-line]) .name {\n        line-height: 20px;\n      }\n\n      .time-ago,\n      .extra-info,\n      .extra-info > * {\n        color: var(--secondary-text-color);\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n\n      .row {\n        display: flex;\n        flex-direction: row;\n        flex-wrap: no-wrap;\n        width: 100%;\n        justify-content: space-between;\n        margin: 0 2px 4px 0;\n      }\n\n      .row:last-child {\n        margin-bottom: 0px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"state-info\": StateInfo;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { formatNumber } from \"../common/number/format_number\";\nimport { CLIMATE_PRESET_NONE } from \"../data/climate\";\nimport { UNAVAILABLE_STATES } from \"../data/entity\";\nimport type { HomeAssistant } from \"../types\";\n\n@customElement(\"ha-climate-state\")\nclass HaClimateState extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj!: HassEntity;\n\n  protected render(): TemplateResult {\n    const currentStatus = this._computeCurrentStatus();\n\n    return html`<div class=\"target\">\n        ${!UNAVAILABLE_STATES.includes(this.stateObj.state)\n          ? html`<span class=\"state-label\">\n                ${this._localizeState()}\n                ${this.stateObj.attributes.preset_mode &&\n                this.stateObj.attributes.preset_mode !== CLIMATE_PRESET_NONE\n                  ? html`-\n                    ${this.hass.localize(\n                      `state_attributes.climate.preset_mode.${this.stateObj.attributes.preset_mode}`\n                    ) || this.stateObj.attributes.preset_mode}`\n                  : \"\"}\n              </span>\n              <div class=\"unit\">${this._computeTarget()}</div>`\n          : this._localizeState()}\n      </div>\n\n      ${currentStatus && !UNAVAILABLE_STATES.includes(this.stateObj.state)\n        ? html`<div class=\"current\">\n            ${this.hass.localize(\"ui.card.climate.currently\")}:\n            <div class=\"unit\">${currentStatus}</div>\n          </div>`\n        : \"\"}`;\n  }\n\n  private _computeCurrentStatus(): string | undefined {\n    if (!this.hass || !this.stateObj) {\n      return undefined;\n    }\n\n    if (this.stateObj.attributes.current_temperature != null) {\n      return `${formatNumber(\n        this.stateObj.attributes.current_temperature,\n        this.hass.locale\n      )} ${this.hass.config.unit_system.temperature}`;\n    }\n\n    if (this.stateObj.attributes.current_humidity != null) {\n      return `${formatNumber(\n        this.stateObj.attributes.current_humidity,\n        this.hass.locale\n      )} %`;\n    }\n\n    return undefined;\n  }\n\n  private _computeTarget(): string {\n    if (!this.hass || !this.stateObj) {\n      return \"\";\n    }\n\n    if (\n      this.stateObj.attributes.target_temp_low != null &&\n      this.stateObj.attributes.target_temp_high != null\n    ) {\n      return `${formatNumber(\n        this.stateObj.attributes.target_temp_low,\n        this.hass.locale\n      )}-${formatNumber(\n        this.stateObj.attributes.target_temp_high,\n        this.hass.locale\n      )} ${this.hass.config.unit_system.temperature}`;\n    }\n\n    if (this.stateObj.attributes.temperature != null) {\n      return `${formatNumber(\n        this.stateObj.attributes.temperature,\n        this.hass.locale\n      )} ${this.hass.config.unit_system.temperature}`;\n    }\n    if (\n      this.stateObj.attributes.target_humidity_low != null &&\n      this.stateObj.attributes.target_humidity_high != null\n    ) {\n      return `${formatNumber(\n        this.stateObj.attributes.target_humidity_low,\n        this.hass.locale\n      )}-${formatNumber(\n        this.stateObj.attributes.target_humidity_high,\n        this.hass.locale\n      )} %`;\n    }\n\n    if (this.stateObj.attributes.humidity != null) {\n      return `${formatNumber(\n        this.stateObj.attributes.humidity,\n        this.hass.locale\n      )} %`;\n    }\n\n    return \"\";\n  }\n\n  private _localizeState(): string {\n    if (UNAVAILABLE_STATES.includes(this.stateObj.state)) {\n      return this.hass.localize(`state.default.${this.stateObj.state}`);\n    }\n\n    const stateString = this.hass.localize(\n      `component.climate.state._.${this.stateObj.state}`\n    );\n\n    return this.stateObj.attributes.hvac_action\n      ? `${this.hass.localize(\n          `state_attributes.climate.hvac_action.${this.stateObj.attributes.hvac_action}`\n        )} (${stateString})`\n      : stateString;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        white-space: nowrap;\n      }\n\n      .target {\n        color: var(--primary-text-color);\n      }\n\n      .current {\n        color: var(--secondary-text-color);\n      }\n\n      .state-label {\n        font-weight: bold;\n        text-transform: capitalize;\n      }\n\n      .unit {\n        display: inline-block;\n        direction: ltr;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-climate-state\": HaClimateState;\n  }\n}\n","import { mdiStop } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { computeCloseIcon, computeOpenIcon } from \"../common/entity/cover_icon\";\nimport { supportsFeature } from \"../common/entity/supports-feature\";\nimport {\n  CoverEntity,\n  CoverEntityFeature,\n  isClosing,\n  isFullyClosed,\n  isFullyOpen,\n  isOpening,\n} from \"../data/cover\";\nimport { UNAVAILABLE } from \"../data/entity\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\n@customElement(\"ha-cover-controls\")\nclass HaCoverControls extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj!: CoverEntity;\n\n  protected render(): TemplateResult {\n    if (!this.stateObj) {\n      return html``;\n    }\n\n    return html`\n      <div class=\"state\">\n        <ha-icon-button\n          class=${classMap({\n            hidden: !supportsFeature(this.stateObj, CoverEntityFeature.OPEN),\n          })}\n          .label=${this.hass.localize(\n            \"ui.dialogs.more_info_control.cover.open_cover\"\n          )}\n          @click=${this._onOpenTap}\n          .disabled=${this._computeOpenDisabled()}\n          .path=${computeOpenIcon(this.stateObj)}\n        >\n        </ha-icon-button>\n        <ha-icon-button\n          class=${classMap({\n            hidden: !supportsFeature(this.stateObj, CoverEntityFeature.STOP),\n          })}\n          .label=${this.hass.localize(\n            \"ui.dialogs.more_info_control.cover.stop_cover\"\n          )}\n          .path=${mdiStop}\n          @click=${this._onStopTap}\n          .disabled=${this.stateObj.state === UNAVAILABLE}\n        ></ha-icon-button>\n        <ha-icon-button\n          class=${classMap({\n            hidden: !supportsFeature(this.stateObj, CoverEntityFeature.CLOSE),\n          })}\n          .label=${this.hass.localize(\n            \"ui.dialogs.more_info_control.cover.close_cover\"\n          )}\n          @click=${this._onCloseTap}\n          .disabled=${this._computeClosedDisabled()}\n          .path=${computeCloseIcon(this.stateObj)}\n        >\n        </ha-icon-button>\n      </div>\n    `;\n  }\n\n  private _computeOpenDisabled(): boolean {\n    if (this.stateObj.state === UNAVAILABLE) {\n      return true;\n    }\n    const assumedState = this.stateObj.attributes.assumed_state === true;\n    return (\n      (isFullyOpen(this.stateObj) || isOpening(this.stateObj)) && !assumedState\n    );\n  }\n\n  private _computeClosedDisabled(): boolean {\n    if (this.stateObj.state === UNAVAILABLE) {\n      return true;\n    }\n    const assumedState = this.stateObj.attributes.assumed_state === true;\n    return (\n      (isFullyClosed(this.stateObj) || isClosing(this.stateObj)) &&\n      !assumedState\n    );\n  }\n\n  private _onOpenTap(ev): void {\n    ev.stopPropagation();\n    this.hass.callService(\"cover\", \"open_cover\", {\n      entity_id: this.stateObj.entity_id,\n    });\n  }\n\n  private _onCloseTap(ev): void {\n    ev.stopPropagation();\n    this.hass.callService(\"cover\", \"close_cover\", {\n      entity_id: this.stateObj.entity_id,\n    });\n  }\n\n  private _onStopTap(ev): void {\n    ev.stopPropagation();\n    this.hass.callService(\"cover\", \"stop_cover\", {\n      entity_id: this.stateObj.entity_id,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .state {\n        white-space: nowrap;\n      }\n      .hidden {\n        visibility: hidden !important;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-cover-controls\": HaCoverControls;\n  }\n}\n","import { mdiArrowBottomLeft, mdiArrowTopRight, mdiStop } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { supportsFeature } from \"../common/entity/supports-feature\";\nimport {\n  CoverEntity,\n  CoverEntityFeature,\n  isFullyClosedTilt,\n  isFullyOpenTilt,\n} from \"../data/cover\";\nimport { UNAVAILABLE } from \"../data/entity\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\n@customElement(\"ha-cover-tilt-controls\")\nclass HaCoverTiltControls extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) stateObj!: CoverEntity;\n\n  protected render(): TemplateResult {\n    if (!this.stateObj) {\n      return html``;\n    }\n\n    return html` <ha-icon-button\n        class=${classMap({\n          invisible: !supportsFeature(\n            this.stateObj,\n            CoverEntityFeature.OPEN_TILT\n          ),\n        })}\n        .label=${this.hass.localize(\n          \"ui.dialogs.more_info_control.cover.open_tilt_cover\"\n        )}\n        .path=${mdiArrowTopRight}\n        @click=${this._onOpenTiltTap}\n        .disabled=${this._computeOpenDisabled()}\n      ></ha-icon-button>\n      <ha-icon-button\n        class=${classMap({\n          invisible: !supportsFeature(\n            this.stateObj,\n            CoverEntityFeature.STOP_TILT\n          ),\n        })}\n        .label=${this.hass.localize(\n          \"ui.dialogs.more_info_control.cover.stop_cover\"\n        )}\n        .path=${mdiStop}\n        @click=${this._onStopTiltTap}\n        .disabled=${this.stateObj.state === UNAVAILABLE}\n      ></ha-icon-button>\n      <ha-icon-button\n        class=${classMap({\n          invisible: !supportsFeature(\n            this.stateObj,\n            CoverEntityFeature.CLOSE_TILT\n          ),\n        })}\n        .label=${this.hass.localize(\n          \"ui.dialogs.more_info_control.cover.close_tilt_cover\"\n        )}\n        .path=${mdiArrowBottomLeft}\n        @click=${this._onCloseTiltTap}\n        .disabled=${this._computeClosedDisabled()}\n      ></ha-icon-button>`;\n  }\n\n  private _computeOpenDisabled(): boolean {\n    if (this.stateObj.state === UNAVAILABLE) {\n      return true;\n    }\n    const assumedState = this.stateObj.attributes.assumed_state === true;\n    return isFullyOpenTilt(this.stateObj) && !assumedState;\n  }\n\n  private _computeClosedDisabled(): boolean {\n    if (this.stateObj.state === UNAVAILABLE) {\n      return true;\n    }\n    const assumedState = this.stateObj.attributes.assumed_state === true;\n    return isFullyClosedTilt(this.stateObj) && !assumedState;\n  }\n\n  private _onOpenTiltTap(ev): void {\n    ev.stopPropagation();\n    this.hass.callService(\"cover\", \"open_cover_tilt\", {\n      entity_id: this.stateObj.entity_id,\n    });\n  }\n\n  private _onCloseTiltTap(ev): void {\n    ev.stopPropagation();\n    this.hass.callService(\"cover\", \"close_cover_tilt\", {\n      entity_id: this.stateObj.entity_id,\n    });\n  }\n\n  private _onStopTiltTap(ev): void {\n    ev.stopPropagation();\n    this.hass.callService(\"cover\", \"stop_cover_tilt\", {\n      entity_id: this.stateObj.entity_id,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        white-space: nowrap;\n      }\n      .invisible {\n        visibility: hidden !important;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-cover-tilt-controls\": HaCoverTiltControls;\n  }\n}\n","import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-select:not(.mdc-select--disabled) .mdc-select__icon {\n        color: var(--secondary-text-color);\n      }\n      .mdc-select__anchor {\n        width: var(--ha-select-min-width, 200px);\n      }\n      .mdc-select--filled .mdc-floating-label {\n        inset-inline-start: 12px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select--filled.mdc-select--with-leading-icon .mdc-floating-label {\n        inset-inline-start: 48px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select .mdc-select__anchor {\n        padding-inline-start: 12px;\n        padding-inline-end: 0px;\n        direction: var(--direction);\n      }\n      .mdc-select__anchor .mdc-floating-label--float-above {\n        transform-origin: var(--float-start);\n      }\n    `,\n  ];\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing?: boolean;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 12px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n        direction: var(--direction);\n      }\n      .mdc-text-field--with-leading-icon {\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 16px);\n        direction: var(--direction);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon--leading {\n        margin-inline-start: 16px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      .mdc-floating-label:not(.mdc-floating-label--float-above) {\n        text-overflow: ellipsis;\n        width: inherit;\n        padding-right: 30px;\n        box-sizing: border-box;\n      }\n\n      input {\n        text-align: var(--text-field-text-align, start);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start);\n        direction: var(--direction);\n        transform-origin: var(--float-start);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--filled\n        .mdc-floating-label {\n        max-width: calc(100% - 48px);\n        inset-inline-start: 48px !important;\n        inset-inline-end: initial !important;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__input[type=\"number\"] {\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          .mdc-text-field__affix--suffix,\n          .mdc-text-field--with-leading-icon,\n          .mdc-text-field__icon--leading,\n          .mdc-floating-label,\n          .mdc-text-field--with-leading-icon.mdc-text-field--filled\n            .mdc-floating-label,\n          .mdc-text-field__input[type=\"number\"] {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import \"@material/mwc-button\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport LocalizeMixin from \"../mixins/localize-mixin\";\n\nconst STATES_INTERCEPTABLE = {\n  cleaning: {\n    action: \"return_to_base\",\n    service: \"return_to_base\",\n  },\n  docked: {\n    action: \"start_cleaning\",\n    service: \"start\",\n  },\n  idle: {\n    action: \"start_cleaning\",\n    service: \"start\",\n  },\n  off: {\n    action: \"turn_on\",\n    service: \"turn_on\",\n  },\n  on: {\n    action: \"turn_off\",\n    service: \"turn_off\",\n  },\n  paused: {\n    action: \"resume_cleaning\",\n    service: \"start\",\n  },\n};\n\n/*\n * @appliesMixin LocalizeMixin\n */\nclass HaVacuumState extends LocalizeMixin(PolymerElement) {\n  static get template() {\n    return html`\n      <style>\n        mwc-button {\n          top: 3px;\n          height: 37px;\n          margin-right: -0.57em;\n        }\n        mwc-button[disabled] {\n          background-color: transparent;\n          color: var(--secondary-text-color);\n        }\n      </style>\n\n      <mwc-button on-click=\"_callService\" disabled=\"[[!_interceptable]]\"\n        >[[_computeLabel(stateObj.state, _interceptable)]]</mwc-button\n      >\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      stateObj: Object,\n      _interceptable: {\n        type: Boolean,\n        computed:\n          \"_computeInterceptable(stateObj.state, stateObj.attributes.supported_features)\",\n      },\n    };\n  }\n\n  _computeInterceptable(state, supportedFeatures) {\n    return state in STATES_INTERCEPTABLE && supportedFeatures !== 0;\n  }\n\n  _computeLabel(state, interceptable) {\n    return interceptable\n      ? this.localize(\n          `ui.card.vacuum.actions.${STATES_INTERCEPTABLE[state].action}`\n        )\n      : this.localize(`component.vacuum._.${state}`);\n  }\n\n  _callService(ev) {\n    ev.stopPropagation();\n    const stateObj = this.stateObj;\n    const service = STATES_INTERCEPTABLE[stateObj.state].service;\n    this.hass.callService(\"vacuum\", service, { entity_id: stateObj.entity_id });\n  }\n}\ncustomElements.define(\"ha-vacuum-state\", HaVacuumState);\n","import { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport { computeStateDisplay } from \"../common/entity/compute_state_display\";\nimport { formatNumber } from \"../common/number/format_number\";\nimport LocalizeMixin from \"../mixins/localize-mixin\";\n\n/*\n * @appliesMixin LocalizeMixin\n */\nclass HaWaterHeaterState extends LocalizeMixin(PolymerElement) {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          white-space: nowrap;\n        }\n\n        .target {\n          color: var(--primary-text-color);\n        }\n\n        .current {\n          color: var(--secondary-text-color);\n        }\n\n        .state-label {\n          font-weight: bold;\n          text-transform: capitalize;\n        }\n\n        .label {\n          direction: ltr;\n          display: inline-block;\n        }\n      </style>\n\n      <div class=\"target\">\n        <span class=\"state-label label\"> [[_localizeState(stateObj)]] </span>\n        <span class=\"label\">[[computeTarget(hass, stateObj)]]</span>\n      </div>\n\n      <template is=\"dom-if\" if=\"[[currentStatus]]\">\n        <div class=\"current\">\n          [[localize('ui.card.water_heater.currently')]]: [[currentStatus]]\n        </div>\n      </template>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      stateObj: Object,\n    };\n  }\n\n  computeTarget(hass, stateObj) {\n    if (!hass || !stateObj) return null;\n    // We're using \"!= null\" on purpose so that we match both null and undefined.\n\n    if (\n      stateObj.attributes.target_temp_low != null &&\n      stateObj.attributes.target_temp_high != null\n    ) {\n      return `${formatNumber(\n        stateObj.attributes.target_temp_low,\n        this.hass.locale\n      )} – ${formatNumber(\n        stateObj.attributes.target_temp_high,\n        this.hass.locale\n      )} ${hass.config.unit_system.temperature}`;\n    }\n    if (stateObj.attributes.temperature != null) {\n      return `${formatNumber(\n        stateObj.attributes.temperature,\n        this.hass.locale\n      )} ${hass.config.unit_system.temperature}`;\n    }\n\n    return \"\";\n  }\n\n  _localizeState(stateObj) {\n    return computeStateDisplay(this.hass.localize, stateObj, this.hass.locale);\n  }\n}\ncustomElements.define(\"ha-water_heater-state\", HaWaterHeaterState);\n","import \"@material/mwc-button\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../components/entity/ha-entity-toggle\";\nimport \"../components/entity/state-info\";\nimport { UNAVAILABLE } from \"../data/entity\";\nimport { haStyle } from \"../resources/styles\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"state-card-button\")\nexport class StateCardButton extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public stateObj!: HassEntity;\n\n  @property({ type: Boolean }) public inDialog = false;\n\n  protected render() {\n    const stateObj = this.stateObj;\n    return html`\n      <div class=\"horizontal justified layout\">\n        <state-info\n          .hass=${this.hass}\n          .stateObj=${stateObj}\n          .inDialog=${this.inDialog}\n        ></state-info>\n        <mwc-button\n          @click=${this._pressButton}\n          .disabled=${stateObj.state === UNAVAILABLE}\n        >\n          ${this.hass.localize(\"ui.card.button.press\")}\n        </mwc-button>\n      </div>\n    `;\n  }\n\n  private _pressButton(ev: Event) {\n    ev.stopPropagation();\n    this.hass.callService(\"button\", \"press\", {\n      entity_id: this.stateObj.entity_id,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return haStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"state-card-button\": StateCardButton;\n  }\n}\n","import \"@polymer/iron-flex-layout/iron-flex-layout-classes\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport \"../components/entity/state-info\";\nimport \"../components/ha-climate-state\";\n\nclass StateCardClimate extends PolymerElement {\n  static get template() {\n    return html`\n      <style include=\"iron-flex iron-flex-alignment\"></style>\n      <style>\n        :host {\n          @apply --paper-font-body1;\n          line-height: 1.5;\n        }\n\n        ha-climate-state {\n          margin-left: 16px;\n          text-align: right;\n        }\n      </style>\n\n      <div class=\"horizontal justified layout\">\n        ${this.stateInfoTemplate}\n        <ha-climate-state\n          hass=\"[[hass]]\"\n          state-obj=\"[[stateObj]]\"\n        ></ha-climate-state>\n      </div>\n    `;\n  }\n\n  static get stateInfoTemplate() {\n    return html`\n      <state-info\n        hass=\"[[hass]]\"\n        state-obj=\"[[stateObj]]\"\n        in-dialog=\"[[inDialog]]\"\n      ></state-info>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      stateObj: Object,\n      inDialog: {\n        type: Boolean,\n        value: false,\n      },\n    };\n  }\n}\ncustomElements.define(\"state-card-climate\", StateCardClimate);\n","import \"@material/mwc-button\";\nimport \"@polymer/iron-flex-layout/iron-flex-layout-classes\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport { computeStateDisplay } from \"../common/entity/compute_state_display\";\nimport \"../components/entity/state-info\";\nimport LocalizeMixin from \"../mixins/localize-mixin\";\n\n/*\n * @appliesMixin LocalizeMixin\n */\nclass StateCardConfigurator extends LocalizeMixin(PolymerElement) {\n  static get template() {\n    return html`\n      <style include=\"iron-flex iron-flex-alignment\"></style>\n      <style>\n        mwc-button {\n          top: 3px;\n          height: 37px;\n          margin-right: -0.57em;\n        }\n      </style>\n\n      <div class=\"horizontal justified layout\">\n        ${this.stateInfoTemplate}\n        <mwc-button hidden$=\"[[inDialog]]\"\n          >[[_localizeState(stateObj)]]</mwc-button\n        >\n      </div>\n\n      <!-- pre load the image so the dialog is rendered the proper size -->\n      <template is=\"dom-if\" if=\"[[stateObj.attributes.description_image]]\">\n        <img hidden=\"\" src=\"[[stateObj.attributes.description_image]]\" />\n      </template>\n    `;\n  }\n\n  static get stateInfoTemplate() {\n    return html`\n      <state-info\n        hass=\"[[hass]]\"\n        state-obj=\"[[stateObj]]\"\n        in-dialog=\"[[inDialog]]\"\n      ></state-info>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      stateObj: Object,\n      inDialog: {\n        type: Boolean,\n        value: false,\n      },\n    };\n  }\n\n  _localizeState(stateObj) {\n    return computeStateDisplay(this.hass.localize, stateObj, this.hass.locale);\n  }\n}\ncustomElements.define(\"state-card-configurator\", StateCardConfigurator);\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../components/entity/state-info\";\nimport \"../components/ha-cover-controls\";\nimport \"../components/ha-cover-tilt-controls\";\nimport { CoverEntity, isTiltOnly } from \"../data/cover\";\nimport { haStyle } from \"../resources/styles\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"state-card-cover\")\nclass StateCardCover extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj!: CoverEntity;\n\n  @property({ type: Boolean }) public inDialog = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"horizontal justified layout\">\n        <state-info\n          .hass=${this.hass}\n          .stateObj=${this.stateObj}\n          .inDialog=${this.inDialog}\n        ></state-info>\n        <ha-cover-controls\n          .hass=${this.hass}\n          .hidden=${isTiltOnly(this.stateObj)}\n          .stateObj=${this.stateObj}\n        ></ha-cover-controls>\n        <ha-cover-tilt-controls\n          .hass=${this.hass}\n          .hidden=${!isTiltOnly(this.stateObj)}\n          .stateObj=${this.stateObj}\n        ></ha-cover-tilt-controls>\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          line-height: 1.5;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"state-card-cover\": StateCardCover;\n  }\n}\n","import \"@polymer/iron-flex-layout/iron-flex-layout-classes\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nimport { computeStateDisplay } from \"../common/entity/compute_state_display\";\nimport { computeRTL } from \"../common/util/compute_rtl\";\nimport \"../components/entity/state-info\";\nimport { UNAVAILABLE_STATES } from \"../data/entity\";\nimport { SENSOR_DEVICE_CLASS_TIMESTAMP } from \"../data/sensor\";\nimport \"../panels/lovelace/components/hui-timestamp-display\";\nimport { haStyle } from \"../resources/styles\";\nimport type { HomeAssistant } from \"../types\";\n\n@customElement(\"state-card-display\")\nexport class StateCardDisplay extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj!: HassEntity;\n\n  @property({ type: Boolean }) public inDialog = false;\n\n  // property used only in CSS\n  @property({ type: Boolean, reflect: true }) public rtl = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"horizontal justified layout\">\n        <state-info\n          .hass=${this.hass}\n          .stateObj=${this.stateObj}\n          .inDialog=${this.inDialog}\n        >\n        </state-info>\n        <div\n          class=\"state ${classMap({\n            \"has-unit_of_measurement\":\n              \"unit_of_measurement\" in this.stateObj.attributes,\n          })}\"\n        >\n          ${computeDomain(this.stateObj.entity_id) === \"sensor\" &&\n          this.stateObj.attributes.device_class ===\n            SENSOR_DEVICE_CLASS_TIMESTAMP &&\n          !UNAVAILABLE_STATES.includes(this.stateObj.state)\n            ? html` <hui-timestamp-display\n                .hass=${this.hass}\n                .ts=${new Date(this.stateObj.state)}\n                format=\"datetime\"\n                capitalize\n              ></hui-timestamp-display>`\n            : computeStateDisplay(\n                this.hass!.localize,\n                this.stateObj,\n                this.hass.locale\n              )}\n        </div>\n      </div>\n    `;\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (!changedProps.has(\"hass\")) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (!oldHass || oldHass.language !== this.hass.language) {\n      this.rtl = computeRTL(this.hass);\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        state-info {\n          flex: 1 1 auto;\n          min-width: 0;\n        }\n        .state {\n          color: var(--primary-text-color);\n          margin-inline-start: 16px;\n          margin-inline-end: initial;\n          text-align: var(--float-end, right);\n          flex: 0 0 auto;\n          overflow-wrap: break-word;\n          display: flex;\n          align-items: center;\n          direction: ltr;\n        }\n        .state.has-unit_of_measurement {\n          white-space: nowrap;\n        }\n      `,\n    ];\n  }\n}\n","import \"@material/mwc-button\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../components/entity/ha-entity-toggle\";\nimport \"../components/entity/state-info\";\nimport { UNAVAILABLE } from \"../data/entity\";\nimport { haStyle } from \"../resources/styles\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"state-card-input_button\")\nexport class StateCardInputButton extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public stateObj!: HassEntity;\n\n  @property({ type: Boolean }) public inDialog = false;\n\n  protected render() {\n    const stateObj = this.stateObj;\n    return html`\n      <div class=\"horizontal justified layout\">\n        <state-info\n          .hass=${this.hass}\n          .stateObj=${stateObj}\n          .inDialog=${this.inDialog}\n        ></state-info>\n        <mwc-button\n          @click=${this._pressButton}\n          .disabled=${stateObj.state === UNAVAILABLE}\n        >\n          ${this.hass.localize(\"ui.card.button.press\")}\n        </mwc-button>\n      </div>\n    `;\n  }\n\n  private _pressButton(ev: Event) {\n    ev.stopPropagation();\n    this.hass.callService(\"input_button\", \"press\", {\n      entity_id: this.stateObj.entity_id,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return haStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"state-card-input_button\": StateCardInputButton;\n  }\n}\n","import \"@polymer/iron-flex-layout/iron-flex-layout-classes\";\nimport { IronResizableBehavior } from \"@polymer/iron-resizable-behavior/iron-resizable-behavior\";\nimport { mixinBehaviors } from \"@polymer/polymer/lib/legacy/class\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport { computeStateDisplay } from \"../common/entity/compute_state_display\";\nimport \"../components/entity/state-info\";\nimport \"../components/ha-slider\";\nimport \"../components/ha-textfield\";\n\nclass StateCardInputNumber extends mixinBehaviors(\n  [IronResizableBehavior],\n  PolymerElement\n) {\n  static get template() {\n    return html`\n      <style include=\"iron-flex iron-flex-alignment\"></style>\n      <style>\n        ha-slider {\n          margin-left: auto;\n        }\n        .state {\n          @apply --paper-font-body1;\n          color: var(--primary-text-color);\n\n          display: flex;\n          align-items: center;\n          justify-content: end;\n        }\n        .sliderstate {\n          min-width: 45px;\n        }\n        [hidden] {\n          display: none !important;\n        }\n        ha-textfield {\n          text-align: right;\n          margin-left: auto;\n        }\n      </style>\n\n      <div class=\"horizontal justified layout\" id=\"input_number_card\">\n        ${this.stateInfoTemplate}\n        <ha-slider\n          min=\"[[min]]\"\n          max=\"[[max]]\"\n          value=\"{{value}}\"\n          step=\"[[step]]\"\n          hidden=\"[[hiddenslider]]\"\n          pin\n          on-change=\"selectedValueChanged\"\n          on-click=\"stopPropagation\"\n          id=\"slider\"\n          ignore-bar-touch=\"\"\n        >\n        </ha-slider>\n        <ha-textfield\n          no-label-float=\"\"\n          auto-validate=\"\"\n          pattern=\"[0-9]+([\\\\.][0-9]+)?\"\n          step=\"[[step]]\"\n          min=\"[[min]]\"\n          max=\"[[max]]\"\n          value=\"[[value]]\"\n          type=\"number\"\n          on-change=\"selectedValueChanged\"\n          on-click=\"stopPropagation\"\n          on-input=\"onInput\"\n          hidden=\"[[hiddenbox]]\"\n          suffix=\"[[stateObj.attributes.unit_of_measurement]]\"\n        >\n        </ha-textfield>\n        <div\n          id=\"sliderstate\"\n          class=\"state sliderstate\"\n          hidden=\"[[hiddenslider]]\"\n        >\n          [[formattedState]]\n        </div>\n      </div>\n    `;\n  }\n\n  static get stateInfoTemplate() {\n    return html`\n      <state-info\n        hass=\"[[hass]]\"\n        state-obj=\"[[stateObj]]\"\n        in-dialog=\"[[inDialog]]\"\n      ></state-info>\n    `;\n  }\n\n  ready() {\n    super.ready();\n    if (typeof ResizeObserver === \"function\") {\n      const ro = new ResizeObserver((entries) => {\n        entries.forEach(() => {\n          this.hiddenState();\n        });\n      });\n      ro.observe(this.$.input_number_card);\n    } else {\n      this.addEventListener(\"iron-resize\", this.hiddenState);\n    }\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      hiddenbox: {\n        type: Boolean,\n        value: true,\n      },\n      hiddenslider: {\n        type: Boolean,\n        value: true,\n      },\n      inDialog: {\n        type: Boolean,\n        value: false,\n      },\n      stateObj: {\n        type: Object,\n        observer: \"stateObjectChanged\",\n      },\n      min: {\n        type: Number,\n        value: 0,\n      },\n      max: {\n        type: Number,\n        value: 100,\n      },\n      maxlength: {\n        type: Number,\n        value: 3,\n      },\n      step: Number,\n      value: Number,\n      formattedState: String,\n      mode: String,\n    };\n  }\n\n  hiddenState() {\n    if (this.mode !== \"slider\") return;\n    const sliderwidth = this.$.slider.offsetWidth;\n    if (sliderwidth < 100) {\n      this.$.sliderstate.hidden = true;\n    } else if (sliderwidth >= 145) {\n      this.$.sliderstate.hidden = false;\n    }\n  }\n\n  stateObjectChanged(newVal) {\n    const prevMode = this.mode;\n    this.setProperties({\n      min: Number(newVal.attributes.min),\n      max: Number(newVal.attributes.max),\n      step: Number(newVal.attributes.step),\n      value: Number(newVal.state),\n      formattedState: computeStateDisplay(\n        this.hass.localize,\n        newVal,\n        this.hass.locale,\n        newVal.state\n      ),\n      mode: String(newVal.attributes.mode),\n      maxlength: String(newVal.attributes.max).length,\n      hiddenbox: newVal.attributes.mode !== \"box\",\n      hiddenslider: newVal.attributes.mode !== \"slider\",\n    });\n    if (this.mode === \"slider\" && prevMode !== \"slider\") {\n      this.hiddenState();\n    }\n  }\n\n  onInput(ev) {\n    this.value = ev.target.value;\n  }\n\n  selectedValueChanged() {\n    if (this.value === Number(this.stateObj.state)) {\n      return;\n    }\n    this.hass.callService(\"input_number\", \"set_value\", {\n      value: this.value,\n      entity_id: this.stateObj.entity_id,\n    });\n  }\n\n  stopPropagation(ev) {\n    ev.stopPropagation();\n  }\n}\n\ncustomElements.define(\"state-card-input_number\", StateCardInputNumber);\n","import \"@material/mwc-list/mwc-list-item\";\nimport \"../components/ha-select\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport { computeStateName } from \"../common/entity/compute_state_name\";\nimport \"../components/entity/state-badge\";\nimport { UNAVAILABLE } from \"../data/entity\";\nimport { InputSelectEntity, setInputSelectOption } from \"../data/input_select\";\nimport type { HomeAssistant } from \"../types\";\n\n@customElement(\"state-card-input_select\")\nclass StateCardInputSelect extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public stateObj!: InputSelectEntity;\n\n  protected render(): TemplateResult {\n    return html`\n      <state-badge .stateObj=${this.stateObj}></state-badge>\n      <ha-select\n        .label=${computeStateName(this.stateObj)}\n        .value=${this.stateObj.state}\n        .disabled=${\n          this.stateObj.state === UNAVAILABLE /* UNKNWON state is allowed */\n        }\n        naturalMenuWidth\n        fixedMenuPosition\n        @selected=${this._selectedOptionChanged}\n        @closed=${stopPropagation}\n      >\n        ${this.stateObj.attributes.options.map(\n          (option) =>\n            html`<mwc-list-item .value=${option}>${option}</mwc-list-item>`\n        )}\n      </ha-select>\n    `;\n  }\n\n  private async _selectedOptionChanged(ev) {\n    const option = ev.target.value;\n    if (option === this.stateObj.state) {\n      return;\n    }\n    await setInputSelectOption(this.hass, this.stateObj.entity_id, option);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n      }\n\n      state-badge {\n        float: left;\n        margin-top: 10px;\n      }\n\n      ha-select {\n        width: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"state-card-input_select\": StateCardInputSelect;\n  }\n}\n","/* eslint-plugin-disable lit */\nimport \"@polymer/iron-flex-layout/iron-flex-layout-classes\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport \"../components/entity/state-info\";\nimport \"../components/ha-textfield\";\n\nclass StateCardInputText extends PolymerElement {\n  static get template() {\n    return html`\n      <style include=\"iron-flex iron-flex-alignment\"></style>\n      <style>\n        ha-textfield {\n          margin-left: 16px;\n        }\n      </style>\n\n      <div class=\"horizontal justified layout\">\n        ${this.stateInfoTemplate}\n        <ha-textfield\n          minlength=\"[[stateObj.attributes.min]]\"\n          maxlength=\"[[stateObj.attributes.max]]\"\n          value=\"[[value]]\"\n          auto-validate=\"[[stateObj.attributes.pattern]]\"\n          pattern=\"[[stateObj.attributes.pattern]]\"\n          type=\"[[stateObj.attributes.mode]]\"\n          on-input=\"onInput\"\n          on-change=\"selectedValueChanged\"\n          on-click=\"stopPropagation\"\n          placeholder=\"(empty value)\"\n        >\n        </ha-textfield>\n      </div>\n    `;\n  }\n\n  static get stateInfoTemplate() {\n    return html`\n      <state-info\n        hass=\"[[hass]]\"\n        state-obj=\"[[stateObj]]\"\n        in-dialog=\"[[inDialog]]\"\n      ></state-info>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n\n      inDialog: {\n        type: Boolean,\n        value: false,\n      },\n\n      stateObj: {\n        type: Object,\n        observer: \"stateObjectChanged\",\n      },\n\n      pattern: String,\n      value: String,\n    };\n  }\n\n  stateObjectChanged(newVal) {\n    this.value = newVal.state;\n  }\n\n  onInput(ev) {\n    this.value = ev.target.value;\n  }\n\n  selectedValueChanged() {\n    if (this.value === this.stateObj.state) {\n      return;\n    }\n    this.hass.callService(\"input_text\", \"set_value\", {\n      value: this.value,\n      entity_id: this.stateObj.entity_id,\n    });\n  }\n\n  stopPropagation(ev) {\n    ev.stopPropagation();\n  }\n}\n\ncustomElements.define(\"state-card-input_text\", StateCardInputText);\n","import \"@material/mwc-button\";\nimport \"@polymer/iron-flex-layout/iron-flex-layout-classes\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport \"../components/entity/state-info\";\nimport LocalizeMixin from \"../mixins/localize-mixin\";\n\n/*\n * @appliesMixin LocalizeMixin\n */\nclass StateCardLock extends LocalizeMixin(PolymerElement) {\n  static get template() {\n    return html`\n      <style include=\"iron-flex iron-flex-alignment\"></style>\n      <style>\n        mwc-button {\n          top: 3px;\n          height: 37px;\n          margin-right: -0.57em;\n        }\n      </style>\n\n      <div class=\"horizontal justified layout\">\n        ${this.stateInfoTemplate}\n        <mwc-button\n          on-click=\"_callService\"\n          data-service=\"unlock\"\n          hidden$=\"[[!isLocked]]\"\n          >[[localize('ui.card.lock.unlock')]]</mwc-button\n        >\n        <mwc-button\n          on-click=\"_callService\"\n          data-service=\"lock\"\n          hidden$=\"[[isLocked]]\"\n          >[[localize('ui.card.lock.lock')]]</mwc-button\n        >\n      </div>\n    `;\n  }\n\n  static get stateInfoTemplate() {\n    return html`\n      <state-info\n        hass=\"[[hass]]\"\n        state-obj=\"[[stateObj]]\"\n        in-dialog=\"[[inDialog]]\"\n      ></state-info>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      stateObj: {\n        type: Object,\n        observer: \"_stateObjChanged\",\n      },\n      inDialog: {\n        type: Boolean,\n        value: false,\n      },\n      isLocked: Boolean,\n    };\n  }\n\n  _stateObjChanged(newVal) {\n    if (newVal) {\n      this.isLocked = newVal.state === \"locked\";\n    }\n  }\n\n  _callService(ev) {\n    ev.stopPropagation();\n    const service = ev.target.dataset.service;\n    const data = {\n      entity_id: this.stateObj.entity_id,\n    };\n    this.hass.callService(\"lock\", service, data);\n  }\n}\ncustomElements.define(\"state-card-lock\", StateCardLock);\n","import \"@polymer/iron-flex-layout/iron-flex-layout-classes\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport { computeStateDisplay } from \"../common/entity/compute_state_display\";\nimport \"../components/entity/state-info\";\nimport LocalizeMixin from \"../mixins/localize-mixin\";\nimport HassMediaPlayerEntity from \"../util/hass-media-player-model\";\n\n/*\n * @appliesMixin LocalizeMixin\n */\nclass StateCardMediaPlayer extends LocalizeMixin(PolymerElement) {\n  static get template() {\n    return html`\n      <style include=\"iron-flex iron-flex-alignment\"></style>\n      <style>\n        :host {\n          line-height: 1.5;\n        }\n\n        .state {\n          @apply --paper-font-common-nowrap;\n          @apply --paper-font-body1;\n          margin-left: 16px;\n          text-align: right;\n        }\n\n        .main-text {\n          @apply --paper-font-common-nowrap;\n          color: var(--primary-text-color);\n        }\n\n        .main-text[take-height] {\n          line-height: 40px;\n        }\n\n        .secondary-text {\n          @apply --paper-font-common-nowrap;\n          color: var(--secondary-text-color);\n        }\n      </style>\n\n      <div class=\"horizontal justified layout\">\n        ${this.stateInfoTemplate}\n        <div class=\"state\">\n          <div class=\"main-text\" take-height$=\"[[!playerObj.secondaryTitle]]\">\n            [[computePrimaryText(localize, playerObj)]]\n          </div>\n          <div class=\"secondary-text\">[[playerObj.secondaryTitle]]</div>\n        </div>\n      </div>\n    `;\n  }\n\n  static get stateInfoTemplate() {\n    return html`\n      <state-info\n        hass=\"[[hass]]\"\n        state-obj=\"[[stateObj]]\"\n        in-dialog=\"[[inDialog]]\"\n      ></state-info>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      stateObj: Object,\n      inDialog: {\n        type: Boolean,\n        value: false,\n      },\n      playerObj: {\n        type: Object,\n        computed: \"computePlayerObj(hass, stateObj)\",\n      },\n    };\n  }\n\n  computePlayerObj(hass, stateObj) {\n    return new HassMediaPlayerEntity(hass, stateObj);\n  }\n\n  computePrimaryText(localize, playerObj) {\n    return (\n      playerObj.primaryTitle ||\n      computeStateDisplay(localize, playerObj.stateObj, this.hass.locale)\n    );\n  }\n}\ncustomElements.define(\"state-card-media_player\", StateCardMediaPlayer);\n","import \"@polymer/iron-flex-layout/iron-flex-layout-classes\";\nimport { IronResizableBehavior } from \"@polymer/iron-resizable-behavior/iron-resizable-behavior\";\nimport { mixinBehaviors } from \"@polymer/polymer/lib/legacy/class\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport \"../components/entity/state-info\";\nimport \"../components/ha-slider\";\nimport \"../components/ha-textfield\";\n\nclass StateCardNumber extends mixinBehaviors(\n  [IronResizableBehavior],\n  PolymerElement\n) {\n  static get template() {\n    return html`\n      <style include=\"iron-flex iron-flex-alignment\"></style>\n      <style>\n        ha-slider {\n          margin-left: auto;\n        }\n        .state {\n          @apply --paper-font-body1;\n          color: var(--primary-text-color);\n\n          display: flex;\n          align-items: center;\n          justify-content: end;\n        }\n        .sliderstate {\n          min-width: 45px;\n        }\n        [hidden] {\n          display: none !important;\n        }\n        ha-textfield {\n          text-align: right;\n          margin-left: auto;\n        }\n      </style>\n\n      <div class=\"horizontal justified layout\" id=\"number_card\">\n        ${this.stateInfoTemplate}\n        <ha-slider\n          min=\"[[min]]\"\n          max=\"[[max]]\"\n          value=\"{{value}}\"\n          step=\"[[step]]\"\n          hidden=\"[[hiddenslider]]\"\n          pin\n          on-change=\"selectedValueChanged\"\n          on-click=\"stopPropagation\"\n          id=\"slider\"\n          ignore-bar-touch=\"\"\n        >\n        </ha-slider>\n        <ha-textfield\n          auto-validate=\"\"\n          pattern=\"[0-9]+([\\\\.][0-9]+)?\"\n          step=\"[[step]]\"\n          min=\"[[min]]\"\n          max=\"[[max]]\"\n          value=\"[[value]]\"\n          type=\"number\"\n          on-input=\"onInput\"\n          on-change=\"selectedValueChanged\"\n          on-click=\"stopPropagation\"\n          hidden=\"[[hiddenbox]]\"\n        >\n        </ha-textfield>\n        <div class=\"state\" hidden=\"[[hiddenbox]]\">\n          [[stateObj.attributes.unit_of_measurement]]\n        </div>\n        <div\n          id=\"sliderstate\"\n          class=\"state sliderstate\"\n          hidden=\"[[hiddenslider]]\"\n        >\n          [[value]] [[stateObj.attributes.unit_of_measurement]]\n        </div>\n      </div>\n    `;\n  }\n\n  static get stateInfoTemplate() {\n    return html`\n      <state-info\n        hass=\"[[hass]]\"\n        state-obj=\"[[stateObj]]\"\n        in-dialog=\"[[inDialog]]\"\n      ></state-info>\n    `;\n  }\n\n  ready() {\n    super.ready();\n    if (typeof ResizeObserver === \"function\") {\n      const ro = new ResizeObserver((entries) => {\n        entries.forEach(() => {\n          this.hiddenState();\n        });\n      });\n      ro.observe(this.$.number_card);\n    } else {\n      this.addEventListener(\"iron-resize\", () => this.hiddenState());\n    }\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      hiddenbox: {\n        type: Boolean,\n        value: true,\n      },\n      hiddenslider: {\n        type: Boolean,\n        value: true,\n      },\n      inDialog: {\n        type: Boolean,\n        value: false,\n      },\n      stateObj: {\n        type: Object,\n        observer: \"stateObjectChanged\",\n      },\n      min: {\n        type: Number,\n        value: 0,\n      },\n      max: {\n        type: Number,\n        value: 100,\n      },\n      maxlength: {\n        type: Number,\n        value: 3,\n      },\n      step: Number,\n      value: Number,\n      mode: String,\n    };\n  }\n\n  hiddenState() {\n    if (this.mode !== \"slider\") return;\n    const sliderwidth = this.$.slider.offsetWidth;\n    if (sliderwidth < 100) {\n      this.$.sliderstate.hidden = true;\n    } else if (sliderwidth >= 145) {\n      this.$.sliderstate.hidden = false;\n    }\n  }\n\n  stateObjectChanged(newVal) {\n    const prevMode = this.mode;\n    const min = Number(newVal.attributes.min);\n    const max = Number(newVal.attributes.max);\n    const step = Number(newVal.attributes.step);\n    const range = (max - min) / step;\n\n    this.setProperties({\n      min: min,\n      max: max,\n      step: step,\n      value: Number(newVal.state),\n      mode: String(newVal.attributes.mode),\n      maxlength: String(newVal.attributes.max).length,\n      hiddenbox:\n        newVal.attributes.mode === \"slider\" ||\n        (newVal.attributes.mode === \"auto\" && range <= 256),\n      hiddenslider:\n        newVal.attributes.mode === \"box\" ||\n        (newVal.attributes.mode === \"auto\" && range > 256),\n    });\n    if (this.mode === \"slider\" && prevMode !== \"slider\") {\n      this.hiddenState();\n    }\n  }\n\n  onInput(ev) {\n    this.value = ev.target.value;\n  }\n\n  selectedValueChanged() {\n    if (this.value === Number(this.stateObj.state)) {\n      return;\n    }\n    this.hass.callService(\"number\", \"set_value\", {\n      value: this.value,\n      entity_id: this.stateObj.entity_id,\n    });\n  }\n\n  stopPropagation(ev) {\n    ev.stopPropagation();\n  }\n}\n\ncustomElements.define(\"state-card-number\", StateCardNumber);\n","import \"@material/mwc-button\";\nimport \"@polymer/iron-flex-layout/iron-flex-layout-classes\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport \"../components/entity/state-info\";\nimport { activateScene } from \"../data/scene\";\nimport LocalizeMixin from \"../mixins/localize-mixin\";\n\n/*\n * @appliesMixin LocalizeMixin\n */\nclass StateCardScene extends LocalizeMixin(PolymerElement) {\n  static get template() {\n    return html`\n      <style include=\"iron-flex iron-flex-alignment\"></style>\n      <style>\n        mwc-button {\n          top: 3px;\n          height: 37px;\n          margin-right: -0.57em;\n        }\n      </style>\n\n      <div class=\"horizontal justified layout\">\n        ${this.stateInfoTemplate}\n        <mwc-button on-click=\"_activateScene\"\n          >[[localize('ui.card.scene.activate')]]</mwc-button\n        >\n      </div>\n    `;\n  }\n\n  static get stateInfoTemplate() {\n    return html`\n      <state-info\n        hass=\"[[hass]]\"\n        state-obj=\"[[stateObj]]\"\n        in-dialog=\"[[inDialog]]\"\n      ></state-info>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      stateObj: Object,\n      inDialog: {\n        type: Boolean,\n        value: false,\n      },\n    };\n  }\n\n  _activateScene(ev) {\n    ev.stopPropagation();\n    activateScene(this.hass, this.stateObj.entity_id);\n  }\n}\ncustomElements.define(\"state-card-scene\", StateCardScene);\n","import \"@material/mwc-button\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../components/entity/ha-entity-toggle\";\nimport \"../components/entity/state-info\";\nimport { UNAVAILABLE_STATES } from \"../data/entity\";\nimport { canRun, ScriptEntity } from \"../data/script\";\nimport { haStyle } from \"../resources/styles\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"state-card-script\")\nexport class StateCardScript extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public stateObj!: HassEntity;\n\n  @property({ type: Boolean }) public inDialog = false;\n\n  protected render() {\n    const stateObj = this.stateObj as ScriptEntity;\n    return html`\n      <div class=\"horizontal justified layout\">\n        <state-info\n          .hass=${this.hass}\n          .stateObj=${stateObj}\n          .inDialog=${this.inDialog}\n        ></state-info>\n        ${stateObj.state === \"on\"\n          ? html`<mwc-button @click=${this._cancelScript}>\n              ${stateObj.attributes.mode !== \"single\" &&\n              (stateObj.attributes.current || 0) > 0\n                ? this.hass.localize(\n                    \"ui.card.script.cancel_multiple\",\n                    \"number\",\n                    stateObj.attributes.current\n                  )\n                : this.hass.localize(\"ui.card.script.cancel\")}\n            </mwc-button>`\n          : \"\"}\n        ${stateObj.state === \"off\" || stateObj.attributes.max\n          ? html`<mwc-button\n              @click=${this._runScript}\n              .disabled=${UNAVAILABLE_STATES.includes(stateObj.state) ||\n              !canRun(stateObj)}\n            >\n              ${this.hass!.localize(\"ui.card.script.run\")}\n            </mwc-button>`\n          : \"\"}\n      </div>\n    `;\n  }\n\n  private _cancelScript(ev: Event) {\n    ev.stopPropagation();\n    this._callService(\"turn_off\");\n  }\n\n  private _runScript(ev: Event) {\n    ev.stopPropagation();\n    this._callService(\"turn_on\");\n  }\n\n  private _callService(service: string): void {\n    this.hass.callService(\"script\", service, {\n      entity_id: this.stateObj.entity_id,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return haStyle;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport \"../components/ha-select\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport { computeStateName } from \"../common/entity/compute_state_name\";\nimport \"../components/entity/state-badge\";\nimport { UNAVAILABLE } from \"../data/entity\";\nimport { SelectEntity, setSelectOption } from \"../data/select\";\nimport type { HomeAssistant } from \"../types\";\n\n@customElement(\"state-card-select\")\nclass StateCardSelect extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public stateObj!: SelectEntity;\n\n  protected render(): TemplateResult {\n    return html`\n      <state-badge .stateObj=${this.stateObj}></state-badge>\n      <ha-select\n        .value=${this.stateObj.state}\n        .label=${computeStateName(this.stateObj)}\n        .disabled=${this.stateObj.state === UNAVAILABLE}\n        naturalMenuWidth\n        fixedMenuPosition\n        @selected=${this._selectedOptionChanged}\n        @closed=${stopPropagation}\n      >\n        ${this.stateObj.attributes.options.map(\n          (option) =>\n            html`\n              <mwc-list-item .value=${option}>\n                ${(this.stateObj.attributes.device_class &&\n                  this.hass.localize(\n                    `component.select.state.${this.stateObj.attributes.device_class}.${option}`\n                  )) ||\n                this.hass.localize(`component.select.state._.${option}`) ||\n                option}\n              </mwc-list-item>\n            `\n        )}\n      </ha-select>\n    `;\n  }\n\n  private _selectedOptionChanged(ev) {\n    const option = ev.target.value;\n    if (option === this.stateObj.state) {\n      return;\n    }\n    setSelectOption(this.hass, this.stateObj.entity_id, option);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n      }\n\n      state-badge {\n        float: left;\n        margin-top: 10px;\n      }\n\n      ha-select {\n        width: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"state-card-select\": StateCardSelect;\n  }\n}\n","import \"@polymer/iron-flex-layout/iron-flex-layout-classes\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport \"../components/entity/state-info\";\nimport { computeDisplayTimer, timerTimeRemaining } from \"../data/timer\";\n\nclass StateCardTimer extends PolymerElement {\n  static get template() {\n    return html`\n      <style include=\"iron-flex iron-flex-alignment\"></style>\n      <style>\n        .state {\n          @apply --paper-font-body1;\n          color: var(--primary-text-color);\n\n          margin-left: 16px;\n          text-align: right;\n          line-height: 40px;\n          white-space: nowrap;\n        }\n      </style>\n\n      <div class=\"horizontal justified layout\">\n        ${this.stateInfoTemplate}\n        <div class=\"state\">[[_displayState(timeRemaining, stateObj)]]</div>\n      </div>\n    `;\n  }\n\n  static get stateInfoTemplate() {\n    return html`\n      <state-info\n        hass=\"[[hass]]\"\n        state-obj=\"[[stateObj]]\"\n        in-dialog=\"[[inDialog]]\"\n      ></state-info>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      stateObj: {\n        type: Object,\n        observer: \"stateObjChanged\",\n      },\n      timeRemaining: Number,\n      inDialog: {\n        type: Boolean,\n        value: false,\n      },\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.startInterval(this.stateObj);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.clearInterval();\n  }\n\n  stateObjChanged(stateObj) {\n    this.startInterval(stateObj);\n  }\n\n  clearInterval() {\n    if (this._updateRemaining) {\n      clearInterval(this._updateRemaining);\n      this._updateRemaining = null;\n    }\n  }\n\n  startInterval(stateObj) {\n    this.clearInterval();\n    this.calculateRemaining(stateObj);\n\n    if (stateObj.state === \"active\") {\n      this._updateRemaining = setInterval(\n        () => this.calculateRemaining(this.stateObj),\n        1000\n      );\n    }\n  }\n\n  calculateRemaining(stateObj) {\n    this.timeRemaining = timerTimeRemaining(stateObj);\n  }\n\n  _displayState(timeRemaining, stateObj) {\n    return computeDisplayTimer(this.hass, stateObj, timeRemaining);\n  }\n}\ncustomElements.define(\"state-card-timer\", StateCardTimer);\n","import \"@polymer/iron-flex-layout/iron-flex-layout-classes\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport \"../components/entity/ha-entity-toggle\";\nimport \"../components/entity/state-info\";\n\nclass StateCardToggle extends PolymerElement {\n  static get template() {\n    return html`\n      <style include=\"iron-flex iron-flex-alignment\"></style>\n      <style>\n        ha-entity-toggle {\n          margin: -4px -16px -4px 0;\n          padding: 4px 16px;\n        }\n      </style>\n\n      <div class=\"horizontal justified layout\">\n        ${this.stateInfoTemplate}\n        <ha-entity-toggle\n          state-obj=\"[[stateObj]]\"\n          hass=\"[[hass]]\"\n        ></ha-entity-toggle>\n      </div>\n    `;\n  }\n\n  static get stateInfoTemplate() {\n    return html`\n      <state-info\n        hass=\"[[hass]]\"\n        state-obj=\"[[stateObj]]\"\n        in-dialog=\"[[inDialog]]\"\n      ></state-info>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      stateObj: Object,\n      inDialog: {\n        type: Boolean,\n        value: false,\n      },\n    };\n  }\n}\ncustomElements.define(\"state-card-toggle\", StateCardToggle);\n","import \"@polymer/iron-flex-layout/iron-flex-layout-classes\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport \"../components/entity/state-info\";\nimport \"../components/ha-vacuum-state\";\n\nclass StateCardVacuum extends PolymerElement {\n  static get template() {\n    return html`\n      <style include=\"iron-flex iron-flex-alignment\"></style>\n\n      <div class=\"horizontal justified layout\">\n        ${this.stateInfoTemplate}\n        <ha-vacuum-state\n          hass=\"[[hass]]\"\n          state-obj=\"[[stateObj]]\"\n        ></ha-vacuum-state>\n      </div>\n    `;\n  }\n\n  static get stateInfoTemplate() {\n    return html`\n      <state-info\n        hass=\"[[hass]]\"\n        state-obj=\"[[stateObj]]\"\n        in-dialog=\"[[inDialog]]\"\n      ></state-info>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      stateObj: Object,\n      inDialog: {\n        type: Boolean,\n        value: false,\n      },\n    };\n  }\n}\ncustomElements.define(\"state-card-vacuum\", StateCardVacuum);\n","import \"@polymer/iron-flex-layout/iron-flex-layout-classes\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport \"../components/entity/state-info\";\nimport \"../components/ha-water_heater-state\";\n\nclass StateCardWaterHeater extends PolymerElement {\n  static get template() {\n    return html`\n      <style include=\"iron-flex iron-flex-alignment\"></style>\n      <style>\n        :host {\n          @apply --paper-font-body1;\n          line-height: 1.5;\n        }\n\n        ha-water_heater-state {\n          margin-left: 16px;\n          text-align: right;\n        }\n      </style>\n\n      <div class=\"horizontal justified layout\">\n        ${this.stateInfoTemplate}\n        <ha-water_heater-state\n          hass=\"[[hass]]\"\n          state-obj=\"[[stateObj]]\"\n        ></ha-water_heater-state>\n      </div>\n    `;\n  }\n\n  static get stateInfoTemplate() {\n    return html`\n      <state-info\n        hass=\"[[hass]]\"\n        state-obj=\"[[stateObj]]\"\n        in-dialog=\"[[inDialog]]\"\n      ></state-info>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      stateObj: Object,\n      inDialog: {\n        type: Boolean,\n        value: false,\n      },\n    };\n  }\n}\ncustomElements.define(\"state-card-water_heater\", StateCardWaterHeater);\n"],"names":[],"sourceRoot":""}