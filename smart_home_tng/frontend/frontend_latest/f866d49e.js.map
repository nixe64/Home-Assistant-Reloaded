{"version":3,"file":"f866d49e.js","mappings":";;;;;;;;AAuBA;;ACFA;AACA;AACA;AACA;;;;AAIA;;AAIA;;;;;AAUA;;AAdA;AApBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AC+BA;;AAIA;;;AAGA;AAEA;;AAGA;;AAEA;;;;AAKA;;;AAIA;;AAGA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7DA;ACOA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;;ACDA;AACA;;;AAgCA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAEA;;AAEA;AAGA;;AAEA;;AAxDA;;;;;;;;;;AAAA;;;;AC+BA;;AAEA;;;;AAsBA;;AAEA;AAqCA;AAIA;;;;AAkBA;;AAEA;;;;AAsBA;;AAEA;ACvJA;AACA;AALA;;;ACoFA;AACA;;AAEA;;;;;;;AAOA;;;;;;AAQA;AACA;;AAEA;;AAEA;;;AAIA;;AAIA;;AAEA;;;AAIA;;AAGA;AACA;;AAEA;;AAGA;;;;AAOA;;;;AAKA;;AAIA;AACA;;AAEA;;AAIA;AACA;;AAEA;;AAIA;AACA;;AAEA;;;AAIA;AACA;;;;;;AA9IA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;ACtBA;;AAGA;AACA;;AAEA;AAEA;;AAGA;AACA;;AAEA;AArBA;;AC4BA;;AAEA;AACA;;;;;AAOA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AAlCA;ACcA;AAEA;AAMA;AAEA;;;AAKA;AACA;;;AAGA;AAIA;AACA;;AAEA;AAIA;AACA;;;AAGA;AACA;;AAhDA;;;;;;;;;;;;;;AAAA;;;ACeA;;AAEA;AACA;;;;AAIA;AACA;AACA;;;;;;AAfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAlBA;AC4RA;;AAGA;AAGA;AAIA;AAGA;;;AAKA;;;AAKA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;;AAGA;AAGA;;;AAGA;AACA;;;AAGA;AAMA;AACA;;;AAIA;AAIA;AAMA;AACA;;;;AAKA;AAEA;;AAQA;AAGA;;;AAGA;AACA;;AAEA;AAEA;;;AAIA;AAEA;;AAQA;AAGA;;;AAGA;AACA;;AAEA;AAEA;;;AAIA;AAEA;;AAGA;AAGA;;;AAGA;AACA;;AAEA;AAEA;;;;AAKA;AAGA;;;AAGA;AACA;;AAEA;AAEA;;;;AAKA;AAGA;;;AAGA;AACA;;AAEA;AAEA;;;;AAKA;AAGA;;;AAGA;AACA;;AAEA;AAEA;;;;AAKA;AAGA;;;AAGA;AACA;;AAEA;AAEA;;;AAIA;AAEA;AAEA;;;AAKA;AACA;;;;AAIA;;AAGA;;;;AAMA;;AAEA;;;AAKA;AAKA;AACA;;;AAIA;AAEA;;;AAIA;AACA;;AAEA;;;AAUA;;;AAIA;AACA;AAGA;AACA;AACA;;AAEA;AAEA;AACA;AACA;;AAGA;;;AAIA;;;AAKA;;;AAKA;AACA;;;;;;AAMA;;;AAKA;;;AAKA;;;AAKA;AACA;;AAEA;AAKA;AACA;;;;;AAMA;;AAGA;;;;AAMA;;;AAKA;;;;AAcA;;;;;AAOA;AACA;AAMA;;;;AAIA;;;;;AAOA;AACA;AAKA;;;;AAIA;;;;;AAOA;AACA;AAKA;;;;;AAKA;;AAGA;;AAIA;;AAIA;;AAIA;AAEA;;AAGA;;;AAKA;AACA;AACA;AACA;AAGA;;;AAGA;AAGA;AAEA;AACA;;AAIA;;AAGA;;;;;;AAOA;AACA;;AAGA;;;AAGA;AACA;;AAEA;;;AAvoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACrGA;AAMA;;;AAGA;;;AAOA;AAKA;AAJA;;;;AApCA;;ACwFA;AAKA;;AAEA;AAEA;;;AAGA;AACA;;AAEA;;AAxBA;;AAEA;;;;AAyEA;AACA;AAGA;;AAEA;;AAOA;;AAEA;;AAGA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;;;;AAMA;AAGA;AAOA;;;;AAIA;;;;AAOA;AACA;;;AAGA;AACA;;;;AAQA;;;;AA6GA;AAKA;AAeA;AA0BA;AAKA;AAYA;AACA;AAMA;;AAqBA;AACA;;AAEA;AATA;AAwCA;AAKA;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA/bA;AC6CA;AAMA;;;;AAKA;;;AAMA;AAEA;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAvCA;;;;;;;;;;;;;;;;;;;;;AApDA","sources":["webpack://home-assistant-frontend/./src/components/buttons/ha-call-service-button.js","webpack://home-assistant-frontend/./src/components/buttons/ha-progress-button.ts","webpack://home-assistant-frontend/./src/components/ha-attributes.ts","webpack://home-assistant-frontend/./src/components/ha-circular-progress.ts","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-icon-picker.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/show-dialog-options-flow.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/controls/more-info-default.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/ha-more-info-dialog.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/ha-more-info-history-and-logbook.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/ha-more-info-history.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/ha-more-info-info.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/ha-more-info-logbook.ts","webpack://home-assistant-frontend/./src/panels/config/entities/entity-registry-settings.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/ha-more-info-settings.ts","webpack://home-assistant-frontend/./src/panels/logbook/ha-logbook-renderer.ts","webpack://home-assistant-frontend/./src/panels/logbook/ha-logbook.ts"],"sourcesContent":["import { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport { showConfirmationDialog } from \"../../dialogs/generic/show-dialog-box\";\nimport { EventsMixin } from \"../../mixins/events-mixin\";\nimport \"./ha-progress-button\";\n\n/*\n * @appliesMixin EventsMixin\n */\nclass HaCallServiceButton extends EventsMixin(PolymerElement) {\n  static get template() {\n    return html`\n      <ha-progress-button\n        id=\"progress\"\n        progress=\"[[progress]]\"\n        on-click=\"buttonTapped\"\n        tabindex=\"0\"\n        ><slot></slot\n      ></ha-progress-button>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: {\n        type: Object,\n      },\n\n      progress: {\n        type: Boolean,\n        value: false,\n      },\n\n      domain: {\n        type: String,\n      },\n\n      service: {\n        type: String,\n      },\n\n      serviceData: {\n        type: Object,\n        value: {},\n      },\n\n      confirmation: {\n        type: String,\n      },\n    };\n  }\n\n  callService() {\n    this.progress = true;\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const el = this;\n    const eventData = {\n      domain: this.domain,\n      service: this.service,\n      serviceData: this.serviceData,\n    };\n\n    this.hass\n      .callService(this.domain, this.service, this.serviceData)\n      .then(\n        () => {\n          el.progress = false;\n          el.$.progress.actionSuccess();\n          eventData.success = true;\n        },\n        () => {\n          el.progress = false;\n          el.$.progress.actionError();\n          eventData.success = false;\n        }\n      )\n      .then(() => {\n        el.fire(\"hass-service-called\", eventData);\n      });\n  }\n\n  buttonTapped() {\n    if (this.confirmation) {\n      showConfirmationDialog(this, {\n        text: this.confirmation,\n        confirm: () => this.callService(),\n      });\n    } else {\n      this.callService();\n    }\n  }\n}\n\ncustomElements.define(\"ha-call-service-button\", HaCallServiceButton);\n","import \"@material/mwc-button\";\nimport { mdiAlertOctagram, mdiCheckBold } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../ha-circular-progress\";\nimport \"../ha-svg-icon\";\n\n@customElement(\"ha-progress-button\")\nexport class HaProgressButton extends LitElement {\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public progress = false;\n\n  @property({ type: Boolean }) public raised = false;\n\n  @state() private _result?: \"success\" | \"error\";\n\n  public render(): TemplateResult {\n    const overlay = this._result || this.progress;\n    return html`\n      <mwc-button\n        ?raised=${this.raised}\n        .disabled=${this.disabled || this.progress}\n        @click=${this._buttonTapped}\n        class=${this._result || \"\"}\n      >\n        <slot></slot>\n      </mwc-button>\n      ${!overlay\n        ? \"\"\n        : html`\n            <div class=\"progress\">\n              ${this._result === \"success\"\n                ? html`<ha-svg-icon .path=${mdiCheckBold}></ha-svg-icon>`\n                : this._result === \"error\"\n                ? html`<ha-svg-icon .path=${mdiAlertOctagram}></ha-svg-icon>`\n                : this.progress\n                ? html`\n                    <ha-circular-progress\n                      size=\"small\"\n                      active\n                    ></ha-circular-progress>\n                  `\n                : \"\"}\n            </div>\n          `}\n    `;\n  }\n\n  public actionSuccess(): void {\n    this._setResult(\"success\");\n  }\n\n  public actionError(): void {\n    this._setResult(\"error\");\n  }\n\n  private _setResult(result: \"success\" | \"error\"): void {\n    this._result = result;\n    setTimeout(() => {\n      this._result = undefined;\n    }, 2000);\n  }\n\n  private _buttonTapped(ev: Event): void {\n    if (this.progress) {\n      ev.stopPropagation();\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        outline: none;\n        display: inline-block;\n        position: relative;\n      }\n\n      mwc-button {\n        transition: all 1s;\n      }\n\n      mwc-button.success {\n        --mdc-theme-primary: white;\n        background-color: var(--success-color);\n        transition: none;\n        border-radius: 4px;\n        pointer-events: none;\n      }\n\n      mwc-button[raised].success {\n        --mdc-theme-primary: var(--success-color);\n        --mdc-theme-on-primary: white;\n      }\n\n      mwc-button.error {\n        --mdc-theme-primary: white;\n        background-color: var(--error-color);\n        transition: none;\n        border-radius: 4px;\n        pointer-events: none;\n      }\n\n      mwc-button[raised].error {\n        --mdc-theme-primary: var(--error-color);\n        --mdc-theme-on-primary: white;\n      }\n\n      .progress {\n        bottom: 4px;\n        position: absolute;\n        text-align: center;\n        top: 4px;\n        width: 100%;\n      }\n\n      ha-svg-icon {\n        color: white;\n      }\n\n      mwc-button.success slot,\n      mwc-button.error slot {\n        visibility: hidden;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-progress-button\": HaProgressButton;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport {\n  formatAttributeName,\n  formatAttributeValue,\n  STATE_ATTRIBUTES,\n} from \"../data/entity_attributes\";\nimport { haStyle } from \"../resources/styles\";\nimport { HomeAssistant } from \"../types\";\n\nimport \"./ha-expansion-panel\";\n\n@customElement(\"ha-attributes\")\nclass HaAttributes extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public stateObj?: HassEntity;\n\n  @property({ attribute: \"extra-filters\" }) public extraFilters?: string;\n\n  @state() private _expanded = false;\n\n  protected render(): TemplateResult {\n    if (!this.stateObj) {\n      return html``;\n    }\n\n    const attributes = this.computeDisplayAttributes(\n      STATE_ATTRIBUTES.concat(\n        this.extraFilters ? this.extraFilters.split(\",\") : []\n      )\n    );\n    if (attributes.length === 0) {\n      return html``;\n    }\n\n    return html`\n      <ha-expansion-panel\n        .header=${this.hass.localize(\n          \"ui.components.attributes.expansion_header\"\n        )}\n        outlined\n        @expanded-will-change=${this.expandedChanged}\n      >\n        <div class=\"attribute-container\">\n          ${this._expanded\n            ? html`\n                ${attributes.map(\n                  (attribute) => html`\n                    <div class=\"data-entry\">\n                      <div class=\"key\">${formatAttributeName(attribute)}</div>\n                      <div class=\"value\">\n                        ${this.formatAttribute(attribute)}\n                      </div>\n                    </div>\n                  `\n                )}\n              `\n            : \"\"}\n        </div>\n      </ha-expansion-panel>\n      ${this.stateObj.attributes.attribution\n        ? html`\n            <div class=\"attribution\">\n              ${this.stateObj.attributes.attribution}\n            </div>\n          `\n        : \"\"}\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .attribute-container {\n          margin-bottom: 8px;\n          direction: ltr;\n        }\n        .data-entry {\n          display: flex;\n          flex-direction: row;\n          justify-content: space-between;\n        }\n        .data-entry .value {\n          max-width: 60%;\n          overflow-wrap: break-word;\n          text-align: right;\n        }\n        .key {\n          flex-grow: 1;\n        }\n        .attribution {\n          color: var(--secondary-text-color);\n          text-align: center;\n          margin-top: 16px;\n        }\n        pre {\n          font-family: inherit;\n          font-size: inherit;\n          margin: 0px;\n          overflow-wrap: break-word;\n          white-space: pre-line;\n        }\n        hr {\n          border-color: var(--divider-color);\n          border-bottom: none;\n          margin: 16px 0;\n        }\n      `,\n    ];\n  }\n\n  private computeDisplayAttributes(filtersArray: string[]): string[] {\n    if (!this.stateObj) {\n      return [];\n    }\n    return Object.keys(this.stateObj.attributes).filter(\n      (key) => filtersArray.indexOf(key) === -1\n    );\n  }\n\n  private formatAttribute(attribute: string): string | TemplateResult {\n    if (!this.stateObj) {\n      return \"—\";\n    }\n    const value = this.stateObj.attributes[attribute];\n    return formatAttributeValue(this.hass, value);\n  }\n\n  private expandedChanged(ev) {\n    this._expanded = ev.detail.expanded;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-attributes\": HaAttributes;\n  }\n}\n","import { CircularProgress } from \"@material/mwc-circular-progress\";\nimport { CSSResultGroup, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-circular-progress\")\n// @ts-ignore\nexport class HaCircularProgress extends CircularProgress {\n  @property({ type: Boolean })\n  public active = false;\n\n  @property()\n  public alt = \"Loading\";\n\n  @property()\n  public size: \"tiny\" | \"small\" | \"medium\" | \"large\" = \"medium\";\n\n  // @ts-ignore\n  public set density(_) {\n    // just a dummy\n  }\n\n  public get density() {\n    switch (this.size) {\n      case \"tiny\":\n        return -8;\n      case \"small\":\n        return -5;\n      case \"medium\":\n        return 0;\n      case \"large\":\n        return 5;\n      default:\n        return 0;\n    }\n  }\n\n  // @ts-ignore\n  public set indeterminate(_) {\n    // just a dummy\n  }\n\n  public get indeterminate() {\n    return this.active;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      super.styles,\n      css`\n        :host {\n          overflow: hidden;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-circular-progress\": HaCircularProgress;\n  }\n}\n","import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { ComboBoxLitRenderer } from \"@vaadin/combo-box/lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { customIcons } from \"../data/custom_icons\";\nimport { PolymerChangedEvent } from \"../polymer-types\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-combo-box\";\nimport type { HaComboBox } from \"./ha-combo-box\";\nimport \"./ha-icon\";\n\ntype IconItem = {\n  icon: string;\n  keywords: string[];\n};\nlet iconItems: IconItem[] = [{ icon: \"\", keywords: [] }];\nlet iconLoaded = false;\n\n// eslint-disable-next-line lit/prefer-static-styles\nconst rowRenderer: ComboBoxLitRenderer<IconItem> = (item) => html`<mwc-list-item\n  graphic=\"avatar\"\n>\n  <ha-icon .icon=${item.icon} slot=\"graphic\"></ha-icon>\n  ${item.icon}\n</mwc-list-item>`;\n\n@customElement(\"ha-icon-picker\")\nexport class HaIconPicker extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property() public placeholder?: string;\n\n  @property() public fallbackPath?: string;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property({ type: Boolean }) public invalid = false;\n\n  @state() private _opened = false;\n\n  @query(\"ha-combo-box\", true) private comboBox!: HaComboBox;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        item-value-path=\"icon\"\n        item-label-path=\"icon\"\n        .value=${this._value}\n        allow-custom-value\n        .filteredItems=${iconItems}\n        .label=${this.label}\n        .helper=${this.helper}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        .placeholder=${this.placeholder}\n        .errorMessage=${this.errorMessage}\n        .invalid=${this.invalid}\n        .renderer=${rowRenderer}\n        icon\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n        @filter-changed=${this._filterChanged}\n      >\n        ${this._value || this.placeholder\n          ? html`\n              <ha-icon .icon=${this._value || this.placeholder} slot=\"icon\">\n              </ha-icon>\n            `\n          : this.fallbackPath\n          ? html`<ha-svg-icon\n              .path=${this.fallbackPath}\n              slot=\"icon\"\n            ></ha-svg-icon>`\n          : \"\"}\n      </ha-combo-box>\n    `;\n  }\n\n  private async _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n    if (this._opened && !iconLoaded) {\n      const iconList = await import(\"../../build/mdi/iconList.json\");\n\n      iconItems = iconList.default.map((icon) => ({\n        icon: `mdi:${icon.name}`,\n        keywords: icon.keywords,\n      }));\n      iconLoaded = true;\n\n      this.comboBox.filteredItems = iconItems;\n\n      Object.keys(customIcons).forEach((iconSet) => {\n        this._loadCustomIconItems(iconSet);\n      });\n    }\n  }\n\n  private async _loadCustomIconItems(iconsetPrefix: string) {\n    try {\n      const getIconList = customIcons[iconsetPrefix].getIconList;\n      if (typeof getIconList !== \"function\") {\n        return;\n      }\n      const iconList = await getIconList();\n      const customIconItems = iconList.map((icon) => ({\n        icon: `${iconsetPrefix}:${icon.name}`,\n        keywords: icon.keywords ?? [],\n      }));\n      iconItems.push(...customIconItems);\n      this.comboBox.filteredItems = iconItems;\n    } catch (e) {\n      // eslint-disable-next-line\n      console.warn(`Unable to load icon list for ${iconsetPrefix} iconset`);\n    }\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues) {\n    return !this._opened || changedProps.has(\"_opened\");\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    this._setValue(ev.detail.value);\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    fireEvent(\n      this,\n      \"value-changed\",\n      { value: this._value },\n      {\n        bubbles: false,\n        composed: false,\n      }\n    );\n  }\n\n  private _filterChanged(ev: CustomEvent): void {\n    const filterString = ev.detail.value.toLowerCase();\n    const characterCount = filterString.length;\n    if (characterCount >= 2) {\n      const filteredItems: IconItem[] = [];\n      const filteredItemsByKeywords: IconItem[] = [];\n\n      iconItems.forEach((item) => {\n        if (item.icon.includes(filterString)) {\n          filteredItems.push(item);\n          return;\n        }\n        if (item.keywords.some((t) => t.includes(filterString))) {\n          filteredItemsByKeywords.push(item);\n        }\n      });\n\n      filteredItems.push(...filteredItemsByKeywords);\n\n      if (filteredItems.length > 0) {\n        this.comboBox.filteredItems = filteredItems;\n      } else {\n        this.comboBox.filteredItems = [{ icon: filterString, keywords: [] }];\n      }\n    } else {\n      this.comboBox.filteredItems = iconItems;\n    }\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  static get styles() {\n    return css`\n      ha-icon,\n      ha-svg-icon {\n        color: var(--primary-text-color);\n        position: relative;\n        bottom: 2px;\n      }\n      *[slot=\"prefix\"] {\n        margin-right: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-picker\": HaIconPicker;\n  }\n}\n","import { html } from \"lit\";\nimport { ConfigEntry } from \"../../data/config_entries\";\nimport { domainToName, IntegrationManifest } from \"../../data/integration\";\nimport {\n  createOptionsFlow,\n  deleteOptionsFlow,\n  fetchOptionsFlow,\n  handleOptionsFlowStep,\n} from \"../../data/options_flow\";\nimport {\n  loadDataEntryFlowDialog,\n  showFlowDialog,\n} from \"./show-dialog-data-entry-flow\";\n\nexport const loadOptionsFlowDialog = loadDataEntryFlowDialog;\n\nexport const showOptionsFlowDialog = (\n  element: HTMLElement,\n  configEntry: ConfigEntry,\n  manifest?: IntegrationManifest | null\n): void =>\n  showFlowDialog(\n    element,\n    {\n      startFlowHandler: configEntry.entry_id,\n      domain: configEntry.domain,\n      manifest,\n    },\n    {\n      loadDevicesAndAreas: false,\n      createFlow: async (hass, handler) => {\n        const [step] = await Promise.all([\n          createOptionsFlow(hass, handler),\n          hass.loadBackendTranslation(\"options\", configEntry.domain),\n        ]);\n        return step;\n      },\n      fetchFlow: async (hass, flowId) => {\n        const [step] = await Promise.all([\n          fetchOptionsFlow(hass, flowId),\n          hass.loadBackendTranslation(\"options\", configEntry.domain),\n        ]);\n        return step;\n      },\n      handleFlowStep: handleOptionsFlowStep,\n      deleteFlow: deleteOptionsFlow,\n\n      renderAbortDescription(hass, step) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.abort.${step.reason}`,\n          step.description_placeholders\n        );\n\n        return description\n          ? html`\n              <ha-markdown\n                breaks\n                allowsvg\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderShowFormStepHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.title`\n          ) || hass.localize(`ui.dialogs.options_flow.form.header`)\n        );\n      },\n\n      renderShowFormStepDescription(hass, step) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.description`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderShowFormStepFieldLabel(hass, step, field) {\n        return hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.data.${field.name}`\n        );\n      },\n\n      renderShowFormStepFieldHelper(hass, step, field) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.data_description.${field.name}`,\n          step.description_placeholders\n        );\n        return description\n          ? html`<ha-markdown breaks .content=${description}></ha-markdown>`\n          : \"\";\n      },\n\n      renderShowFormStepFieldError(hass, step, error) {\n        return hass.localize(\n          `component.${configEntry.domain}.options.error.${error}`,\n          step.description_placeholders\n        );\n      },\n\n      renderExternalStepHeader(_hass, _step) {\n        return \"\";\n      },\n\n      renderExternalStepDescription(_hass, _step) {\n        return \"\";\n      },\n\n      renderCreateEntryDescription(hass, _step) {\n        return html`\n          <p>${hass.localize(`ui.dialogs.options_flow.success.description`)}</p>\n        `;\n      },\n\n      renderShowFormProgressHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.title`\n          ) || hass.localize(`component.${configEntry.domain}.title`)\n        );\n      },\n\n      renderShowFormProgressDescription(hass, step) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.progress.${step.progress_action}`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderMenuHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.title`\n          ) || hass.localize(`component.${configEntry.domain}.title`)\n        );\n      },\n\n      renderMenuDescription(hass, step) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.description`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderMenuOption(hass, step, option) {\n        return hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.menu_options.${option}`,\n          step.description_placeholders\n        );\n      },\n\n      renderLoadingDescription(hass, reason) {\n        return (\n          hass.localize(`component.${configEntry.domain}.options.loading`) ||\n          hass.localize(`ui.dialogs.options_flow.loading.${reason}`, {\n            integration: domainToName(hass.localize, configEntry.domain),\n          })\n        );\n      },\n    }\n  );\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../../components/ha-attributes\";\nimport { HomeAssistant } from \"../../../types\";\n\n@customElement(\"more-info-default\")\nclass MoreInfoDefault extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public stateObj?: HassEntity;\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.stateObj) {\n      return html``;\n    }\n\n    return html`<ha-attributes\n      .hass=${this.hass}\n      .stateObj=${this.stateObj}\n    ></ha-attributes>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"more-info-default\": MoreInfoDefault;\n  }\n}\n","import type { HassEntity } from \"home-assistant-js-websocket\";\nimport \"@material/mwc-button\";\nimport \"@material/mwc-tab\";\nimport \"@material/mwc-tab-bar\";\nimport { mdiClose, mdiPencil } from \"@mdi/js\";\nimport { css, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { cache } from \"lit/directives/cache\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport { navigate } from \"../../common/navigate\";\nimport \"../../components/ha-dialog\";\nimport \"../../components/ha-header-bar\";\nimport \"../../components/ha-icon-button\";\nimport \"../../components/ha-related-items\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport \"../../state-summary/state-card-content\";\nimport { HomeAssistant } from \"../../types\";\nimport {\n  EDITABLE_DOMAINS_WITH_ID,\n  EDITABLE_DOMAINS,\n  DOMAINS_WITH_MORE_INFO,\n  computeShowHistoryComponent,\n  computeShowLogBookComponent,\n} from \"./const\";\nimport \"./controls/more-info-default\";\nimport \"./ha-more-info-info\";\nimport \"./ha-more-info-settings\";\nimport \"./ha-more-info-history-and-logbook\";\nimport \"./more-info-content\";\n\nexport interface MoreInfoDialogParams {\n  entityId: string | null;\n  tab?: Tab;\n}\n\ntype Tab = \"info\" | \"history\" | \"settings\" | \"related\";\n\n@customElement(\"ha-more-info-dialog\")\nexport class MoreInfoDialog extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public large = false;\n\n  @state() private _entityId?: string | null;\n\n  @state() private _currTab: Tab = \"info\";\n\n  public showDialog(params: MoreInfoDialogParams) {\n    this._entityId = params.entityId;\n    if (!this._entityId) {\n      this.closeDialog();\n      return;\n    }\n    this._currTab = params.tab || \"info\";\n    this.large = false;\n  }\n\n  public closeDialog() {\n    this._entityId = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected shouldShowEditIcon(\n    domain: string,\n    stateObj: HassEntity | undefined\n  ): boolean {\n    if (__DEMO__ || !stateObj) {\n      return false;\n    }\n    if (EDITABLE_DOMAINS_WITH_ID.includes(domain) && stateObj.attributes.id) {\n      return true;\n    }\n    if (EDITABLE_DOMAINS.includes(domain)) {\n      return true;\n    }\n    if (domain === \"person\" && stateObj.attributes.editable !== \"false\") {\n      return true;\n    }\n\n    return false;\n  }\n\n  protected render() {\n    if (!this._entityId) {\n      return html``;\n    }\n    const entityId = this._entityId;\n    const stateObj = this.hass.states[entityId];\n\n    const domain = computeDomain(entityId);\n    const name = (stateObj && computeStateName(stateObj)) || entityId;\n    const tabs = this._getTabs(entityId, this.hass.user!.is_admin);\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${name}\n        hideActions\n        data-domain=${domain}\n      >\n        <div slot=\"heading\" class=\"heading\">\n          <ha-header-bar>\n            <ha-icon-button\n              slot=\"navigationIcon\"\n              dialogAction=\"cancel\"\n              .label=${this.hass.localize(\n                \"ui.dialogs.more_info_control.dismiss\"\n              )}\n              .path=${mdiClose}\n            ></ha-icon-button>\n            <div\n              slot=\"title\"\n              class=\"main-title\"\n              .title=${name}\n              @click=${this._enlarge}\n            >\n              ${name}\n            </div>\n            ${this.shouldShowEditIcon(domain, stateObj)\n              ? html`\n                  <ha-icon-button\n                    slot=\"actionItems\"\n                    .label=${this.hass.localize(\n                      \"ui.dialogs.more_info_control.edit\"\n                    )}\n                    .path=${mdiPencil}\n                    @click=${this._gotoEdit}\n                  ></ha-icon-button>\n                `\n              : \"\"}\n          </ha-header-bar>\n\n          ${tabs.length > 1\n            ? html`\n                <mwc-tab-bar\n                  .activeIndex=${tabs.indexOf(this._currTab)}\n                  @MDCTabBar:activated=${this._handleTabChanged}\n                >\n                  ${tabs.map(\n                    (tab) => html`\n                      <mwc-tab\n                        .label=${this.hass.localize(\n                          `ui.dialogs.more_info_control.${tab}`\n                        )}\n                      ></mwc-tab>\n                    `\n                  )}\n                </mwc-tab-bar>\n              `\n            : \"\"}\n        </div>\n\n        <div class=\"content\" tabindex=\"-1\" dialogInitialFocus>\n          ${cache(\n            this._currTab === \"info\"\n              ? html`\n                  <ha-more-info-info\n                    .hass=${this.hass}\n                    .entityId=${this._entityId}\n                  ></ha-more-info-info>\n                `\n              : this._currTab === \"history\"\n              ? html`\n                  <ha-more-info-history-and-logbook\n                    .hass=${this.hass}\n                    .entityId=${this._entityId}\n                  ></ha-more-info-history-and-logbook>\n                `\n              : this._currTab === \"settings\"\n              ? html`\n                  <ha-more-info-settings\n                    .hass=${this.hass}\n                    .entityId=${this._entityId}\n                  ></ha-more-info-settings>\n                `\n              : html`\n                  <ha-related-items\n                    class=\"content\"\n                    .hass=${this.hass}\n                    .itemId=${entityId}\n                    itemType=\"entity\"\n                  ></ha-related-items>\n                `\n          )}\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this.addEventListener(\"close-dialog\", () => this.closeDialog());\n  }\n\n  protected willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n    if (!this._entityId) {\n      return;\n    }\n    const tabs = this._getTabs(this._entityId, this.hass.user!.is_admin);\n    if (!tabs.includes(this._currTab)) {\n      this._currTab = tabs[0];\n    }\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (changedProps.has(\"_currTab\")) {\n      this.setAttribute(\"tab\", this._currTab);\n    }\n  }\n\n  private _getTabs(entityId: string, isAdmin: boolean): Tab[] {\n    const domain = computeDomain(entityId);\n    const tabs: Tab[] = [\"info\"];\n\n    // Info and history are combined in info when there are no\n    // dedicated more-info controls. If not combined, add a history tab.\n    if (\n      DOMAINS_WITH_MORE_INFO.includes(domain) &&\n      (computeShowHistoryComponent(this.hass, entityId) ||\n        computeShowLogBookComponent(this.hass, entityId))\n    ) {\n      tabs.push(\"history\");\n    }\n\n    if (isAdmin) {\n      tabs.push(\"settings\");\n      tabs.push(\"related\");\n    }\n\n    return tabs;\n  }\n\n  private _enlarge() {\n    this.large = !this.large;\n  }\n\n  private _gotoEdit() {\n    const stateObj = this.hass.states[this._entityId!];\n    const domain = computeDomain(this._entityId!);\n    let idToPassThroughUrl = stateObj.entity_id;\n    if (EDITABLE_DOMAINS_WITH_ID.includes(domain) || domain === \"person\") {\n      idToPassThroughUrl = stateObj.attributes.id;\n    }\n\n    navigate(`/config/${domain}/edit/${idToPassThroughUrl}`);\n    this.closeDialog();\n  }\n\n  private _handleTabChanged(ev: CustomEvent): void {\n    const newTab = this._getTabs(this._entityId!, this.hass.user!.is_admin)[\n      ev.detail.index\n    ];\n    if (newTab === this._currTab) {\n      return;\n    }\n\n    this._currTab = newTab;\n  }\n\n  static get styles() {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --dialog-surface-position: static;\n          --dialog-content-position: static;\n          --vertial-align-dialog: flex-start;\n        }\n\n        ha-header-bar {\n          --mdc-theme-on-primary: var(--primary-text-color);\n          --mdc-theme-primary: var(--mdc-theme-surface);\n          flex-shrink: 0;\n          display: block;\n        }\n        .content {\n          outline: none;\n        }\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          ha-header-bar {\n            --mdc-theme-primary: var(--app-header-background-color);\n            --mdc-theme-on-primary: var(--app-header-text-color, white);\n            border-bottom: none;\n          }\n        }\n\n        .heading {\n          border-bottom: 1px solid\n            var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n        }\n\n        :host([tab=\"settings\"]) ha-dialog {\n          --dialog-content-padding: 0px;\n        }\n\n        @media all and (min-width: 600px) and (min-height: 501px) {\n          ha-dialog {\n            --mdc-dialog-min-width: 560px;\n            --mdc-dialog-max-width: 560px;\n            --dialog-surface-margin-top: 40px;\n            --mdc-dialog-max-height: calc(100% - 72px);\n          }\n\n          .main-title {\n            overflow: hidden;\n            text-overflow: ellipsis;\n            cursor: default;\n          }\n\n          :host([large]) ha-dialog,\n          ha-dialog[data-domain=\"camera\"] {\n            --mdc-dialog-min-width: 90vw;\n            --mdc-dialog-max-width: 90vw;\n          }\n        }\n\n        ha-dialog[data-domain=\"camera\"] {\n          --dialog-content-padding: 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-more-info-dialog\": MoreInfoDialog;\n  }\n}\n","import { LitElement, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { HomeAssistant } from \"../../types\";\nimport {\n  computeShowHistoryComponent,\n  computeShowLogBookComponent,\n} from \"./const\";\nimport \"./ha-more-info-history\";\nimport \"./ha-more-info-logbook\";\n\n@customElement(\"ha-more-info-history-and-logbook\")\nexport class MoreInfoHistoryAndLogbook extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entityId!: string;\n\n  protected render() {\n    return html`\n      ${computeShowHistoryComponent(this.hass, this.entityId)\n        ? html`\n            <ha-more-info-history\n              .hass=${this.hass}\n              .entityId=${this.entityId}\n            ></ha-more-info-history>\n          `\n        : \"\"}\n      ${computeShowLogBookComponent(this.hass, this.entityId)\n        ? html`\n            <ha-more-info-logbook\n              .hass=${this.hass}\n              .entityId=${this.entityId}\n            ></ha-more-info-logbook>\n          `\n        : \"\"}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-more-info-history-and-logbook\": MoreInfoHistoryAndLogbook;\n  }\n}\n","import { startOfYesterday } from \"date-fns/esm\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { throttle } from \"../../common/util/throttle\";\nimport \"../../components/chart/state-history-charts\";\nimport { getRecentWithCache } from \"../../data/cached-history\";\nimport { HistoryResult } from \"../../data/history\";\nimport { HomeAssistant } from \"../../types\";\n\ndeclare global {\n  interface HASSDomEvents {\n    closed: undefined;\n  }\n}\n\n@customElement(\"ha-more-info-history\")\nexport class MoreInfoHistory extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entityId!: string;\n\n  @state() private _stateHistory?: HistoryResult;\n\n  private _showMoreHref = \"\";\n\n  private _throttleGetStateHistory = throttle(() => {\n    this._getStateHistory();\n  }, 10000);\n\n  protected render(): TemplateResult {\n    if (!this.entityId) {\n      return html``;\n    }\n\n    return html`${isComponentLoaded(this.hass, \"history\")\n      ? html` <div class=\"header\">\n            <div class=\"title\">\n              ${this.hass.localize(\"ui.dialogs.more_info_control.history\")}\n            </div>\n            <a href=${this._showMoreHref} @click=${this._close}\n              >${this.hass.localize(\n                \"ui.dialogs.more_info_control.show_more\"\n              )}</a\n            >\n          </div>\n          <state-history-charts\n            up-to-now\n            .hass=${this.hass}\n            .historyData=${this._stateHistory}\n            .isLoadingData=${!this._stateHistory}\n          ></state-history-charts>`\n      : \"\"}`;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"entityId\")) {\n      this._stateHistory = undefined;\n\n      if (!this.entityId) {\n        return;\n      }\n\n      this._showMoreHref = `/history?entity_id=${\n        this.entityId\n      }&start_date=${startOfYesterday().toISOString()}`;\n\n      this._throttleGetStateHistory();\n      return;\n    }\n\n    if (!this.entityId || !changedProps.has(\"hass\")) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n\n    if (\n      oldHass &&\n      this.hass.states[this.entityId] !== oldHass?.states[this.entityId]\n    ) {\n      // wait for commit of data (we only account for the default setting of 1 sec)\n      setTimeout(this._throttleGetStateHistory, 1000);\n    }\n  }\n\n  private async _getStateHistory(): Promise<void> {\n    if (!isComponentLoaded(this.hass, \"history\")) {\n      return;\n    }\n    this._stateHistory = await getRecentWithCache(\n      this.hass!,\n      this.entityId,\n      {\n        cacheKey: `more_info.${this.entityId}`,\n        hoursToShow: 24,\n      },\n      this.hass!.localize,\n      this.hass!.language\n    );\n  }\n\n  private _close(): void {\n    setTimeout(() => fireEvent(this, \"close-dialog\"), 500);\n  }\n\n  static get styles() {\n    return [\n      css`\n        .header {\n          display: flex;\n          flex-direction: row;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 8px;\n        }\n        .header > a,\n        a:visited {\n          color: var(--primary-color);\n        }\n        .title {\n          font-family: var(--paper-font-title_-_font-family);\n          -webkit-font-smoothing: var(\n            --paper-font-title_-_-webkit-font-smoothing\n          );\n          font-size: var(--paper-font-subhead_-_font-size);\n          font-weight: var(--paper-font-title_-_font-weight);\n          letter-spacing: var(--paper-font-title_-_letter-spacing);\n          line-height: var(--paper-font-title_-_line-height);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-more-info-history\": MoreInfoHistory;\n  }\n}\n","import { LitElement, html, css } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport { subscribeOne } from \"../../common/util/subscribe-one\";\nimport {\n  EntityRegistryEntry,\n  subscribeEntityRegistry,\n} from \"../../data/entity_registry\";\nimport type { HomeAssistant } from \"../../types\";\nimport {\n  computeShowHistoryComponent,\n  computeShowLogBookComponent,\n  DOMAINS_NO_INFO,\n  DOMAINS_WITH_MORE_INFO,\n} from \"./const\";\nimport \"./ha-more-info-history\";\nimport \"./ha-more-info-logbook\";\n\n@customElement(\"ha-more-info-info\")\nexport class MoreInfoInfo extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entityId!: string;\n\n  @state() private _entityEntry?: EntityRegistryEntry;\n\n  protected render() {\n    const entityId = this.entityId;\n    const stateObj = this.hass.states[entityId];\n    const domain = computeDomain(entityId);\n\n    return html`\n      ${stateObj.attributes.restored && this._entityEntry\n        ? html`<ha-alert alert-type=\"warning\">\n            ${this.hass.localize(\n              \"ui.dialogs.more_info_control.restored.no_longer_provided\",\n              {\n                integration: this._entityEntry.platform,\n              }\n            )}\n          </ha-alert>`\n        : \"\"}\n      ${DOMAINS_NO_INFO.includes(domain)\n        ? \"\"\n        : html`\n            <state-card-content\n              in-dialog\n              .stateObj=${stateObj}\n              .hass=${this.hass}\n            ></state-card-content>\n          `}\n      ${DOMAINS_WITH_MORE_INFO.includes(domain) ||\n      !computeShowHistoryComponent(this.hass, entityId)\n        ? \"\"\n        : html`<ha-more-info-history\n            .hass=${this.hass}\n            .entityId=${this.entityId}\n          ></ha-more-info-history>`}\n      ${DOMAINS_WITH_MORE_INFO.includes(domain) ||\n      !computeShowLogBookComponent(this.hass, entityId)\n        ? \"\"\n        : html`<ha-more-info-logbook\n            .hass=${this.hass}\n            .entityId=${this.entityId}\n          ></ha-more-info-logbook>`}\n      <more-info-content\n        .stateObj=${stateObj}\n        .hass=${this.hass}\n      ></more-info-content>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    subscribeOne(this.hass.connection, subscribeEntityRegistry).then(\n      (entries) => {\n        this._entityEntry = entries.find(\n          (entry) => entry.entity_id === this.entityId\n        );\n      }\n    );\n  }\n\n  static get styles() {\n    return css`\n      state-card-content,\n      ha-more-info-history,\n      ha-more-info-logbook:not(:last-child) {\n        display: block;\n        margin-bottom: 16px;\n      }\n\n      ha-alert {\n        display: block;\n        margin: calc(-1 * var(--dialog-content-padding, 24px))\n          calc(-1 * var(--dialog-content-padding, 24px)) 16px\n          calc(-1 * var(--dialog-content-padding, 24px));\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-more-info-info\": MoreInfoInfo;\n  }\n}\n","import { startOfYesterday } from \"date-fns/esm\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../panels/logbook/ha-logbook\";\nimport type { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-more-info-logbook\")\nexport class MoreInfoLogbook extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entityId!: string;\n\n  private _showMoreHref = \"\";\n\n  private _time = { recent: 86400 };\n\n  private _entityIdAsList = memoizeOne((entityId: string) => [entityId]);\n\n  protected render(): TemplateResult {\n    if (!isComponentLoaded(this.hass, \"logbook\") || !this.entityId) {\n      return html``;\n    }\n    const stateObj = this.hass.states[this.entityId];\n\n    if (!stateObj) {\n      return html``;\n    }\n\n    return html`\n      <div class=\"header\">\n        <div class=\"title\">\n          ${this.hass.localize(\"ui.dialogs.more_info_control.logbook\")}\n        </div>\n        <a href=${this._showMoreHref} @click=${this._close}\n          >${this.hass.localize(\"ui.dialogs.more_info_control.show_more\")}</a\n        >\n      </div>\n      <ha-logbook\n        .hass=${this.hass}\n        .time=${this._time}\n        .entityIds=${this._entityIdAsList(this.entityId)}\n        narrow\n        no-icon\n        no-name\n        relative-time\n      ></ha-logbook>\n    `;\n  }\n\n  protected willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n\n    if (changedProps.has(\"entityId\") && this.entityId) {\n      this._showMoreHref = `/logbook?entity_id=${\n        this.entityId\n      }&start_date=${startOfYesterday().toISOString()}`;\n    }\n  }\n\n  private _close(): void {\n    setTimeout(() => fireEvent(this, \"close-dialog\"), 500);\n  }\n\n  static get styles() {\n    return [\n      css`\n        ha-logbook {\n          --logbook-max-height: 250px;\n        }\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          ha-logbook {\n            --logbook-max-height: unset;\n          }\n        }\n        .header {\n          display: flex;\n          flex-direction: row;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 8px;\n        }\n        .header > a,\n        a:visited {\n          color: var(--primary-color);\n        }\n        .title {\n          font-family: var(--paper-font-title_-_font-family);\n          -webkit-font-smoothing: var(\n            --paper-font-title_-_-webkit-font-smoothing\n          );\n          font-size: var(--paper-font-subhead_-_font-size);\n          font-weight: var(--paper-font-title_-_font-weight);\n          letter-spacing: var(--paper-font-title_-_letter-spacing);\n          line-height: var(--paper-font-title_-_line-height);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-more-info-logbook\": MoreInfoLogbook;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"@material/mwc-formfield/mwc-formfield\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { HassEntity, UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../common/dom/stop_propagation\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { domainIcon } from \"../../../common/entity/domain_icon\";\nimport { supportsFeature } from \"../../../common/entity/supports-feature\";\nimport { stringCompare } from \"../../../common/string/compare\";\nimport {\n  LocalizeFunc,\n  LocalizeKeys,\n} from \"../../../common/translations/localize\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-area-picker\";\nimport \"../../../components/ha-expansion-panel\";\nimport \"../../../components/ha-icon-picker\";\nimport \"../../../components/ha-radio\";\nimport \"../../../components/ha-select\";\nimport \"../../../components/ha-settings-row\";\nimport \"../../../components/ha-switch\";\nimport type { HaSwitch } from \"../../../components/ha-switch\";\nimport \"../../../components/ha-textfield\";\nimport {\n  CameraPreferences,\n  CAMERA_ORIENTATIONS,\n  CAMERA_SUPPORT_STREAM,\n  fetchCameraPrefs,\n  STREAM_TYPE_HLS,\n  updateCameraPrefs,\n} from \"../../../data/camera\";\nimport {\n  ConfigEntry,\n  deleteConfigEntry,\n  getConfigEntries,\n} from \"../../../data/config_entries\";\nimport {\n  createConfigFlow,\n  handleConfigFlowStep,\n} from \"../../../data/config_flow\";\nimport { DataEntryFlowStepCreateEntry } from \"../../../data/data_entry_flow\";\nimport {\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n  updateDeviceRegistryEntry,\n} from \"../../../data/device_registry\";\nimport {\n  EntityRegistryEntry,\n  EntityRegistryEntryUpdateParams,\n  ExtEntityRegistryEntry,\n  fetchEntityRegistry,\n  removeEntityRegistryEntry,\n  updateEntityRegistryEntry,\n} from \"../../../data/entity_registry\";\nimport { domainToName } from \"../../../data/integration\";\nimport { showOptionsFlowDialog } from \"../../../dialogs/config-flow/show-dialog-options-flow\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport { showMoreInfoDialog } from \"../../../dialogs/more-info/show-ha-more-info-dialog\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { showDeviceRegistryDetailDialog } from \"../devices/device-registry-detail/show-dialog-device-registry-detail\";\n\nconst OVERRIDE_DEVICE_CLASSES = {\n  cover: [\n    [\n      \"awning\",\n      \"blind\",\n      \"curtain\",\n      \"damper\",\n      \"door\",\n      \"garage\",\n      \"gate\",\n      \"shade\",\n      \"shutter\",\n      \"window\",\n    ],\n  ],\n  binary_sensor: [\n    [\"lock\"], // Lock\n    [\"window\", \"door\", \"garage_door\", \"opening\"], // Door\n    [\"battery\", \"battery_charging\"], // Battery\n    [\"cold\", \"gas\", \"heat\"], // Climate\n    [\"running\", \"motion\", \"moving\", \"occupancy\", \"presence\", \"vibration\"], // Presence\n    [\"power\", \"plug\", \"light\"], // Power\n    [\n      \"smoke\",\n      \"safety\",\n      \"sound\",\n      \"problem\",\n      \"tamper\",\n      \"carbon_monoxide\",\n      \"moisture\",\n    ], // Alarm\n  ],\n};\n\nconst OVERRIDE_NUMBER_UNITS = {\n  temperature: [\"°C\", \"°F\", \"K\"],\n};\n\nconst OVERRIDE_SENSOR_UNITS = {\n  distance: [\"cm\", \"ft\", \"in\", \"km\", \"m\", \"mi\", \"mm\", \"yd\"],\n  pressure: [\"hPa\", \"Pa\", \"kPa\", \"bar\", \"cbar\", \"mbar\", \"mmHg\", \"inHg\", \"psi\"],\n  speed: [\"ft/s\", \"in/d\", \"in/h\", \"km/h\", \"kn\", \"m/s\", \"mm/d\", \"mph\"],\n  temperature: [\"°C\", \"°F\", \"K\"],\n  volume: [\"fl. oz.\", \"ft³\", \"gal\", \"L\", \"mL\", \"m³\"],\n  weight: [\"g\", \"kg\", \"lb\", \"mg\", \"oz\", \"µg\"],\n};\n\nconst OVERRIDE_WEATHER_UNITS = {\n  precipitation: [\"mm\", \"in\"],\n  pressure: [\"hPa\", \"mbar\", \"mmHg\", \"inHg\"],\n  temperature: [\"°C\", \"°F\"],\n  visibility: [\"km\", \"mi\"],\n  wind_speed: [\"ft/s\", \"km/h\", \"kn\", \"mph\", \"m/s\"],\n};\n\nconst SWITCH_AS_DOMAINS = [\"cover\", \"fan\", \"light\", \"lock\", \"siren\"];\n\n@customElement(\"entity-registry-settings\")\nexport class EntityRegistrySettings extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Object }) public entry!: ExtEntityRegistryEntry;\n\n  @state() private _name!: string;\n\n  @state() private _icon!: string;\n\n  @state() private _entityId!: string;\n\n  @state() private _deviceClass?: string;\n\n  @state() private _switchAs = \"switch\";\n\n  @state() private _areaId?: string | null;\n\n  @state() private _disabledBy!: EntityRegistryEntry[\"disabled_by\"];\n\n  @state() private _hiddenBy!: EntityRegistryEntry[\"hidden_by\"];\n\n  @state() private _device?: DeviceRegistryEntry;\n\n  @state() private _helperConfigEntry?: ConfigEntry;\n\n  @state() private _unit_of_measurement?: string | null;\n\n  @state() private _precipitation_unit?: string | null;\n\n  @state() private _pressure_unit?: string | null;\n\n  @state() private _temperature_unit?: string | null;\n\n  @state() private _visibility_unit?: string | null;\n\n  @state() private _wind_speed_unit?: string | null;\n\n  @state() private _error?: string;\n\n  @state() private _submitting?: boolean;\n\n  @state() private _cameraPrefs?: CameraPreferences;\n\n  private _origEntityId!: string;\n\n  private _deviceLookup?: Record<string, DeviceRegistryEntry>;\n\n  private _deviceClassOptions?: string[][];\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeDeviceRegistry(this.hass.connection!, (devices) => {\n        this._deviceLookup = {};\n        for (const device of devices) {\n          this._deviceLookup[device.id] = device;\n        }\n        if (this.entry.device_id) {\n          this._device = this._deviceLookup[this.entry.device_id];\n        }\n      }),\n    ];\n  }\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n    if (this.entry.config_entry_id) {\n      getConfigEntries(this.hass, {\n        type: \"helper\",\n        domain: this.entry.platform,\n      }).then((entries) => {\n        this._helperConfigEntry = entries.find(\n          (ent) => ent.entry_id === this.entry.config_entry_id\n        );\n      });\n    }\n  }\n\n  protected willUpdate(changedProperties: PropertyValues) {\n    super.willUpdate(changedProperties);\n    if (!changedProperties.has(\"entry\")) {\n      return;\n    }\n\n    this._error = undefined;\n    this._name = this.entry.name || \"\";\n    this._icon = this.entry.icon || \"\";\n    this._deviceClass =\n      this.entry.device_class || this.entry.original_device_class;\n    this._origEntityId = this.entry.entity_id;\n    this._areaId = this.entry.area_id;\n    this._entityId = this.entry.entity_id;\n    this._disabledBy = this.entry.disabled_by;\n    this._hiddenBy = this.entry.hidden_by;\n    this._device =\n      this.entry.device_id && this._deviceLookup\n        ? this._deviceLookup[this.entry.device_id]\n        : undefined;\n\n    const domain = computeDomain(this.entry.entity_id);\n\n    if (domain === \"camera\" && isComponentLoaded(this.hass, \"stream\")) {\n      const stateObj: HassEntity | undefined =\n        this.hass.states[this.entry.entity_id];\n      if (\n        stateObj &&\n        supportsFeature(stateObj, CAMERA_SUPPORT_STREAM) &&\n        // The stream component for HLS streams supports a server-side pre-load\n        // option that client initiated WebRTC streams do not\n        stateObj.attributes.frontend_stream_type === STREAM_TYPE_HLS\n      ) {\n        this._fetchCameraPrefs();\n      }\n    }\n\n    if (domain === \"number\" || domain === \"sensor\") {\n      const stateObj: HassEntity | undefined =\n        this.hass.states[this.entry.entity_id];\n      this._unit_of_measurement = stateObj?.attributes?.unit_of_measurement;\n    }\n\n    if (domain === \"weather\") {\n      const stateObj: HassEntity | undefined =\n        this.hass.states[this.entry.entity_id];\n      this._precipitation_unit = stateObj?.attributes?.precipitation_unit;\n      this._pressure_unit = stateObj?.attributes?.pressure_unit;\n      this._temperature_unit = stateObj?.attributes?.temperature_unit;\n      this._visibility_unit = stateObj?.attributes?.visibility_unit;\n      this._wind_speed_unit = stateObj?.attributes?.wind_speed_unit;\n    }\n\n    const deviceClasses: string[][] = OVERRIDE_DEVICE_CLASSES[domain];\n\n    if (!deviceClasses) {\n      return;\n    }\n\n    this._deviceClassOptions = [[], []];\n    for (const deviceClass of deviceClasses) {\n      if (deviceClass.includes(this.entry.original_device_class!)) {\n        this._deviceClassOptions[0] = deviceClass;\n      } else {\n        this._deviceClassOptions[1].push(...deviceClass);\n      }\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (this.entry.entity_id !== this._origEntityId) {\n      return html``;\n    }\n    const stateObj: HassEntity | undefined =\n      this.hass.states[this.entry.entity_id];\n\n    const domain = computeDomain(this.entry.entity_id);\n\n    const invalidDomainUpdate = computeDomain(this._entityId.trim()) !== domain;\n\n    return html`\n      ${!stateObj\n        ? html`\n            <div class=\"container warning\">\n              ${this.hass!.localize(\n                \"ui.dialogs.entity_registry.editor.unavailable\"\n              )}\n              ${this._device?.disabled_by\n                ? html`<br />${this.hass!.localize(\n                      \"ui.dialogs.entity_registry.editor.device_disabled\"\n                    )}<br /><mwc-button @click=${this._openDeviceSettings}>\n                      ${this.hass!.localize(\n                        \"ui.dialogs.entity_registry.editor.open_device_settings\"\n                      )}\n                    </mwc-button>`\n                : \"\"}\n            </div>\n          `\n        : \"\"}\n      ${this._error\n        ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n        : \"\"}\n      <div class=\"form container\">\n        <ha-textfield\n          .value=${this._name}\n          .label=${this.hass.localize(\"ui.dialogs.entity_registry.editor.name\")}\n          .invalid=${invalidDomainUpdate}\n          .disabled=${this._submitting}\n          .placeholder=${this.entry.original_name}\n          @input=${this._nameChanged}\n        ></ha-textfield>\n        <ha-icon-picker\n          .hass=${this.hass}\n          .value=${this._icon}\n          @value-changed=${this._iconChanged}\n          .label=${this.hass.localize(\"ui.dialogs.entity_registry.editor.icon\")}\n          .placeholder=${this.entry.original_icon || stateObj?.attributes.icon}\n          .fallbackPath=${!this._icon && !stateObj?.attributes.icon && stateObj\n            ? domainIcon(computeDomain(stateObj.entity_id), stateObj)\n            : undefined}\n          .disabled=${this._submitting}\n        ></ha-icon-picker>\n        ${this._deviceClassOptions\n          ? html`\n              <ha-select\n                .label=${this.hass.localize(\n                  \"ui.dialogs.entity_registry.editor.device_class\"\n                )}\n                .value=${this._deviceClass}\n                naturalMenuWidth\n                fixedMenuPosition\n                @selected=${this._deviceClassChanged}\n                @closed=${stopPropagation}\n              >\n                <mwc-list-item></mwc-list-item>\n                ${this._deviceClassesSorted(\n                  domain,\n                  this._deviceClassOptions[0],\n                  this.hass.localize\n                ).map(\n                  (entry) => html`\n                    <mwc-list-item .value=${entry.deviceClass}>\n                      ${entry.label}\n                    </mwc-list-item>\n                  `\n                )}\n                ${this._deviceClassOptions[0].length &&\n                this._deviceClassOptions[1].length\n                  ? html`<li divider role=\"separator\"></li>`\n                  : \"\"}\n                ${this._deviceClassesSorted(\n                  domain,\n                  this._deviceClassOptions[1],\n                  this.hass.localize\n                ).map(\n                  (entry) => html`\n                    <mwc-list-item .value=${entry.deviceClass}>\n                      ${entry.label}\n                    </mwc-list-item>\n                  `\n                )}\n              </ha-select>\n            `\n          : \"\"}\n        ${domain === \"number\" &&\n        this._deviceClass &&\n        stateObj?.attributes.unit_of_measurement &&\n        OVERRIDE_NUMBER_UNITS[this._deviceClass]?.includes(\n          stateObj?.attributes.unit_of_measurement\n        )\n          ? html`\n              <ha-select\n                .label=${this.hass.localize(\n                  \"ui.dialogs.entity_registry.editor.unit_of_measurement\"\n                )}\n                .value=${stateObj.attributes.unit_of_measurement}\n                naturalMenuWidth\n                fixedMenuPosition\n                @selected=${this._unitChanged}\n                @closed=${stopPropagation}\n              >\n                ${OVERRIDE_NUMBER_UNITS[this._deviceClass].map(\n                  (unit: string) => html`\n                    <mwc-list-item .value=${unit}>${unit}</mwc-list-item>\n                  `\n                )}\n              </ha-select>\n            `\n          : \"\"}\n        ${domain === \"sensor\" &&\n        this._deviceClass &&\n        stateObj?.attributes.unit_of_measurement &&\n        OVERRIDE_SENSOR_UNITS[this._deviceClass]?.includes(\n          stateObj?.attributes.unit_of_measurement\n        )\n          ? html`\n              <ha-select\n                .label=${this.hass.localize(\n                  \"ui.dialogs.entity_registry.editor.unit_of_measurement\"\n                )}\n                .value=${stateObj.attributes.unit_of_measurement}\n                naturalMenuWidth\n                fixedMenuPosition\n                @selected=${this._unitChanged}\n                @closed=${stopPropagation}\n              >\n                ${OVERRIDE_SENSOR_UNITS[this._deviceClass].map(\n                  (unit: string) => html`\n                    <mwc-list-item .value=${unit}>${unit}</mwc-list-item>\n                  `\n                )}\n              </ha-select>\n            `\n          : \"\"}\n        ${domain === \"weather\"\n          ? html`\n              <ha-select\n                .label=${this.hass.localize(\n                  \"ui.dialogs.entity_registry.editor.precipitation_unit\"\n                )}\n                .value=${this._precipitation_unit}\n                naturalMenuWidth\n                fixedMenuPosition\n                @selected=${this._precipitationUnitChanged}\n                @closed=${stopPropagation}\n              >\n                ${OVERRIDE_WEATHER_UNITS.precipitation.map(\n                  (unit: string) => html`\n                    <mwc-list-item .value=${unit}>${unit}</mwc-list-item>\n                  `\n                )}\n              </ha-select>\n              <ha-select\n                .label=${this.hass.localize(\n                  \"ui.dialogs.entity_registry.editor.pressure_unit\"\n                )}\n                .value=${this._pressure_unit}\n                naturalMenuWidth\n                fixedMenuPosition\n                @selected=${this._pressureUnitChanged}\n                @closed=${stopPropagation}\n              >\n                ${OVERRIDE_WEATHER_UNITS.pressure.map(\n                  (unit: string) => html`\n                    <mwc-list-item .value=${unit}>${unit}</mwc-list-item>\n                  `\n                )}\n              </ha-select>\n              <ha-select\n                .label=${this.hass.localize(\n                  \"ui.dialogs.entity_registry.editor.temperature_unit\"\n                )}\n                .value=${this._temperature_unit}\n                naturalMenuWidth\n                fixedMenuPosition\n                @selected=${this._temperatureUnitChanged}\n                @closed=${stopPropagation}\n              >\n                ${OVERRIDE_WEATHER_UNITS.temperature.map(\n                  (unit: string) => html`\n                    <mwc-list-item .value=${unit}>${unit}</mwc-list-item>\n                  `\n                )}\n              </ha-select>\n              <ha-select\n                .label=${this.hass.localize(\n                  \"ui.dialogs.entity_registry.editor.visibility_unit\"\n                )}\n                .value=${this._visibility_unit}\n                naturalMenuWidth\n                fixedMenuPosition\n                @selected=${this._visibilityUnitChanged}\n                @closed=${stopPropagation}\n              >\n                ${OVERRIDE_WEATHER_UNITS.visibility.map(\n                  (unit: string) => html`\n                    <mwc-list-item .value=${unit}>${unit}</mwc-list-item>\n                  `\n                )}\n              </ha-select>\n              <ha-select\n                .label=${this.hass.localize(\n                  \"ui.dialogs.entity_registry.editor.wind_speed_unit\"\n                )}\n                .value=${this._wind_speed_unit}\n                naturalMenuWidth\n                fixedMenuPosition\n                @selected=${this._windSpeedUnitChanged}\n                @closed=${stopPropagation}\n              >\n                ${OVERRIDE_WEATHER_UNITS.wind_speed.map(\n                  (unit: string) => html`\n                    <mwc-list-item .value=${unit}>${unit}</mwc-list-item>\n                  `\n                )}\n              </ha-select>\n            `\n          : \"\"}\n        ${domain === \"switch\"\n          ? html`<ha-select\n              .label=${this.hass.localize(\n                \"ui.dialogs.entity_registry.editor.device_class\"\n              )}\n              naturalMenuWidth\n              fixedMenuPosition\n              @selected=${this._switchAsChanged}\n              @closed=${stopPropagation}\n            >\n              <mwc-list-item\n                value=\"switch\"\n                .selected=${!this._deviceClass ||\n                this._deviceClass === \"switch\"}\n              >\n                ${this.hass.localize(\n                  \"ui.dialogs.entity_registry.editor.device_classes.switch.switch\"\n                )}\n              </mwc-list-item>\n              <mwc-list-item\n                value=\"outlet\"\n                .selected=${this._deviceClass === \"outlet\"}\n              >\n                ${this.hass.localize(\n                  \"ui.dialogs.entity_registry.editor.device_classes.switch.outlet\"\n                )}\n              </mwc-list-item>\n              <li divider role=\"separator\"></li>\n              ${this._switchAsDomainsSorted(\n                SWITCH_AS_DOMAINS,\n                this.hass.localize\n              ).map(\n                (entry) => html`\n                  <mwc-list-item .value=${entry.domain}>\n                    ${entry.label}\n                  </mwc-list-item>\n                `\n              )}\n            </ha-select>`\n          : \"\"}\n        ${this._helperConfigEntry\n          ? html`\n              <div class=\"row\">\n                <mwc-button\n                  @click=${this._showOptionsFlow}\n                  .disabled=${this._submitting}\n                >\n                  ${this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.configure_state\",\n                    \"integration\",\n                    domainToName(\n                      this.hass.localize,\n                      this._helperConfigEntry.domain\n                    )\n                  )}\n                </mwc-button>\n              </div>\n            `\n          : \"\"}\n        <ha-textfield\n          error-message=\"Domain needs to stay the same\"\n          .value=${this._entityId}\n          .label=${this.hass.localize(\n            \"ui.dialogs.entity_registry.editor.entity_id\"\n          )}\n          .invalid=${invalidDomainUpdate}\n          .disabled=${this._submitting}\n          @input=${this._entityIdChanged}\n        ></ha-textfield>\n        ${!this.entry.device_id\n          ? html`<ha-area-picker\n              .hass=${this.hass}\n              .value=${this._areaId}\n              @value-changed=${this._areaPicked}\n            ></ha-area-picker>`\n          : \"\"}\n        ${this._cameraPrefs\n          ? html`\n              <ha-settings-row>\n                <span slot=\"heading\"\n                  >${this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.stream.preload_stream\"\n                  )}</span\n                >\n                <span slot=\"description\"\n                  >${this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.stream.preload_stream_description\"\n                  )}</span\n                >\n                <ha-switch\n                  .checked=${this._cameraPrefs.preload_stream}\n                  @change=${this._handleCameraPrefsChanged}\n                >\n                </ha-switch>\n              </ha-settings-row>\n              <ha-settings-row>\n                <span slot=\"heading\"\n                  >${this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.stream.stream_orientation\"\n                  )}</span\n                >\n                <span slot=\"description\"\n                  >${this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.stream.stream_orientation_description\"\n                  )}</span\n                >\n                <ha-select\n                  .label=${this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.stream.stream_orientation\"\n                  )}\n                  naturalMenuWidth\n                  fixedMenuPosition\n                  @selected=${this._handleCameraOrientationChanged}\n                  @closed=${stopPropagation}\n                >\n                  ${CAMERA_ORIENTATIONS.map((num) => {\n                    const localizeStr =\n                      \"ui.dialogs.entity_registry.editor.stream.stream_orientation_\" +\n                      num.toString();\n                    return html`\n                      <mwc-list-item value=${num}>\n                        ${this.hass.localize(localizeStr as LocalizeKeys)}\n                      </mwc-list-item>\n                    `;\n                  })}\n                </ha-select>\n              </ha-settings-row>\n            `\n          : \"\"}\n        <ha-expansion-panel\n          .header=${this.hass.localize(\n            \"ui.dialogs.entity_registry.editor.advanced\"\n          )}\n          outlined\n        >\n          <div class=\"label\">\n            ${this.hass.localize(\n              \"ui.dialogs.entity_registry.editor.entity_status\"\n            )}:\n          </div>\n          <div class=\"secondary\">\n            ${this._disabledBy &&\n            this._disabledBy !== \"user\" &&\n            this._disabledBy !== \"integration\"\n              ? this.hass.localize(\n                  \"ui.dialogs.entity_registry.editor.enabled_cause\",\n                  \"cause\",\n                  this.hass.localize(\n                    `config_entry.disabled_by.${this._disabledBy}`\n                  )\n                )\n              : \"\"}\n          </div>\n          <div class=\"row\">\n            <mwc-formfield\n              .label=${this.hass.localize(\n                \"ui.dialogs.entity_registry.editor.enabled_label\"\n              )}\n            >\n              <ha-radio\n                name=\"hiddendisabled\"\n                value=\"enabled\"\n                .checked=${!this._hiddenBy && !this._disabledBy}\n                .disabled=${(this._hiddenBy !== null &&\n                  this._hiddenBy !== \"user\") ||\n                !!this._device?.disabled_by ||\n                (this._disabledBy !== null &&\n                  this._disabledBy !== \"user\" &&\n                  this._disabledBy !== \"integration\")}\n                @change=${this._viewStatusChanged}\n              ></ha-radio>\n            </mwc-formfield>\n            <mwc-formfield\n              .label=${this.hass.localize(\n                \"ui.dialogs.entity_registry.editor.hidden_label\"\n              )}\n            >\n              <ha-radio\n                name=\"hiddendisabled\"\n                value=\"hidden\"\n                .checked=${this._hiddenBy !== null}\n                .disabled=${(this._hiddenBy && this._hiddenBy !== \"user\") ||\n                Boolean(this._device?.disabled_by) ||\n                (this._disabledBy &&\n                  this._disabledBy !== \"user\" &&\n                  this._disabledBy !== \"integration\")}\n                @change=${this._viewStatusChanged}\n              ></ha-radio>\n            </mwc-formfield>\n            <mwc-formfield\n              .label=${this.hass.localize(\n                \"ui.dialogs.entity_registry.editor.disabled_label\"\n              )}\n            >\n              <ha-radio\n                name=\"hiddendisabled\"\n                value=\"disabled\"\n                .checked=${this._disabledBy !== null}\n                .disabled=${(this._hiddenBy && this._hiddenBy !== \"user\") ||\n                Boolean(this._device?.disabled_by) ||\n                (this._disabledBy &&\n                  this._disabledBy !== \"user\" &&\n                  this._disabledBy !== \"integration\")}\n                @change=${this._viewStatusChanged}\n              ></ha-radio>\n            </mwc-formfield>\n          </div>\n\n          ${this._disabledBy !== null\n            ? html`\n                <div class=\"secondary\">\n                  ${this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.enabled_description\"\n                  )}\n                </div>\n              `\n            : this._hiddenBy !== null\n            ? html`\n                <div class=\"secondary\">\n                  ${this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.hidden_description\"\n                  )}\n                </div>\n              `\n            : \"\"}\n          ${this.entry.device_id\n            ? html`\n                <div class=\"label\">\n                  ${this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.change_area\"\n                  )}:\n                </div>\n                <ha-area-picker\n                  .hass=${this.hass}\n                  .value=${this._areaId}\n                  .placeholder=${this._device?.area_id}\n                  .label=${this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.area\"\n                  )}\n                  @value-changed=${this._areaPicked}\n                ></ha-area-picker>\n                <div class=\"secondary\">\n                  ${this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.area_note\"\n                  )}\n                  ${this._device\n                    ? html`\n                        <button class=\"link\" @click=${this._openDeviceSettings}>\n                          ${this.hass.localize(\n                            \"ui.dialogs.entity_registry.editor.change_device_area\"\n                          )}\n                        </button>\n                      `\n                    : \"\"}\n                </div>\n              `\n            : \"\"}\n        </ha-expansion-panel>\n      </div>\n      <div class=\"buttons\">\n        <mwc-button\n          class=\"warning\"\n          @click=${this._confirmDeleteEntry}\n          .disabled=${this._submitting ||\n          (!this._helperConfigEntry && !stateObj?.attributes.restored)}\n        >\n          ${this.hass.localize(\"ui.dialogs.entity_registry.editor.delete\")}\n        </mwc-button>\n        <mwc-button\n          @click=${this._updateEntry}\n          .disabled=${invalidDomainUpdate || this._submitting}\n        >\n          ${this.hass.localize(\"ui.dialogs.entity_registry.editor.update\")}\n        </mwc-button>\n      </div>\n    `;\n  }\n\n  private _nameChanged(ev): void {\n    this._error = undefined;\n    this._name = ev.target.value;\n  }\n\n  private _iconChanged(ev: CustomEvent): void {\n    this._error = undefined;\n    this._icon = ev.detail.value;\n  }\n\n  private _entityIdChanged(ev): void {\n    this._error = undefined;\n    this._entityId = ev.target.value;\n  }\n\n  private _deviceClassChanged(ev): void {\n    this._error = undefined;\n    this._deviceClass = ev.target.value;\n  }\n\n  private _unitChanged(ev): void {\n    this._error = undefined;\n    this._unit_of_measurement = ev.target.value;\n  }\n\n  private _precipitationUnitChanged(ev): void {\n    this._error = undefined;\n    this._precipitation_unit = ev.target.value;\n  }\n\n  private _pressureUnitChanged(ev): void {\n    this._error = undefined;\n    this._pressure_unit = ev.target.value;\n  }\n\n  private _temperatureUnitChanged(ev): void {\n    this._error = undefined;\n    this._temperature_unit = ev.target.value;\n  }\n\n  private _visibilityUnitChanged(ev): void {\n    this._error = undefined;\n    this._visibility_unit = ev.target.value;\n  }\n\n  private _windSpeedUnitChanged(ev): void {\n    this._error = undefined;\n    this._wind_speed_unit = ev.target.value;\n  }\n\n  private _switchAsChanged(ev): void {\n    if (ev.target.value === \"\") {\n      return;\n    }\n\n    // If value is \"outlet\" that means the user kept the \"switch\" domain, but actually changed\n    // the device_class of the switch to \"outlet\".\n    const switchAs = ev.target.value === \"outlet\" ? \"switch\" : ev.target.value;\n    this._switchAs = switchAs;\n\n    if (ev.target.value === \"outlet\" || ev.target.value === \"switch\") {\n      this._deviceClass = ev.target.value;\n    }\n  }\n\n  private _areaPicked(ev: CustomEvent) {\n    this._error = undefined;\n    this._areaId = ev.detail.value;\n  }\n\n  private async _fetchCameraPrefs() {\n    this._cameraPrefs = await fetchCameraPrefs(this.hass, this.entry.entity_id);\n  }\n\n  private async _handleCameraPrefsChanged(ev) {\n    const checkbox = ev.currentTarget as HaSwitch;\n    try {\n      this._cameraPrefs = await updateCameraPrefs(\n        this.hass,\n        this.entry.entity_id,\n        {\n          preload_stream: checkbox.checked!,\n        }\n      );\n    } catch (err: any) {\n      showAlertDialog(this, { text: err.message });\n      checkbox.checked = !checkbox.checked;\n    }\n  }\n\n  private async _handleCameraOrientationChanged(ev) {\n    try {\n      this._cameraPrefs = await updateCameraPrefs(\n        this.hass,\n        this.entry.entity_id,\n        {\n          orientation: ev.currentTarget.value,\n        }\n      );\n    } catch (err: any) {\n      showAlertDialog(this, { text: err.message });\n    }\n  }\n\n  private _viewStatusChanged(ev: CustomEvent): void {\n    switch ((ev.target as any).value) {\n      case \"enabled\":\n        this._disabledBy = null;\n        this._hiddenBy = null;\n        break;\n      case \"disabled\":\n        this._disabledBy = \"user\";\n        this._hiddenBy = null;\n        break;\n      case \"hidden\":\n        this._hiddenBy = \"user\";\n        this._disabledBy = null;\n        break;\n    }\n  }\n\n  private _openDeviceSettings() {\n    showDeviceRegistryDetailDialog(this, {\n      device: this._device!,\n      updateEntry: async (updates) => {\n        await updateDeviceRegistryEntry(this.hass, this._device!.id, updates);\n      },\n    });\n  }\n\n  private async _updateEntry(): Promise<void> {\n    this._submitting = true;\n\n    const parent = (this.getRootNode() as ShadowRoot).host as HTMLElement;\n\n    const params: Partial<EntityRegistryEntryUpdateParams> = {\n      name: this._name.trim() || null,\n      icon: this._icon.trim() || null,\n      area_id: this._areaId || null,\n      new_entity_id: this._entityId.trim(),\n    };\n\n    // Only update device class if changed by user\n    if (\n      this._deviceClass !==\n      (this.entry.device_class || this.entry.original_device_class)\n    ) {\n      params.device_class = this._deviceClass;\n    }\n\n    const stateObj: HassEntity | undefined =\n      this.hass.states[this.entry.entity_id];\n    const domain = computeDomain(this.entry.entity_id);\n\n    if (\n      this.entry.disabled_by !== this._disabledBy &&\n      (this._disabledBy === null || this._disabledBy === \"user\")\n    ) {\n      params.disabled_by = this._disabledBy;\n    }\n    if (\n      this.entry.hidden_by !== this._hiddenBy &&\n      (this._hiddenBy === null || this._hiddenBy === \"user\")\n    ) {\n      params.hidden_by = this._hiddenBy;\n    }\n    if (\n      (domain === \"number\" || domain === \"sensor\") &&\n      stateObj?.attributes?.unit_of_measurement !== this._unit_of_measurement\n    ) {\n      params.options_domain = domain;\n      params.options = { unit_of_measurement: this._unit_of_measurement };\n    }\n    if (\n      domain === \"weather\" &&\n      (stateObj?.attributes?.precipitation_unit !== this._precipitation_unit ||\n        stateObj?.attributes?.pressure_unit !== this._pressure_unit ||\n        stateObj?.attributes?.temperature_unit !== this._temperature_unit ||\n        stateObj?.attributes?.visbility_unit !== this._visibility_unit ||\n        stateObj?.attributes?.wind_speed_unit !== this._wind_speed_unit)\n    ) {\n      params.options_domain = \"weather\";\n      params.options = {\n        precipitation_unit: this._precipitation_unit,\n        pressure_unit: this._pressure_unit,\n        temperature_unit: this._temperature_unit,\n        visibility_unit: this._visibility_unit,\n        wind_speed_unit: this._wind_speed_unit,\n      };\n    }\n    try {\n      const result = await updateEntityRegistryEntry(\n        this.hass!,\n        this._origEntityId,\n        params\n      );\n      if (result.require_restart) {\n        showAlertDialog(this, {\n          text: this.hass.localize(\n            \"ui.dialogs.entity_registry.editor.enabled_restart_confirm\"\n          ),\n        });\n      }\n      if (result.reload_delay) {\n        showAlertDialog(this, {\n          text: this.hass.localize(\n            \"ui.dialogs.entity_registry.editor.enabled_delay_confirm\",\n            \"delay\",\n            result.reload_delay\n          ),\n        });\n      }\n      fireEvent(this as HTMLElement, \"close-dialog\");\n    } catch (err: any) {\n      this._error = err.message || \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n\n    if (this._switchAs !== \"switch\") {\n      if (\n        !(await showConfirmationDialog(this, {\n          text: this.hass!.localize(\n            \"ui.dialogs.entity_registry.editor.switch_as_x_confirm\",\n            \"domain\",\n            this._switchAs\n          ),\n        }))\n      ) {\n        return;\n      }\n      const configFlow = await createConfigFlow(this.hass, \"switch_as_x\");\n      const result = (await handleConfigFlowStep(\n        this.hass,\n        configFlow.flow_id,\n        {\n          entity_id: this._entityId.trim(),\n          target_domain: this._switchAs,\n        }\n      )) as DataEntryFlowStepCreateEntry;\n      if (!result.result?.entry_id) {\n        return;\n      }\n      const unsub = await this.hass.connection.subscribeEvents(() => {\n        unsub();\n        fetchEntityRegistry(this.hass.connection).then((entityRegistry) => {\n          const entity = entityRegistry.find(\n            (reg) => reg.config_entry_id === result.result!.entry_id\n          );\n          if (!entity) {\n            return;\n          }\n          showMoreInfoDialog(parent, {\n            entityId: entity.entity_id,\n            tab: \"settings\",\n          });\n        });\n      }, \"entity_registry_updated\");\n    }\n  }\n\n  private async _confirmDeleteEntry(): Promise<void> {\n    if (\n      !(await showConfirmationDialog(this, {\n        text: this.hass.localize(\n          \"ui.dialogs.entity_registry.editor.confirm_delete\"\n        ),\n      }))\n    ) {\n      return;\n    }\n\n    this._submitting = true;\n\n    try {\n      if (this._helperConfigEntry) {\n        await deleteConfigEntry(this.hass, this._helperConfigEntry.entry_id);\n      } else {\n        await removeEntityRegistryEntry(this.hass!, this._origEntityId);\n      }\n      fireEvent(this, \"close-dialog\");\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _showOptionsFlow() {\n    showOptionsFlowDialog(this, this._helperConfigEntry!, null);\n  }\n\n  private _switchAsDomainsSorted = memoizeOne(\n    (domains: string[], localize: LocalizeFunc) =>\n      domains\n        .map((entry) => ({\n          domain: entry,\n          label: domainToName(localize, entry),\n        }))\n        .sort((a, b) => stringCompare(a.label, b.label))\n  );\n\n  private _deviceClassesSorted = memoizeOne(\n    (domain: string, deviceClasses: string[], localize: LocalizeFunc) =>\n      deviceClasses\n        .map((entry) => ({\n          deviceClass: entry,\n          label: localize(\n            `ui.dialogs.entity_registry.editor.device_classes.${domain}.${entry}`\n          ),\n        }))\n        .sort((a, b) => stringCompare(a.label, b.label))\n  );\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: block;\n        }\n        .container {\n          padding: 20px 24px;\n        }\n        .buttons {\n          box-sizing: border-box;\n          display: flex;\n          padding: 24px;\n          padding-top: 16px;\n          justify-content: space-between;\n          padding-bottom: max(env(safe-area-inset-bottom), 24px);\n          background-color: var(--mdc-theme-surface, #fff);\n          border-top: 1px solid var(--divider-color);\n          position: sticky;\n          bottom: 0px;\n        }\n        ha-select {\n          width: 100%;\n          margin: 8px 0;\n        }\n        ha-switch {\n          margin-right: 16px;\n        }\n        ha-settings-row {\n          padding: 0;\n        }\n        ha-settings-row ha-switch {\n          margin-right: 0;\n        }\n        ha-textfield {\n          display: block;\n          margin: 8px 0;\n        }\n        ha-area-picker {\n          margin: 8px 0;\n          display: block;\n        }\n        .row {\n          margin: 8px 0;\n          color: var(--primary-text-color);\n          display: flex;\n          align-items: center;\n        }\n        .label {\n          margin-top: 16px;\n        }\n        .secondary {\n          margin: 8px 0;\n          width: 340px;\n        }\n        li[divider] {\n          border-bottom-color: var(--divider-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"entity-registry-settings\": EntityRegistrySettings;\n  }\n}\n","import \"@material/mwc-tab\";\nimport \"@material/mwc-tab-bar\";\nimport { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { dynamicElement } from \"../../common/dom/dynamic-element-directive\";\nimport {\n  EntityRegistryEntry,\n  ExtEntityRegistryEntry,\n  getExtendedEntityRegistryEntry,\n} from \"../../data/entity_registry\";\nimport { PLATFORMS_WITH_SETTINGS_TAB } from \"../../panels/config/entities/const\";\nimport type { HomeAssistant } from \"../../types\";\nimport { documentationUrl } from \"../../util/documentation-url\";\nimport \"../../panels/config/entities/entity-registry-settings\";\n\n@customElement(\"ha-more-info-settings\")\nexport class HaMoreInfoSettings extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public entityId!: string;\n\n  @state() private _entry?: EntityRegistryEntry | ExtEntityRegistryEntry | null;\n\n  @state() private _settingsElementTag?: string;\n\n  protected render() {\n    // loading.\n    if (this._entry === undefined) {\n      return html``;\n    }\n\n    // No unique ID\n    if (this._entry === null) {\n      return html`\n        <div class=\"content\">\n          ${this.hass.localize(\n            \"ui.dialogs.entity_registry.no_unique_id\",\n            \"entity_id\",\n            this.entityId,\n            \"faq_link\",\n            html`<a\n              href=${documentationUrl(this.hass, \"/faq/unique_id\")}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              >${this.hass.localize(\"ui.dialogs.entity_registry.faq\")}</a\n            >`\n          )}\n        </div>\n      `;\n    }\n\n    if (!this._settingsElementTag) {\n      return html``;\n    }\n\n    return html`\n      ${dynamicElement(this._settingsElementTag, {\n        hass: this.hass,\n        entry: this._entry,\n        entityId: this.entityId,\n      })}\n    `;\n  }\n\n  protected willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n    if (changedProps.has(\"entityId\")) {\n      this._entry = undefined;\n      if (this.entityId) {\n        this._getEntityReg();\n      }\n    }\n  }\n\n  private async _getEntityReg() {\n    try {\n      this._entry = await getExtendedEntityRegistryEntry(\n        this.hass,\n        this.entityId\n      );\n      this._loadPlatformSettingTabs();\n    } catch {\n      this._entry = null;\n    }\n  }\n\n  private async _loadPlatformSettingTabs(): Promise<void> {\n    if (!this._entry) {\n      return;\n    }\n    if (\n      !Object.keys(PLATFORMS_WITH_SETTINGS_TAB).includes(this._entry.platform)\n    ) {\n      this._settingsElementTag = \"entity-registry-settings\";\n      return;\n    }\n    const tag = PLATFORMS_WITH_SETTINGS_TAB[this._entry.platform];\n    await import(`../../panels/config/entities/editor-tabs/settings/${tag}`);\n    this._settingsElementTag = tag;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      css`\n        .content {\n          padding: 24px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-more-info-settings\": HaMoreInfoSettings;\n  }\n}\n","import \"@lit-labs/virtualizer\";\nimport { VisibilityChangedEvent } from \"@lit-labs/virtualizer/Virtualizer\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport { customElement, eventOptions, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { formatDate } from \"../../common/datetime/format_date\";\nimport { formatTimeWithSeconds } from \"../../common/datetime/format_time\";\nimport { restoreScroll } from \"../../common/decorators/restore-scroll\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport \"../../components/entity/state-badge\";\nimport \"../../components/ha-circular-progress\";\nimport \"../../components/ha-relative-time\";\nimport {\n  createHistoricState,\n  localizeTriggerSource,\n  localizeStateMessage,\n  LogbookEntry,\n} from \"../../data/logbook\";\nimport { TraceContexts } from \"../../data/trace\";\nimport {\n  haStyle,\n  haStyleScrollbar,\n  buttonLinkStyle,\n} from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\nimport { brandsUrl } from \"../../util/brands-url\";\nimport \"../../components/ha-icon-next\";\nimport { navigate } from \"../../common/navigate\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"hass-logbook-live\": { enable: boolean };\n  }\n}\n\nconst triggerDomains = [\"script\", \"automation\"];\n\nconst hasContext = (item: LogbookEntry) =>\n  item.context_event_type || item.context_state || item.context_message;\nconst stripEntityId = (message: string, entityId?: string) =>\n  entityId ? message.replace(entityId, \" \") : message;\n\n@customElement(\"ha-logbook-renderer\")\nclass HaLogbookRenderer extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public userIdToName = {};\n\n  @property({ attribute: false })\n  public traceContexts: TraceContexts = {};\n\n  @property({ attribute: false }) public entries: LogbookEntry[] = [];\n\n  @property({ type: Boolean, attribute: \"narrow\" })\n  public narrow = false;\n\n  @property({ type: Boolean, attribute: \"virtualize\", reflect: true })\n  public virtualize = false;\n\n  @property({ type: Boolean, attribute: \"no-icon\" })\n  public noIcon = false;\n\n  @property({ type: Boolean, attribute: \"no-name\" })\n  public noName = false;\n\n  @property({ type: Boolean, attribute: \"relative-time\" })\n  public relativeTime = false;\n\n  // @ts-ignore\n  @restoreScroll(\".container\") private _savedScrollPos?: number;\n\n  protected shouldUpdate(changedProps: PropertyValues<this>) {\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    const languageChanged =\n      oldHass === undefined || oldHass.locale !== this.hass.locale;\n\n    return (\n      changedProps.has(\"entries\") ||\n      changedProps.has(\"traceContexts\") ||\n      languageChanged\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this.entries?.length) {\n      return html`\n        <div class=\"container no-entries\">\n          ${this.hass.localize(\"ui.components.logbook.entries_not_found\")}\n        </div>\n      `;\n    }\n\n    return html`\n      <div\n        class=\"container ha-scrollbar ${classMap({\n          narrow: this.narrow,\n          \"no-name\": this.noName,\n          \"no-icon\": this.noIcon,\n        })}\"\n        @scroll=${this._saveScrollPos}\n      >\n        ${this.virtualize\n          ? html`<lit-virtualizer\n              @visibilityChanged=${this._visibilityChanged}\n              scroller\n              class=\"ha-scrollbar\"\n              .items=${this.entries}\n              .renderItem=${this._renderLogbookItem}\n            >\n            </lit-virtualizer>`\n          : this.entries.map((item, index) =>\n              this._renderLogbookItem(item, index)\n            )}\n      </div>\n    `;\n  }\n\n  private _renderLogbookItem = (\n    item: LogbookEntry,\n    index: number\n  ): TemplateResult => {\n    if (!item || index === undefined) {\n      return html``;\n    }\n    const previous = this.entries[index - 1];\n    const seenEntityIds: string[] = [];\n    const currentStateObj = item.entity_id\n      ? this.hass.states[item.entity_id]\n      : undefined;\n    const historicStateObj = currentStateObj\n      ? createHistoricState(currentStateObj, item.state!)\n      : undefined;\n    const domain = item.entity_id\n      ? computeDomain(item.entity_id)\n      : // Domain is there if there is no entity ID.\n        item.domain!;\n    const overrideImage =\n      !historicStateObj &&\n      !item.icon &&\n      !item.state &&\n      domain &&\n      isComponentLoaded(this.hass, domain)\n        ? brandsUrl({\n            domain: domain!,\n            type: \"icon\",\n            useFallback: true,\n            darkOptimized: this.hass.themes?.darkMode,\n          })\n        : undefined;\n\n    const traceContext =\n      triggerDomains.includes(item.domain!) &&\n      item.context_id! in this.traceContexts\n        ? this.traceContexts[item.context_id!]\n        : undefined;\n\n    const hasTrace = traceContext !== undefined;\n\n    return html`\n      <div\n        class=\"entry-container ${classMap({ clickable: hasTrace })}\"\n        .traceLink=${traceContext\n          ? `/config/${traceContext.domain}/trace/${traceContext.item_id}?run_id=${traceContext.run_id}`\n          : undefined}\n        @click=${this._handleClick}\n      >\n        ${index === 0 ||\n        (item?.when &&\n          previous?.when &&\n          new Date(item.when * 1000).toDateString() !==\n            new Date(previous.when * 1000).toDateString())\n          ? html`\n              <h4 class=\"date\">\n                ${formatDate(new Date(item.when * 1000), this.hass.locale)}\n              </h4>\n            `\n          : html``}\n\n        <div class=\"entry ${classMap({ \"no-entity\": !item.entity_id })}\">\n          <div class=\"icon-message\">\n            ${!this.noIcon\n              ? html`\n                  <state-badge\n                    .hass=${this.hass}\n                    .overrideIcon=${item.icon}\n                    .overrideImage=${overrideImage}\n                    .stateObj=${item.icon ? undefined : historicStateObj}\n                    .stateColor=${false}\n                  ></state-badge>\n                `\n              : \"\"}\n            <div class=\"message-relative_time\">\n              <div class=\"message\">\n                ${!this.noName // Used for more-info panel (single entity case)\n                  ? this._renderEntity(item.entity_id, item.name, hasTrace)\n                  : \"\"}\n                ${this._renderMessage(\n                  item,\n                  seenEntityIds,\n                  domain,\n                  historicStateObj,\n                  hasTrace\n                )}\n                ${this._renderContextMessage(item, seenEntityIds, hasTrace)}\n              </div>\n              <div class=\"secondary\">\n                <span\n                  >${formatTimeWithSeconds(\n                    new Date(item.when * 1000),\n                    this.hass.locale\n                  )}</span\n                >\n                -\n                <ha-relative-time\n                  .hass=${this.hass}\n                  .datetime=${item.when * 1000}\n                  capitalize\n                ></ha-relative-time>\n                ${item.context_user_id ? html`${this._renderUser(item)}` : \"\"}\n                ${hasTrace\n                  ? `- ${this.hass.localize(\n                      \"ui.components.logbook.show_trace\"\n                    )}`\n                  : \"\"}\n              </div>\n            </div>\n          </div>\n          ${hasTrace ? html`<ha-icon-next></ha-icon-next>` : \"\"}\n        </div>\n      </div>\n    `;\n  };\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  @eventOptions({ passive: true })\n  private _visibilityChanged(e: VisibilityChangedEvent) {\n    fireEvent(this, \"hass-logbook-live\", {\n      enable: e.first === 0,\n    });\n  }\n\n  private _renderMessage(\n    item: LogbookEntry,\n    seenEntityIds: string[],\n    domain?: string,\n    historicStateObj?: HassEntity,\n    noLink?: boolean\n  ) {\n    if (item.entity_id) {\n      if (item.state) {\n        return historicStateObj\n          ? localizeStateMessage(\n              this.hass,\n              this.hass.localize,\n              item.state,\n              historicStateObj,\n              domain!\n            )\n          : item.state;\n      }\n    }\n\n    const itemHasContext = hasContext(item);\n    let message = item.message;\n    if (triggerDomains.includes(domain!) && item.source) {\n      if (itemHasContext) {\n        // These domains include the trigger source in the message\n        // but if we have the context we want to display that instead\n        // as otherwise we display duplicate triggers\n        return \"\";\n      }\n      message = localizeTriggerSource(this.hass.localize, item.source);\n    }\n    return message\n      ? this._formatMessageWithPossibleEntity(\n          itemHasContext\n            ? stripEntityId(message, item.context_entity_id)\n            : message,\n          seenEntityIds,\n          undefined,\n          noLink\n        )\n      : \"\";\n  }\n\n  private _renderUser(item: LogbookEntry) {\n    const item_username =\n      item.context_user_id && this.userIdToName[item.context_user_id];\n    if (item_username) {\n      return `- ${item_username}`;\n    }\n    return \"\";\n  }\n\n  private _renderUnseenContextSourceEntity(\n    item: LogbookEntry,\n    seenEntityIds: string[],\n    noLink: boolean\n  ) {\n    if (\n      !item.context_entity_id ||\n      seenEntityIds.includes(item.context_entity_id!)\n    ) {\n      return \"\";\n    }\n    // We don't know what caused this entity\n    // to be included since its an integration\n    // described event.\n    return html` (${this._renderEntity(\n      item.context_entity_id,\n      item.context_entity_id_name,\n      noLink\n    )})`;\n  }\n\n  private _renderContextMessage(\n    item: LogbookEntry,\n    seenEntityIds: string[],\n    noLink: boolean\n  ) {\n    // State change\n    if (item.context_state) {\n      const historicStateObj =\n        item.context_entity_id && item.context_entity_id in this.hass.states\n          ? createHistoricState(\n              this.hass.states[item.context_entity_id],\n              item.context_state\n            )\n          : undefined;\n      return html`${this.hass.localize(\n        \"ui.components.logbook.triggered_by_state_of\"\n      )}\n      ${this._renderEntity(\n        item.context_entity_id,\n        item.context_entity_id_name,\n        noLink\n      )}\n      ${historicStateObj\n        ? localizeStateMessage(\n            this.hass,\n            this.hass.localize,\n            item.context_state,\n            historicStateObj,\n            computeDomain(item.context_entity_id!)\n          )\n        : item.context_state}`;\n    }\n    // Service call\n    if (item.context_event_type === \"call_service\") {\n      return html`${this.hass.localize(\n        \"ui.components.logbook.triggered_by_service\"\n      )}\n      ${item.context_domain}.${item.context_service}`;\n    }\n    if (\n      !item.context_message ||\n      seenEntityIds.includes(item.context_entity_id!)\n    ) {\n      return \"\";\n    }\n    // Automation or script\n    if (\n      item.context_event_type === \"automation_triggered\" ||\n      item.context_event_type === \"script_started\"\n    ) {\n      // context_source is available in 2022.6 and later\n      const triggerMsg = item.context_source\n        ? item.context_source\n        : item.context_message.replace(\"triggered by \", \"\");\n      const contextTriggerSource = localizeTriggerSource(\n        this.hass.localize,\n        triggerMsg\n      );\n      return html`${this.hass.localize(\n        item.context_event_type === \"automation_triggered\"\n          ? \"ui.components.logbook.triggered_by_automation\"\n          : \"ui.components.logbook.triggered_by_script\"\n      )}\n      ${this._renderEntity(\n        item.context_entity_id,\n        item.context_entity_id_name,\n        noLink\n      )}\n      ${item.context_message\n        ? this._formatMessageWithPossibleEntity(\n            contextTriggerSource,\n            seenEntityIds,\n            undefined,\n            noLink\n          )\n        : \"\"}`;\n    }\n    // Generic externally described logbook platform\n    // These are not localizable\n    return html` ${this.hass.localize(\"ui.components.logbook.triggered_by\")}\n    ${item.context_name}\n    ${this._formatMessageWithPossibleEntity(\n      item.context_message,\n      seenEntityIds,\n      item.context_entity_id,\n      noLink\n    )}\n    ${this._renderUnseenContextSourceEntity(item, seenEntityIds, noLink)}`;\n  }\n\n  private _renderEntity(\n    entityId: string | undefined,\n    entityName: string | undefined,\n    noLink?: boolean\n  ) {\n    const hasState = entityId && entityId in this.hass.states;\n    const displayName =\n      entityName ||\n      (hasState\n        ? this.hass.states[entityId].attributes.friendly_name || entityId\n        : entityId);\n    if (!hasState) {\n      return displayName;\n    }\n    return noLink\n      ? displayName\n      : html`<button\n          class=\"link\"\n          @click=${this._entityClicked}\n          .entityId=${entityId}\n        >\n          ${displayName}\n        </button>`;\n  }\n\n  private _formatMessageWithPossibleEntity(\n    message: string,\n    seenEntities: string[],\n    possibleEntity?: string,\n    noLink?: boolean\n  ) {\n    //\n    // As we are looking at a log(book), we are doing entity_id\n    // \"highlighting\"/\"colorizing\". The goal is to make it easy for\n    // the user to access the entity that caused the event.\n    //\n    // If there is an entity_id in the message that is also in the\n    // state machine, we search the message for the entity_id and\n    // replace it with _renderEntity\n    //\n    if (message.indexOf(\".\") !== -1) {\n      const messageParts = message.split(\" \");\n      for (let i = 0, size = messageParts.length; i < size; i++) {\n        if (messageParts[i] in this.hass.states) {\n          const entityId = messageParts[i];\n          if (seenEntities.includes(entityId)) {\n            return \"\";\n          }\n          seenEntities.push(entityId);\n          const messageEnd = messageParts.splice(i);\n          messageEnd.shift(); // remove the entity\n          return html`${messageParts.join(\" \")}\n          ${this._renderEntity(\n            entityId,\n            this.hass.states[entityId].attributes.friendly_name,\n            noLink\n          )}\n          ${messageEnd.join(\" \")}`;\n        }\n      }\n    }\n    //\n    // When we have a message has a specific entity_id attached to\n    // it, and the entity_id is not in the message, we look\n    // for the friendly name of the entity and replace that with\n    // _renderEntity if its there so the user can quickly get to\n    // that entity.\n    //\n    if (possibleEntity && possibleEntity in this.hass.states) {\n      const possibleEntityName =\n        this.hass.states[possibleEntity].attributes.friendly_name;\n      if (possibleEntityName && message.endsWith(possibleEntityName)) {\n        if (seenEntities.includes(possibleEntity)) {\n          return \"\";\n        }\n        seenEntities.push(possibleEntity);\n        message = message.substring(\n          0,\n          message.length - possibleEntityName.length\n        );\n        return html`${message}\n        ${this._renderEntity(possibleEntity, possibleEntityName, noLink)}`;\n      }\n    }\n    return message;\n  }\n\n  private _entityClicked(ev: Event) {\n    const entityId = (ev.currentTarget as any).entityId;\n    if (!entityId) {\n      return;\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n    fireEvent(this, \"hass-more-info\", {\n      entityId: entityId,\n    });\n  }\n\n  _handleClick(ev) {\n    if (!ev.currentTarget.traceLink) {\n      return;\n    }\n    navigate(ev.currentTarget.traceLink);\n    fireEvent(this, \"closed\");\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleScrollbar,\n      buttonLinkStyle,\n      css`\n        :host([virtualize]) {\n          display: block;\n          height: 100%;\n        }\n\n        .entry-container {\n          width: 100%;\n        }\n\n        .entry {\n          display: flex;\n          width: 100%;\n          line-height: 2em;\n          padding: 8px 16px;\n          box-sizing: border-box;\n          border-top: 1px solid var(--divider-color);\n          justify-content: space-between;\n          align-items: center;\n        }\n\n        ha-icon-next {\n          color: var(--secondary-text-color);\n        }\n\n        .clickable {\n          cursor: pointer;\n        }\n\n        :not(.clickable) .entry.no-entity,\n        :not(.clickable) .no-name .entry {\n          cursor: default;\n        }\n\n        .entry:hover {\n          background-color: rgba(var(--rgb-primary-text-color), 0.04);\n        }\n\n        .narrow:not(.no-icon) .time {\n          margin-left: 32px;\n          margin-inline-start: 32px;\n          margin-inline-end: initial;\n          direction: var(--direction);\n        }\n\n        .message-relative_time {\n          display: flex;\n          flex-direction: column;\n        }\n\n        .secondary {\n          font-size: 12px;\n          line-height: 1.7;\n        }\n\n        .secondary a {\n          color: var(--secondary-text-color);\n        }\n\n        .date {\n          margin: 8px 0;\n          padding: 0 16px;\n        }\n\n        .icon-message {\n          display: flex;\n          align-items: center;\n        }\n\n        .no-entries {\n          text-align: center;\n          color: var(--secondary-text-color);\n        }\n\n        state-badge {\n          margin-right: 16px;\n          margin-inline-start: initial;\n          flex-shrink: 0;\n          color: var(--state-icon-color);\n          margin-inline-end: 16px;\n          direction: var(--direction);\n        }\n\n        .message {\n          color: var(--primary-text-color);\n        }\n\n        .no-name .message:first-letter {\n          text-transform: capitalize;\n        }\n\n        a {\n          color: var(--primary-color);\n          text-decoration: none;\n        }\n\n        button.link {\n          color: var(--paper-item-icon-color);\n          text-decoration: none;\n        }\n\n        .container {\n          max-height: var(--logbook-max-height);\n        }\n\n        .container,\n        lit-virtualizer {\n          height: 100%;\n        }\n\n        lit-virtualizer {\n          contain: size layout !important;\n        }\n\n        .narrow .entry {\n          line-height: 1.5;\n        }\n\n        .narrow .icon-message state-badge {\n          margin-left: 0;\n          margin-inline-start: 0;\n          margin-inline-end: 8px;\n          margin-right: 8px;\n          direction: var(--direction);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-logbook-renderer\": HaLogbookRenderer;\n  }\n}\n","import { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport { ensureArray } from \"../../common/ensure-array\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { throttle } from \"../../common/util/throttle\";\nimport \"../../components/ha-circular-progress\";\nimport {\n  clearLogbookCache,\n  LogbookEntry,\n  LogbookStreamMessage,\n  subscribeLogbook,\n} from \"../../data/logbook\";\nimport { loadTraceContexts, TraceContexts } from \"../../data/trace\";\nimport { fetchUsers } from \"../../data/user\";\nimport { HomeAssistant } from \"../../types\";\nimport \"./ha-logbook-renderer\";\n\ninterface LogbookTimePeriod {\n  now: Date;\n  startTime: Date;\n  endTime: Date;\n  purgeBeforePythonTime: number | undefined;\n}\n\nconst findStartOfRecentTime = (now: Date, recentTime: number) =>\n  new Date(now.getTime() - recentTime * 1000).getTime() / 1000;\n\nconst idsChanged = (oldIds?: string[], newIds?: string[]) => {\n  if (oldIds === undefined && newIds === undefined) {\n    return false;\n  }\n  return (\n    !oldIds ||\n    !newIds ||\n    oldIds.length !== newIds.length ||\n    !oldIds.every((val) => newIds.includes(val))\n  );\n};\n\n@customElement(\"ha-logbook\")\nexport class HaLogbook extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public time!:\n    | { range: [Date, Date] }\n    | {\n        // Seconds\n        recent: number;\n      };\n\n  @property() public entityIds?: string[];\n\n  @property() public deviceIds?: string[];\n\n  @property({ type: Boolean, attribute: \"narrow\" })\n  public narrow = false;\n\n  @property({ type: Boolean, attribute: \"virtualize\", reflect: true })\n  public virtualize = false;\n\n  @property({ type: Boolean, attribute: \"no-icon\" })\n  public noIcon = false;\n\n  @property({ type: Boolean, attribute: \"no-name\" })\n  public noName = false;\n\n  @property({ type: Boolean, attribute: \"relative-time\" })\n  public relativeTime = false;\n\n  @property({ type: Boolean }) public showMoreLink = true;\n\n  @state() private _logbookEntries?: LogbookEntry[];\n\n  @state() private _traceContexts: TraceContexts = {};\n\n  @state() private _userIdToName = {};\n\n  @state() private _error?: string;\n\n  private _subscribed?: Promise<(() => Promise<void>) | void>;\n\n  private _liveUpdatesEnabled = true;\n\n  private _pendingStreamMessages: LogbookStreamMessage[] = [];\n\n  private _throttleGetLogbookEntries = throttle(\n    () => this._getLogBookData(),\n    1000\n  );\n\n  protected render(): TemplateResult {\n    if (!isComponentLoaded(this.hass, \"logbook\")) {\n      return html``;\n    }\n\n    if (this._error) {\n      return html`<div class=\"no-entries\">\n        ${`${this.hass.localize(\"ui.components.logbook.retrieval_error\")}: ${\n          this._error\n        }`}\n      </div>`;\n    }\n\n    if (this._logbookEntries === undefined) {\n      return html`\n        <div class=\"progress-wrapper\">\n          <ha-circular-progress\n            active\n            alt=${this.hass.localize(\"ui.common.loading\")}\n          ></ha-circular-progress>\n        </div>\n      `;\n    }\n\n    if (this._logbookEntries.length === 0) {\n      return html`<div class=\"no-entries\">\n        ${this.hass.localize(\"ui.components.logbook.entries_not_found\")}\n      </div>`;\n    }\n\n    return html`\n      <ha-logbook-renderer\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .virtualize=${this.virtualize}\n        .noIcon=${this.noIcon}\n        .noName=${this.noName}\n        .relativeTime=${this.relativeTime}\n        .entries=${this._logbookEntries}\n        .traceContexts=${this._traceContexts}\n        .userIdToName=${this._userIdToName}\n        @hass-logbook-live=${this._handleLogbookLive}\n      ></ha-logbook-renderer>\n    `;\n  }\n\n  public async refresh(force = false) {\n    if (!force && (this._subscribed || this._logbookEntries === undefined)) {\n      return;\n    }\n\n    this._unsubscribeSetLoading();\n    this._throttleGetLogbookEntries.cancel();\n    this._updateTraceContexts.cancel();\n    this._updateUsers.cancel();\n\n    if (\"range\" in this.time) {\n      clearLogbookCache(\n        this.time.range[0].toISOString(),\n        this.time.range[1].toISOString()\n      );\n    }\n\n    this._throttleGetLogbookEntries();\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    if (changedProps.size !== 1 || !changedProps.has(\"hass\")) {\n      return true;\n    }\n    // We only respond to hass changes if the translations changed\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    return !oldHass || oldHass.localize !== this.hass.localize;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    let changed = changedProps.has(\"time\");\n\n    for (const key of [\"entityIds\", \"deviceIds\"]) {\n      if (!changedProps.has(key)) {\n        continue;\n      }\n\n      const oldValue = changedProps.get(key) as string[] | undefined;\n      const curValue = this[key] as string[] | undefined;\n\n      // If they make the filter more specific we want\n      // to change the subscription since it will reduce\n      // the overhead on the backend as the event stream\n      // can be a firehose for all state events.\n      if (idsChanged(oldValue, curValue)) {\n        changed = true;\n        break;\n      }\n    }\n\n    if (changed) {\n      this.refresh(true);\n    }\n  }\n\n  private _handleLogbookLive(ev: CustomEvent) {\n    if (ev.detail.enable && !this._liveUpdatesEnabled) {\n      // Process everything we queued up while we were scrolled down\n      this._pendingStreamMessages.forEach((msg) =>\n        this._processStreamMessage(msg)\n      );\n      this._pendingStreamMessages = [];\n    }\n    this._liveUpdatesEnabled = ev.detail.enable;\n  }\n\n  private get _filterAlwaysEmptyResults(): boolean {\n    const entityIds = ensureArray(this.entityIds);\n    const deviceIds = ensureArray(this.deviceIds);\n\n    // If all specified filters are empty lists, we can return an empty list.\n    return (\n      (entityIds || deviceIds) &&\n      (!entityIds || entityIds.length === 0) &&\n      (!deviceIds || deviceIds.length === 0)\n    );\n  }\n\n  private _unsubscribe(): void {\n    if (this._subscribed) {\n      this._subscribed.then((unsub) =>\n        unsub\n          ? unsub().catch(() => {\n              // The backend will cancel the subscription if\n              // we subscribe to entities that will all be\n              // filtered away\n            })\n          : undefined\n      );\n      this._subscribed = undefined;\n    }\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (this.hasUpdated) {\n      this._subscribeLogbookPeriod(this._calculateLogbookPeriod());\n    }\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    this._unsubscribeSetLoading();\n  }\n\n  /** Unsubscribe because we are unloading\n   * or about to resubscribe.\n   * Setting this._logbookEntries to undefined\n   * will put the page in a loading state.\n   */\n  private _unsubscribeSetLoading() {\n    this._logbookEntries = undefined;\n    this._unsubscribe();\n  }\n\n  /** Unsubscribe because there are no results.\n   * Setting this._logbookEntries to an empty\n   * list will show a no results message.\n   */\n  private _unsubscribeNoResults() {\n    this._logbookEntries = [];\n    this._unsubscribe();\n  }\n\n  private _calculateLogbookPeriod() {\n    const now = new Date();\n    if (\"range\" in this.time) {\n      return <LogbookTimePeriod>{\n        now: now,\n        startTime: this.time.range[0],\n        endTime: this.time.range[1],\n        purgeBeforePythonTime: undefined,\n      };\n    }\n    if (\"recent\" in this.time) {\n      const purgeBeforePythonTime = findStartOfRecentTime(\n        now,\n        this.time.recent\n      );\n      return <LogbookTimePeriod>{\n        now: now,\n        startTime: new Date(purgeBeforePythonTime * 1000),\n        // end streaming one year from now\n        endTime: new Date(now.getTime() + 86400 * 365 * 1000),\n        purgeBeforePythonTime: findStartOfRecentTime(now, this.time.recent),\n      };\n    }\n    throw new Error(\"Unexpected time specified\");\n  }\n\n  private _subscribeLogbookPeriod(logbookPeriod: LogbookTimePeriod) {\n    if (this._subscribed) {\n      return true;\n    }\n    this._subscribed = subscribeLogbook(\n      this.hass,\n      (streamMessage) => {\n        // \"recent\" means start time is a sliding window\n        // so we need to calculate an expireTime to\n        // purge old events\n        if (!this._subscribed) {\n          // Message came in before we had a chance to unload\n          return;\n        }\n        this._processOrQueueStreamMessage(streamMessage);\n      },\n      logbookPeriod.startTime.toISOString(),\n      logbookPeriod.endTime.toISOString(),\n      ensureArray(this.entityIds),\n      ensureArray(this.deviceIds)\n    ).catch((err) => {\n      this._subscribed = undefined;\n      this._error = err;\n    });\n    return true;\n  }\n\n  private async _getLogBookData() {\n    this._error = undefined;\n\n    if (this._filterAlwaysEmptyResults) {\n      this._unsubscribeNoResults();\n      return;\n    }\n\n    const logbookPeriod = this._calculateLogbookPeriod();\n\n    if (logbookPeriod.startTime > logbookPeriod.now) {\n      // Time Travel not yet invented\n      this._unsubscribeNoResults();\n      return;\n    }\n\n    this._updateUsers();\n    if (this.hass.user?.is_admin) {\n      this._updateTraceContexts();\n    }\n\n    this._subscribeLogbookPeriod(logbookPeriod);\n  }\n\n  private _nonExpiredRecords = (purgeBeforePythonTime: number | undefined) =>\n    !this._logbookEntries\n      ? []\n      : purgeBeforePythonTime\n      ? this._logbookEntries.filter(\n          (entry) => entry.when > purgeBeforePythonTime!\n        )\n      : this._logbookEntries;\n\n  private _processOrQueueStreamMessage = (\n    streamMessage: LogbookStreamMessage\n  ) => {\n    if (this._liveUpdatesEnabled) {\n      this._processStreamMessage(streamMessage);\n      return;\n    }\n    this._pendingStreamMessages.push(streamMessage);\n  };\n\n  private _processStreamMessage = (streamMessage: LogbookStreamMessage) => {\n    const purgeBeforePythonTime =\n      \"recent\" in this.time\n        ? findStartOfRecentTime(new Date(), this.time.recent)\n        : undefined;\n    // Put newest ones on top. Reverse works in-place so\n    // make a copy first.\n    const newEntries = [...streamMessage.events].reverse();\n    if (!this._logbookEntries || !this._logbookEntries.length) {\n      this._logbookEntries = newEntries;\n      return;\n    }\n    if (!newEntries.length) {\n      // Empty messages are still sent to\n      // indicate no more historical events\n      return;\n    }\n    const nonExpiredRecords = this._nonExpiredRecords(purgeBeforePythonTime);\n\n    // Entries are sorted in descending order with newest first.\n    if (!nonExpiredRecords.length) {\n      // We have no records left, so we can just replace the list\n      this._logbookEntries = newEntries;\n    } else if (\n      newEntries[newEntries.length - 1].when > // oldest new entry\n      nonExpiredRecords[0].when // newest old entry\n    ) {\n      // The new records are newer than the old records\n      // append the old records to the end of the new records\n      this._logbookEntries = newEntries.concat(nonExpiredRecords);\n    } else if (\n      nonExpiredRecords[nonExpiredRecords.length - 1].when > // oldest old entry\n      newEntries[0].when // newest new entry\n    ) {\n      // The new records are older than the old records\n      // append the new records to the end of the old records\n      this._logbookEntries = nonExpiredRecords.concat(newEntries);\n    } else {\n      // The new records are in the middle of the old records\n      // so we need to re-sort them\n      this._logbookEntries = nonExpiredRecords\n        .concat(newEntries)\n        .sort((a, b) => b.when - a.when);\n    }\n  };\n\n  private _updateTraceContexts = throttle(async () => {\n    this._traceContexts = await loadTraceContexts(this.hass);\n  }, 60000);\n\n  private _updateUsers = throttle(async () => {\n    const userIdToName = {};\n\n    // Start loading users\n    const userProm = this.hass.user?.is_admin && fetchUsers(this.hass);\n\n    // Process persons\n    for (const entity of Object.values(this.hass.states)) {\n      if (\n        entity.attributes.user_id &&\n        computeStateDomain(entity) === \"person\"\n      ) {\n        userIdToName[entity.attributes.user_id] =\n          entity.attributes.friendly_name;\n      }\n    }\n\n    // Process users\n    if (userProm) {\n      const users = await userProm;\n      for (const user of users) {\n        if (!(user.id in userIdToName)) {\n          userIdToName[user.id] = user.name;\n        }\n      }\n    }\n\n    this._userIdToName = userIdToName;\n  }, 60000);\n\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: block;\n        }\n\n        :host([virtualize]) {\n          height: 100%;\n        }\n\n        .no-entries {\n          text-align: center;\n          padding: 16px;\n          color: var(--secondary-text-color);\n        }\n\n        .progress-wrapper {\n          display: flex;\n          justify-content: center;\n          height: 100%;\n          align-items: center;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-logbook\": HaLogbook;\n  }\n}\n"],"names":[],"sourceRoot":""}