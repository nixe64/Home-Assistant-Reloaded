{"version":3,"file":"37c036e5.js","mappings":";;AA4CA;;;AAMA;;AAEA;;;;;AAKA;;;;;AAKA;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAvCA;ACoBA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAjDA;;;;;;;;AAAA;;;;ACFA;;;;ACDA;ACgBA;AACA;;AAGA;;;;;;;AAQA;;AAGA;;AAxBA;AAgCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAhCA;;;;ACPA;ACOA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;;;;;;;;;;;;AChBA;;;;;;;;ACHA;;;;ACEA;;ACQA;;;;;;;;;;;;;;;;;;;;;;;;;AANA;;AC+BA;AACA;;AAEA;;AApCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkIA;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1GA;;AAEA;;;AAGA;AACA;;;;ACjBA;;AAEA;AACA;AAEA;AAGA;AAEA;;AAIA;;;AAKA;;;AAKA;AACA;AAGA;;;AAKA;AACA;AACA;;;;;;;;AASA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA1DA;ACGA;;AAEA;;AAEA;;AAEA;;;;;;;;;;;;;AAjBA;ACiCA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;;;AAKA;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AA9CA;;ACIA;;;;;;;;;;;AApBA;ACmCA;AACA;;AAEA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;AAtCA;;ACYA;;;;AAIA;;;;;;;;;;AAjBA;;;AC0MA;;;;;;AAMA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAOA;;AAWA;;;;;AAUA;;;;;AAKA;;AAGA;;;;;AAOA;;AAGA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;;AAKA;AACA;;;AAGA;;AAGA;AACA;AACA;AACA;AACA;;;;;;AAxHA;;;;;;;;;;;;;;;;AA/IA;AChBA;AACA;AAmBA;AACA;;AA8CA;;AAIA;;;;AAKA;;AAEA;AAKA;AASA;;;;AAKA;;AAEA;;AAGA;;AASA;AAeA;AACA;AAmBA;AACA","sources":["webpack://home-assistant-frontend/./src/components/ha-alert.ts","webpack://home-assistant-frontend/./src/components/ha-button-menu.ts","webpack://home-assistant-frontend/./src/components/ha-check-list-item.ts","webpack://home-assistant-frontend/./src/components/ha-checkbox.ts","webpack://home-assistant-frontend/./src/components/ha-chip.ts","webpack://home-assistant-frontend/./src/components/ha-circular-progress.ts","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-formfield.ts","webpack://home-assistant-frontend/./src/components/ha-input-helper-text.ts","webpack://home-assistant-frontend/./src/components/ha-radio.ts","webpack://home-assistant-frontend/./src/components/ha-select.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/step-flow-abort.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/step-flow-create-entry.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/step-flow-external.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/step-flow-form.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/step-flow-loading.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/step-flow-menu.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/step-flow-progress.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/dialog-data-entry-flow.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/show-dialog-config-flow.ts"],"sourcesContent":["import {\n  mdiAlertCircleOutline,\n  mdiAlertOutline,\n  mdiCheckboxMarkedCircleOutline,\n  mdiClose,\n  mdiInformationOutline,\n} from \"@mdi/js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-icon-button\";\nimport \"./ha-svg-icon\";\n\nconst ALERT_ICONS = {\n  info: mdiInformationOutline,\n  warning: mdiAlertOutline,\n  error: mdiAlertCircleOutline,\n  success: mdiCheckboxMarkedCircleOutline,\n};\n\ndeclare global {\n  interface HASSDomEvents {\n    \"alert-dismissed-clicked\": undefined;\n  }\n}\n\n@customElement(\"ha-alert\")\nclass HaAlert extends LitElement {\n  @property() public title = \"\";\n\n  @property({ attribute: \"alert-type\" }) public alertType:\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n    | \"success\" = \"info\";\n\n  @property({ type: Boolean }) public dismissable = false;\n\n  @property({ type: Boolean }) public rtl = false;\n\n  public render() {\n    return html`\n      <div\n        class=\"issue-type ${classMap({\n          rtl: this.rtl,\n          [this.alertType]: true,\n        })}\"\n        role=\"alert\"\n      >\n        <div class=\"icon ${this.title ? \"\" : \"no-title\"}\">\n          <slot name=\"icon\">\n            <ha-svg-icon .path=${ALERT_ICONS[this.alertType]}></ha-svg-icon>\n          </slot>\n        </div>\n        <div class=\"content\">\n          <div class=\"main-content\">\n            ${this.title ? html`<div class=\"title\">${this.title}</div>` : \"\"}\n            <slot></slot>\n          </div>\n          <div class=\"action\">\n            <slot name=\"action\">\n              ${this.dismissable\n                ? html`<ha-icon-button\n                    @click=${this._dismiss_clicked}\n                    label=\"Dismiss alert\"\n                    .path=${mdiClose}\n                  ></ha-icon-button>`\n                : \"\"}\n            </slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private _dismiss_clicked() {\n    fireEvent(this, \"alert-dismissed-clicked\");\n  }\n\n  static styles = css`\n    .issue-type {\n      position: relative;\n      padding: 8px;\n      display: flex;\n    }\n    .issue-type.rtl {\n      flex-direction: row-reverse;\n    }\n    .issue-type::after {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      opacity: 0.12;\n      pointer-events: none;\n      content: \"\";\n      border-radius: 4px;\n    }\n    .icon {\n      z-index: 1;\n    }\n    .icon.no-title {\n      align-self: center;\n    }\n    .issue-type.rtl > .content {\n      flex-direction: row-reverse;\n      text-align: right;\n    }\n    .content {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    }\n    .action {\n      z-index: 1;\n      width: min-content;\n      --mdc-theme-primary: var(--primary-text-color);\n    }\n    .main-content {\n      overflow-wrap: anywhere;\n      word-break: break-word;\n      margin-left: 8px;\n      margin-right: 0;\n    }\n    .issue-type.rtl > .content > .main-content {\n      margin-left: 0;\n      margin-right: 8px;\n    }\n    .title {\n      margin-top: 2px;\n      font-weight: bold;\n    }\n    .action mwc-button,\n    .action ha-icon-button {\n      --mdc-theme-primary: var(--primary-text-color);\n      --mdc-icon-button-size: 36px;\n    }\n    .issue-type.info > .icon {\n      color: var(--info-color);\n    }\n    .issue-type.info::after {\n      background-color: var(--info-color);\n    }\n\n    .issue-type.warning > .icon {\n      color: var(--warning-color);\n    }\n    .issue-type.warning::after {\n      background-color: var(--warning-color);\n    }\n\n    .issue-type.error > .icon {\n      color: var(--error-color);\n    }\n    .issue-type.error::after {\n      background-color: var(--error-color);\n    }\n\n    .issue-type.success > .icon {\n      color: var(--success-color);\n    }\n    .issue-type.success::after {\n      background-color: var(--success-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-alert\": HaAlert;\n  }\n}\n","import type { Button } from \"@material/mwc-button\";\nimport \"@material/mwc-menu\";\nimport type { Corner, Menu, MenuCorner } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HaIconButton } from \"./ha-icon-button\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  protected readonly [FOCUS_TARGET];\n\n  @property() public corner: Corner = \"TOP_START\";\n\n  @property() public menuCorner: MenuCorner = \"START\";\n\n  @property({ type: Number }) public x: number | null = null;\n\n  @property({ type: Number }) public y: number | null = null;\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  public override focus() {\n    if (this._menu?.open) {\n      this._menu.focusItemAtIndex(0);\n    } else {\n      this._triggerButton?.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\" @slotchange=${this._setTriggerAria}></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n\n    if (document.dir === \"rtl\") {\n      this.updateComplete.then(() => {\n        this.querySelectorAll(\"mwc-list-item\").forEach((item) => {\n          const style = document.createElement(\"style\");\n          style.innerHTML =\n            \"span.material-icons:first-of-type { margin-left: var(--mdc-list-item-graphic-margin, 32px) !important; margin-right: 0px !important;}\";\n          item!.shadowRoot!.appendChild(style);\n        });\n      });\n    }\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this;\n    this._menu!.show();\n  }\n\n  private get _triggerButton() {\n    return this.querySelector(\n      'ha-icon-button[slot=\"trigger\"], mwc-button[slot=\"trigger\"]'\n    ) as HaIconButton | Button | null;\n  }\n\n  private _setTriggerAria() {\n    if (this._triggerButton) {\n      this._triggerButton.ariaHasPopup = \"menu\";\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","import { css } from \"lit\";\nimport { CheckListItemBase } from \"@material/mwc-list/mwc-check-list-item-base\";\nimport { styles as controlStyles } from \"@material/mwc-list/mwc-control-list-item.css\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-check-list-item\")\nexport class HaCheckListItem extends CheckListItemBase {\n  static override styles = [\n    styles,\n    controlStyles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-check-list-item\": HaCheckListItem;\n  }\n}\n","import { CheckboxBase } from \"@material/mwc-checkbox/mwc-checkbox-base\";\nimport { styles } from \"@material/mwc-checkbox/mwc-checkbox.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends CheckboxBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n","// @ts-ignore\nimport chipStyles from \"@material/chips/dist/mdc.chips.min.css\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  TemplateResult,\n  unsafeCSS,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-chip\")\nexport class HaChip extends LitElement {\n  @property({ type: Boolean }) public hasIcon = false;\n\n  @property({ type: Boolean }) public hasTrailingIcon = false;\n\n  @property({ type: Boolean }) public noText = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"mdc-chip ${this.noText ? \"no-text\" : \"\"}\">\n        ${this.hasIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--leading\">\n              <slot name=\"icon\"></slot>\n            </div>`\n          : null}\n        <div class=\"mdc-chip__ripple\"></div>\n        <span role=\"gridcell\">\n          <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n            <span class=\"mdc-chip__text\"><slot></slot></span>\n          </span>\n        </span>\n        ${this.hasTrailingIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--trailing\">\n              <slot name=\"trailing-icon\"></slot>\n            </div>`\n          : null}\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ${unsafeCSS(chipStyles)}\n      .mdc-chip {\n        background-color: var(\n          --ha-chip-background-color,\n          rgba(var(--rgb-primary-text-color), 0.15)\n        );\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip.no-text {\n        padding: 0 10px;\n      }\n\n      .mdc-chip:hover {\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip__icon--leading,\n      .mdc-chip__icon--trailing {\n        --mdc-icon-size: 18px;\n        line-height: 14px;\n        color: var(--ha-chip-icon-color, var(--ha-chip-text-color));\n      }\n      .mdc-chip.mdc-chip--selected .mdc-chip__checkmark,\n      .mdc-chip .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden) {\n        margin-right: -4px;\n        margin-inline-start: -4px;\n        margin-inline-end: 4px;\n        direction: var(--direction);\n      }\n\n      span[role=\"gridcell\"] {\n        line-height: 14px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-chip\": HaChip;\n  }\n}\n","import { CircularProgress } from \"@material/mwc-circular-progress\";\nimport { CSSResultGroup, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-circular-progress\")\n// @ts-ignore\nexport class HaCircularProgress extends CircularProgress {\n  @property({ type: Boolean })\n  public active = false;\n\n  @property()\n  public alt = \"Loading\";\n\n  @property()\n  public size: \"tiny\" | \"small\" | \"medium\" | \"large\" = \"medium\";\n\n  // @ts-ignore\n  public set density(_) {\n    // just a dummy\n  }\n\n  public get density() {\n    switch (this.size) {\n      case \"tiny\":\n        return -8;\n      case \"small\":\n        return -5;\n      case \"medium\":\n        return 0;\n      case \"large\":\n        return 5;\n      default:\n        return 0;\n    }\n  }\n\n  // @ts-ignore\n  public set indeterminate(_) {\n    // just a dummy\n  }\n\n  public get indeterminate() {\n    return this.active;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      super.styles,\n      css`\n        :host {\n          overflow: hidden;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-circular-progress\": HaCircularProgress;\n  }\n}\n","import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { FormfieldBase } from \"@material/mwc-formfield/mwc-formfield-base\";\nimport { styles } from \"@material/mwc-formfield/mwc-formfield.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-formfield\")\nexport class HaFormfield extends FormfieldBase {\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      switch (input.tagName) {\n        case \"HA-CHECKBOX\":\n        case \"HA-RADIO\":\n          if ((input as any).disabled) {\n            break;\n          }\n          (input as any).checked = !(input as any).checked;\n          fireEvent(input, \"change\");\n          break;\n        default:\n          input.click();\n          break;\n      }\n    }\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host(:not([alignEnd])) ::slotted(ha-switch) {\n        margin-right: 10px;\n        margin-inline-end: 10px;\n        margin-inline-start: inline;\n      }\n      .mdc-form-field > label {\n        direction: var(--direction);\n        margin-inline-start: 0;\n        margin-inline-end: auto;\n        padding-inline-start: 4px;\n        padding-inline-end: 0;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-input-helper-text\")\nclass InputHelperText extends LitElement {\n  protected render(): TemplateResult {\n    return html`<slot></slot>`;\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n      color: var(--mdc-text-field-label-ink-color, rgba(0, 0, 0, 0.6));\n      font-size: 0.75rem;\n      padding-left: 16px;\n      padding-right: 16px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input-helper-text\": InputHelperText;\n  }\n}\n","import { RadioBase } from \"@material/mwc-radio/mwc-radio-base\";\nimport { styles } from \"@material/mwc-radio/mwc-radio.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-radio\")\nexport class HaRadio extends RadioBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-radio\": HaRadio;\n  }\n}\n","import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-select:not(.mdc-select--disabled) .mdc-select__icon {\n        color: var(--secondary-text-color);\n      }\n      .mdc-select__anchor {\n        width: var(--ha-select-min-width, 200px);\n      }\n      .mdc-select--filled .mdc-floating-label {\n        inset-inline-start: 12px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select--filled.mdc-select--with-leading-icon .mdc-floating-label {\n        inset-inline-start: 48px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select .mdc-select__anchor {\n        padding-inline-start: 12px;\n        padding-inline-end: 0px;\n        direction: var(--direction);\n      }\n      .mdc-select__anchor .mdc-floating-label--float-above {\n        transform-origin: var(--float-start);\n      }\n    `,\n  ];\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing?: boolean;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 12px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n        direction: var(--direction);\n      }\n      .mdc-text-field--with-leading-icon {\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 16px);\n        direction: var(--direction);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon--leading {\n        margin-inline-start: 16px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      .mdc-floating-label:not(.mdc-floating-label--float-above) {\n        text-overflow: ellipsis;\n        width: inherit;\n        padding-right: 30px;\n        box-sizing: border-box;\n      }\n\n      input {\n        text-align: var(--text-field-text-align, start);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start);\n        direction: var(--direction);\n        transform-origin: var(--float-start);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--filled\n        .mdc-floating-label {\n        max-width: calc(100% - 48px);\n        inset-inline-start: 48px !important;\n        inset-inline-end: initial !important;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__input[type=\"number\"] {\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          .mdc-text-field__affix--suffix,\n          .mdc-text-field--with-leading-icon,\n          .mdc-text-field__icon--leading,\n          .mdc-floating-label,\n          .mdc-text-field--with-leading-icon.mdc-text-field--filled\n            .mdc-floating-label,\n          .mdc-text-field__input[type=\"number\"] {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import \"@material/mwc-button\";\nimport {\n  CSSResultGroup,\n  html,\n  LitElement,\n  TemplateResult,\n  PropertyValues,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { DataEntryFlowStepAbort } from \"../../data/data_entry_flow\";\nimport { HomeAssistant } from \"../../types\";\nimport { showAddApplicationCredentialDialog } from \"../../panels/config/application_credentials/show-dialog-add-application-credential\";\nimport { configFlowContentStyles } from \"./styles\";\nimport { DataEntryFlowDialogParams } from \"./show-dialog-data-entry-flow\";\nimport { showConfigFlowDialog } from \"./show-dialog-config-flow\";\nimport { domainToName } from \"../../data/integration\";\nimport { showConfirmationDialog } from \"../generic/show-dialog-box\";\n\n@customElement(\"step-flow-abort\")\nclass StepFlowAbort extends LitElement {\n  @property({ attribute: false }) public params!: DataEntryFlowDialogParams;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public step!: DataEntryFlowStepAbort;\n\n  @property({ attribute: false }) public domain!: string;\n\n  protected firstUpdated(changed: PropertyValues) {\n    super.firstUpdated(changed);\n    if (this.step.reason === \"missing_credentials\") {\n      this._handleMissingCreds();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (this.step.reason === \"missing_credentials\") {\n      return html``;\n    }\n    return html`\n      <h2>${this.hass.localize(`component.${this.domain}.title`)}</h2>\n      <div class=\"content\">\n        ${this.params.flowConfig.renderAbortDescription(this.hass, this.step)}\n      </div>\n      <div class=\"buttons\">\n        <mwc-button @click=${this._flowDone}\n          >${this.hass.localize(\n            \"ui.panel.config.integrations.config_flow.close\"\n          )}</mwc-button\n        >\n      </div>\n    `;\n  }\n\n  private async _handleMissingCreds() {\n    const confirm = await showConfirmationDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.integrations.config_flow.missing_credentials_title\"\n      ),\n      text: this.hass.localize(\n        \"ui.panel.config.integrations.config_flow.missing_credentials\",\n        {\n          integration: domainToName(this.hass.localize, this.domain),\n        }\n      ),\n      confirmText: this.hass.localize(\"ui.common.yes\"),\n      dismissText: this.hass.localize(\"ui.common.no\"),\n    });\n    this._flowDone();\n    if (!confirm) {\n      return;\n    }\n    // Prompt to enter credentials and restart integration setup\n    showAddApplicationCredentialDialog(this.params.dialogParentElement!, {\n      selectedDomain: this.domain,\n      applicationCredentialAddedCallback: () => {\n        showConfigFlowDialog(this.params.dialogParentElement!, {\n          dialogClosedCallback: this.params.dialogClosedCallback,\n          startFlowHandler: this.domain,\n          showAdvanced: this.hass.userData?.showAdvanced,\n        });\n      },\n    });\n  }\n\n  private _flowDone(): void {\n    fireEvent(this, \"flow-update\", { step: undefined });\n  }\n\n  static get styles(): CSSResultGroup {\n    return configFlowContentStyles;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"step-flow-abort\": StepFlowAbort;\n  }\n}\n","import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-area-picker\";\nimport { DataEntryFlowStepCreateEntry } from \"../../data/data_entry_flow\";\nimport {\n  computeDeviceName,\n  DeviceRegistryEntry,\n  updateDeviceRegistryEntry,\n} from \"../../data/device_registry\";\nimport { HomeAssistant } from \"../../types\";\nimport { showAlertDialog } from \"../generic/show-dialog-box\";\nimport { FlowConfig } from \"./show-dialog-data-entry-flow\";\nimport { configFlowContentStyles } from \"./styles\";\n\n@customElement(\"step-flow-create-entry\")\nclass StepFlowCreateEntry extends LitElement {\n  @property({ attribute: false }) public flowConfig!: FlowConfig;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public step!: DataEntryFlowStepCreateEntry;\n\n  @property({ attribute: false }) public devices!: DeviceRegistryEntry[];\n\n  protected render(): TemplateResult {\n    const localize = this.hass.localize;\n\n    return html`\n      <h2>${localize(\"ui.panel.config.integrations.config_flow.success\")}!</h2>\n      <div class=\"content\">\n        ${this.flowConfig.renderCreateEntryDescription(this.hass, this.step)}\n        ${this.step.result?.state === \"not_loaded\"\n          ? html`<span class=\"error\"\n              >${localize(\n                \"ui.panel.config.integrations.config_flow.not_loaded\"\n              )}</span\n            >`\n          : \"\"}\n        ${this.devices.length === 0\n          ? \"\"\n          : html`\n              <p>\n                ${localize(\n                  \"ui.panel.config.integrations.config_flow.found_following_devices\"\n                )}:\n              </p>\n              <div class=\"devices\">\n                ${this.devices.map(\n                  (device) =>\n                    html`\n                      <div class=\"device\">\n                        <div>\n                          <b>${computeDeviceName(device, this.hass)}</b><br />\n                          ${!device.model && !device.manufacturer\n                            ? html`&nbsp;`\n                            : html`${device.model}\n                              ${device.manufacturer\n                                ? html`(${device.manufacturer})`\n                                : \"\"}`}\n                        </div>\n                        <ha-area-picker\n                          .hass=${this.hass}\n                          .device=${device.id}\n                          @value-changed=${this._areaPicked}\n                        ></ha-area-picker>\n                      </div>\n                    `\n                )}\n              </div>\n            `}\n      </div>\n      <div class=\"buttons\">\n        <mwc-button @click=${this._flowDone}\n          >${localize(\n            \"ui.panel.config.integrations.config_flow.finish\"\n          )}</mwc-button\n        >\n      </div>\n    `;\n  }\n\n  private _flowDone(): void {\n    fireEvent(this, \"flow-update\", { step: undefined });\n  }\n\n  private async _areaPicked(ev: CustomEvent) {\n    const picker = ev.currentTarget as any;\n    const device = picker.device;\n\n    const area = ev.detail.value;\n    try {\n      await updateDeviceRegistryEntry(this.hass, device, {\n        area_id: area,\n      });\n    } catch (err: any) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.config.integrations.config_flow.error_saving_area\",\n          \"error\",\n          err.message\n        ),\n      });\n      picker.value = null;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      configFlowContentStyles,\n      css`\n        .devices {\n          display: flex;\n          flex-wrap: wrap;\n          margin: -4px;\n          max-height: 600px;\n          overflow-y: auto;\n        }\n        .device {\n          border: 1px solid var(--divider-color);\n          padding: 5px;\n          border-radius: 4px;\n          margin: 4px;\n          display: inline-block;\n          width: 250px;\n        }\n        .buttons > *:last-child {\n          margin-left: auto;\n        }\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          .device {\n            width: 100%;\n          }\n        }\n        .error {\n          color: var(--error-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"step-flow-create-entry\": StepFlowCreateEntry;\n  }\n}\n","import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { DataEntryFlowStepExternal } from \"../../data/data_entry_flow\";\nimport { HomeAssistant } from \"../../types\";\nimport { FlowConfig } from \"./show-dialog-data-entry-flow\";\nimport { configFlowContentStyles } from \"./styles\";\n\n@customElement(\"step-flow-external\")\nclass StepFlowExternal extends LitElement {\n  @property({ attribute: false }) public flowConfig!: FlowConfig;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public step!: DataEntryFlowStepExternal;\n\n  protected render(): TemplateResult {\n    const localize = this.hass.localize;\n\n    return html`\n      <h2>${this.flowConfig.renderExternalStepHeader(this.hass, this.step)}</h2>\n      <div class=\"content\">\n        ${this.flowConfig.renderExternalStepDescription(this.hass, this.step)}\n        <div class=\"open-button\">\n          <a href=${this.step.url} target=\"_blank\" rel=\"noreferrer\">\n            <mwc-button raised>\n              ${localize(\n                \"ui.panel.config.integrations.config_flow.external_step.open_site\"\n              )}\n            </mwc-button>\n          </a>\n        </div>\n      </div>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    window.open(this.step.url);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      configFlowContentStyles,\n      css`\n        .open-button {\n          text-align: center;\n          padding: 24px 0;\n        }\n        .open-button a {\n          text-decoration: none;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"step-flow-external\": StepFlowExternal;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-alert\";\nimport \"../../components/ha-circular-progress\";\nimport { computeInitialHaFormData } from \"../../components/ha-form/compute-initial-ha-form-data\";\nimport \"../../components/ha-form/ha-form\";\nimport type { HaFormSchema } from \"../../components/ha-form/types\";\nimport \"../../components/ha-markdown\";\nimport type { DataEntryFlowStepForm } from \"../../data/data_entry_flow\";\nimport type { HomeAssistant } from \"../../types\";\nimport type { FlowConfig } from \"./show-dialog-data-entry-flow\";\nimport { configFlowContentStyles } from \"./styles\";\n\n@customElement(\"step-flow-form\")\nclass StepFlowForm extends LitElement {\n  @property({ attribute: false }) public flowConfig!: FlowConfig;\n\n  @property({ attribute: false }) public step!: DataEntryFlowStepForm;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _loading = false;\n\n  @state() private _stepData?: Record<string, any>;\n\n  @state() private _errorMsg?: string;\n\n  protected render(): TemplateResult {\n    const step = this.step;\n    const stepData = this._stepDataProcessed;\n\n    return html`\n      <h2>${this.flowConfig.renderShowFormStepHeader(this.hass, this.step)}</h2>\n      <div class=\"content\">\n        ${this.flowConfig.renderShowFormStepDescription(this.hass, this.step)}\n        ${this._errorMsg\n          ? html`<ha-alert alert-type=\"error\">${this._errorMsg}</ha-alert>`\n          : \"\"}\n        <ha-form\n          .hass=${this.hass}\n          .data=${stepData}\n          .disabled=${this._loading}\n          @value-changed=${this._stepDataChanged}\n          .schema=${step.data_schema}\n          .error=${step.errors}\n          .computeLabel=${this._labelCallback}\n          .computeHelper=${this._helperCallback}\n          .computeError=${this._errorCallback}\n        ></ha-form>\n      </div>\n      <div class=\"buttons\">\n        ${this._loading\n          ? html`\n              <div class=\"submit-spinner\">\n                <ha-circular-progress active></ha-circular-progress>\n              </div>\n            `\n          : html`\n              <div>\n                <mwc-button @click=${this._submitStep}>\n                  ${this.hass.localize(\n                    `ui.panel.config.integrations.config_flow.${\n                      this.step.last_step === false ? \"next\" : \"submit\"\n                    }`\n                  )}\n                </mwc-button>\n              </div>\n            `}\n      </div>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    setTimeout(() => this.shadowRoot!.querySelector(\"ha-form\")!.focus(), 0);\n    this.addEventListener(\"keypress\", (ev) => {\n      if (ev.keyCode === 13) {\n        this._submitStep();\n      }\n    });\n  }\n\n  private get _stepDataProcessed() {\n    if (this._stepData !== undefined) {\n      return this._stepData;\n    }\n\n    this._stepData = computeInitialHaFormData(this.step.data_schema);\n    return this._stepData;\n  }\n\n  private async _submitStep(): Promise<void> {\n    const stepData = this._stepData || {};\n\n    const allRequiredInfoFilledIn =\n      stepData === undefined\n        ? // If no data filled in, just check that any field is required\n          this.step.data_schema.find((field) => field.required) === undefined\n        : // If data is filled in, make sure all required fields are\n          stepData &&\n          this.step.data_schema.every(\n            (field) =>\n              !field.required ||\n              ![\"\", undefined].includes(stepData![field.name])\n          );\n\n    if (!allRequiredInfoFilledIn) {\n      this._errorMsg = this.hass.localize(\n        \"ui.panel.config.integrations.config_flow.not_all_required_fields\"\n      );\n      return;\n    }\n\n    this._loading = true;\n    this._errorMsg = undefined;\n\n    const flowId = this.step.flow_id;\n\n    const toSendData = {};\n    Object.keys(stepData).forEach((key) => {\n      const value = stepData[key];\n      const isEmpty = [undefined, \"\"].includes(value);\n\n      if (!isEmpty) {\n        toSendData[key] = value;\n      }\n    });\n\n    try {\n      const step = await this.flowConfig.handleFlowStep(\n        this.hass,\n        this.step.flow_id,\n        toSendData\n      );\n\n      // make sure we're still showing the same step as when we\n      // fired off request.\n      if (!this.step || flowId !== this.step.flow_id) {\n        return;\n      }\n\n      fireEvent(this, \"flow-update\", {\n        step,\n      });\n    } catch (err: any) {\n      this._errorMsg =\n        (err && err.body && err.body.message) || \"Unknown error occurred\";\n    } finally {\n      this._loading = false;\n    }\n  }\n\n  private _stepDataChanged(ev: CustomEvent): void {\n    this._stepData = ev.detail.value;\n  }\n\n  private _labelCallback = (field: HaFormSchema): string =>\n    this.flowConfig.renderShowFormStepFieldLabel(this.hass, this.step, field);\n\n  private _helperCallback = (field: HaFormSchema): string | TemplateResult =>\n    this.flowConfig.renderShowFormStepFieldHelper(this.hass, this.step, field);\n\n  private _errorCallback = (error: string) =>\n    this.flowConfig.renderShowFormStepFieldError(this.hass, this.step, error);\n\n  static get styles(): CSSResultGroup {\n    return [\n      configFlowContentStyles,\n      css`\n        .error {\n          color: red;\n        }\n\n        .submit-spinner {\n          margin-right: 16px;\n        }\n\n        ha-alert,\n        ha-form {\n          margin-top: 24px;\n          display: block;\n        }\n        h2 {\n          word-break: break-word;\n          padding-inline-end: 72px;\n          direction: var(--direction);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"step-flow-form\": StepFlowForm;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../components/ha-circular-progress\";\nimport { DataEntryFlowStep } from \"../../data/data_entry_flow\";\nimport { HomeAssistant } from \"../../types\";\nimport { FlowConfig, LoadingReason } from \"./show-dialog-data-entry-flow\";\n\n@customElement(\"step-flow-loading\")\nclass StepFlowLoading extends LitElement {\n  @property({ attribute: false }) public flowConfig!: FlowConfig;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public loadingReason!: LoadingReason;\n\n  @property() public handler?: string;\n\n  @property({ attribute: false }) public step?: DataEntryFlowStep | null;\n\n  protected render(): TemplateResult {\n    const description = this.flowConfig.renderLoadingDescription(\n      this.hass,\n      this.loadingReason,\n      this.handler,\n      this.step\n    );\n    return html`\n      <div class=\"init-spinner\">\n        ${description ? html`<div>${description}</div>` : \"\"}\n        <ha-circular-progress active></ha-circular-progress>\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .init-spinner {\n        padding: 50px 100px;\n        text-align: center;\n      }\n      ha-circular-progress {\n        margin-top: 16px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"step-flow-loading\": StepFlowLoading;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { DataEntryFlowStepMenu } from \"../../data/data_entry_flow\";\nimport type { HomeAssistant } from \"../../types\";\nimport type { FlowConfig } from \"./show-dialog-data-entry-flow\";\nimport \"../../components/ha-icon-next\";\nimport { configFlowContentStyles } from \"./styles\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\n\n@customElement(\"step-flow-menu\")\nclass StepFlowMenu extends LitElement {\n  @property({ attribute: false }) public flowConfig!: FlowConfig;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public step!: DataEntryFlowStepMenu;\n\n  protected render(): TemplateResult {\n    let options: string[];\n    let translations: Record<string, string>;\n\n    if (Array.isArray(this.step.menu_options)) {\n      options = this.step.menu_options;\n      translations = {};\n      for (const option of options) {\n        translations[option] = this.flowConfig.renderMenuOption(\n          this.hass,\n          this.step,\n          option\n        );\n      }\n    } else {\n      options = Object.keys(this.step.menu_options);\n      translations = this.step.menu_options;\n    }\n\n    const description = this.flowConfig.renderMenuDescription(\n      this.hass,\n      this.step\n    );\n\n    return html`\n      <h2>${this.flowConfig.renderMenuHeader(this.hass, this.step)}</h2>\n      ${description ? html`<div class=\"content\">${description}</div>` : \"\"}\n      <div class=\"options\">\n        ${options.map(\n          (option) => html`\n            <mwc-list-item hasMeta .step=${option} @click=${this._handleStep}>\n              <span>${translations[option]}</span>\n              <ha-icon-next slot=\"meta\"></ha-icon-next>\n            </mwc-list-item>\n          `\n        )}\n      </div>\n    `;\n  }\n\n  private _handleStep(ev) {\n    fireEvent(this, \"flow-update\", {\n      stepPromise: this.flowConfig.handleFlowStep(\n        this.hass,\n        this.step.flow_id,\n        {\n          next_step_id: ev.currentTarget.step,\n        }\n      ),\n    });\n  }\n\n  static styles = [\n    configFlowContentStyles,\n    css`\n      .options {\n        margin-top: 20px;\n        margin-bottom: 8px;\n      }\n      .content {\n        padding-bottom: 16px;\n        border-bottom: 1px solid var(--divider-color);\n      }\n      .content + .options {\n        margin-top: 8px;\n      }\n      mwc-list-item {\n        --mdc-list-side-padding: 24px;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"step-flow-menu\": StepFlowMenu;\n  }\n}\n","import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../components/ha-circular-progress\";\nimport { DataEntryFlowStepProgress } from \"../../data/data_entry_flow\";\nimport { HomeAssistant } from \"../../types\";\nimport { FlowConfig } from \"./show-dialog-data-entry-flow\";\nimport { configFlowContentStyles } from \"./styles\";\n\n@customElement(\"step-flow-progress\")\nclass StepFlowProgress extends LitElement {\n  @property({ attribute: false })\n  public flowConfig!: FlowConfig;\n\n  @property({ attribute: false })\n  public hass!: HomeAssistant;\n\n  @property({ attribute: false })\n  public step!: DataEntryFlowStepProgress;\n\n  protected render(): TemplateResult {\n    return html`\n      <h2>\n        ${this.flowConfig.renderShowFormProgressHeader(this.hass, this.step)}\n      </h2>\n      <div class=\"content\">\n        <ha-circular-progress active></ha-circular-progress>\n        ${this.flowConfig.renderShowFormProgressDescription(\n          this.hass,\n          this.step\n        )}\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      configFlowContentStyles,\n      css`\n        .content {\n          padding: 50px 100px;\n          text-align: center;\n        }\n        ha-circular-progress {\n          margin-bottom: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"step-flow-progress\": StepFlowProgress;\n  }\n}\n","import \"@material/mwc-button\";\nimport { mdiClose, mdiHelpCircle } from \"@mdi/js\";\nimport type { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, state } from \"lit/decorators\";\nimport { fireEvent, HASSDomEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-circular-progress\";\nimport \"../../components/ha-dialog\";\nimport \"../../components/ha-icon-button\";\nimport {\n  AreaRegistryEntry,\n  subscribeAreaRegistry,\n} from \"../../data/area_registry\";\nimport {\n  DataEntryFlowStep,\n  subscribeDataEntryFlowProgressed,\n} from \"../../data/data_entry_flow\";\nimport {\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n} from \"../../data/device_registry\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport type { HomeAssistant } from \"../../types\";\nimport { documentationUrl } from \"../../util/documentation-url\";\nimport { showAlertDialog } from \"../generic/show-dialog-box\";\nimport {\n  DataEntryFlowDialogParams,\n  LoadingReason,\n} from \"./show-dialog-data-entry-flow\";\nimport \"./step-flow-abort\";\nimport \"./step-flow-create-entry\";\nimport \"./step-flow-external\";\nimport \"./step-flow-form\";\nimport \"./step-flow-loading\";\nimport \"./step-flow-menu\";\nimport \"./step-flow-progress\";\n\nlet instance = 0;\n\ninterface FlowUpdateEvent {\n  step?: DataEntryFlowStep;\n  stepPromise?: Promise<DataEntryFlowStep>;\n}\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"flow-update\": FlowUpdateEvent;\n  }\n  // for add event listener\n  interface HTMLElementEventMap {\n    \"flow-update\": HASSDomEvent<FlowUpdateEvent>;\n  }\n}\n\n@customElement(\"dialog-data-entry-flow\")\nclass DataEntryFlowDialog extends LitElement {\n  public hass!: HomeAssistant;\n\n  @state() private _params?: DataEntryFlowDialogParams;\n\n  @state() private _loading?: LoadingReason;\n\n  private _instance = instance;\n\n  @state() private _step:\n    | DataEntryFlowStep\n    | undefined\n    // Null means we need to pick a config flow\n    | null;\n\n  @state() private _devices?: DeviceRegistryEntry[];\n\n  @state() private _areas?: AreaRegistryEntry[];\n\n  @state() private _handler?: string;\n\n  private _unsubAreas?: UnsubscribeFunc;\n\n  private _unsubDevices?: UnsubscribeFunc;\n\n  private _unsubDataEntryFlowProgressed?: Promise<UnsubscribeFunc>;\n\n  public async showDialog(params: DataEntryFlowDialogParams): Promise<void> {\n    this._params = params;\n    this._instance = instance++;\n\n    const curInstance = this._instance;\n    let step: DataEntryFlowStep;\n\n    if (params.startFlowHandler) {\n      this._loading = \"loading_flow\";\n      this._handler = params.startFlowHandler;\n      try {\n        step = await this._params!.flowConfig.createFlow(\n          this.hass,\n          params.startFlowHandler\n        );\n      } catch (err: any) {\n        this.closeDialog();\n        let message = err.message || err.body || \"Unknown error\";\n        if (typeof message !== \"string\") {\n          message = JSON.stringify(message);\n        }\n        showAlertDialog(this, {\n          title: this.hass.localize(\n            \"ui.panel.config.integrations.config_flow.error\"\n          ),\n          text: `${this.hass.localize(\n            \"ui.panel.config.integrations.config_flow.could_not_load\"\n          )}: ${message}`,\n        });\n        return;\n      }\n      // Happens if second showDialog called\n      if (curInstance !== this._instance) {\n        return;\n      }\n    } else if (params.continueFlowId) {\n      this._loading = \"loading_flow\";\n      try {\n        step = await params.flowConfig.fetchFlow(\n          this.hass,\n          params.continueFlowId\n        );\n      } catch (err: any) {\n        this.closeDialog();\n        let message = err.message || err.body || \"Unknown error\";\n        if (typeof message !== \"string\") {\n          message = JSON.stringify(message);\n        }\n        showAlertDialog(this, {\n          title: this.hass.localize(\n            \"ui.panel.config.integrations.config_flow.error\"\n          ),\n          text: `${this.hass.localize(\n            \"ui.panel.config.integrations.config_flow.could_not_load\"\n          )}: ${message}`,\n        });\n        return;\n      }\n    } else {\n      return;\n    }\n\n    // Happens if second showDialog called\n    if (curInstance !== this._instance) {\n      return;\n    }\n\n    this._processStep(step);\n    this._loading = undefined;\n  }\n\n  public closeDialog() {\n    if (!this._params) {\n      return;\n    }\n    const flowFinished = Boolean(\n      this._step && [\"create_entry\", \"abort\"].includes(this._step.type)\n    );\n\n    // If we created this flow, delete it now.\n    if (this._step && !flowFinished && !this._params.continueFlowId) {\n      this._params.flowConfig.deleteFlow(this.hass, this._step.flow_id);\n    }\n\n    if (this._step && this._params.dialogClosedCallback) {\n      this._params.dialogClosedCallback({\n        flowFinished,\n        entryId:\n          \"result\" in this._step ? this._step.result?.entry_id : undefined,\n      });\n    }\n\n    this._loading = undefined;\n    this._step = undefined;\n    this._params = undefined;\n    this._devices = undefined;\n    this._handler = undefined;\n    if (this._unsubAreas) {\n      this._unsubAreas();\n      this._unsubAreas = undefined;\n    }\n    if (this._unsubDevices) {\n      this._unsubDevices();\n      this._unsubDevices = undefined;\n    }\n    if (this._unsubDataEntryFlowProgressed) {\n      this._unsubDataEntryFlowProgressed.then((unsub) => {\n        unsub();\n      });\n      this._unsubDataEntryFlowProgressed = undefined;\n    }\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        scrimClickAction\n        escapeKeyAction\n        hideActions\n      >\n        <div>\n          ${this._loading || this._step === null\n            ? html`\n                <step-flow-loading\n                  .flowConfig=${this._params.flowConfig}\n                  .hass=${this.hass}\n                  .loadingReason=${this._loading}\n                  .handler=${this._handler}\n                  .step=${this._step}\n                ></step-flow-loading>\n              `\n            : this._step === undefined\n            ? // When we are going to next step, we render 1 round of empty\n              // to reset the element.\n              \"\"\n            : html`\n                <div class=\"dialog-actions\">\n                  ${([\n                    \"form\",\n                    \"menu\",\n                    \"external\",\n                    \"progress\",\n                    \"data_entry_flow_progressed\",\n                  ].includes(this._step?.type as any) &&\n                    this._params.manifest?.is_built_in) ||\n                  this._params.manifest?.documentation\n                    ? html`\n                        <a\n                          href=${this._params.manifest.is_built_in\n                            ? documentationUrl(\n                                this.hass,\n                                `/integrations/${this._params.manifest.domain}`\n                              )\n                            : this._params?.manifest?.documentation}\n                          target=\"_blank\"\n                          rel=\"noreferrer noopener\"\n                        >\n                          <ha-icon-button\n                            .label=${this.hass.localize(\"ui.common.help\")}\n                            .path=${mdiHelpCircle}\n                          >\n                          </ha-icon-button\n                        ></a>\n                      `\n                    : \"\"}\n                  <ha-icon-button\n                    .label=${this.hass.localize(\n                      \"ui.panel.config.integrations.config_flow.dismiss\"\n                    )}\n                    .path=${mdiClose}\n                    dialogAction=\"close\"\n                  ></ha-icon-button>\n                </div>\n                ${this._step.type === \"form\"\n                  ? html`\n                      <step-flow-form\n                        .flowConfig=${this._params.flowConfig}\n                        .step=${this._step}\n                        .hass=${this.hass}\n                      ></step-flow-form>\n                    `\n                  : this._step.type === \"external\"\n                  ? html`\n                      <step-flow-external\n                        .flowConfig=${this._params.flowConfig}\n                        .step=${this._step}\n                        .hass=${this.hass}\n                      ></step-flow-external>\n                    `\n                  : this._step.type === \"abort\"\n                  ? html`\n                      <step-flow-abort\n                        .params=${this._params}\n                        .step=${this._step}\n                        .hass=${this.hass}\n                        .domain=${this._step.handler}\n                      ></step-flow-abort>\n                    `\n                  : this._step.type === \"progress\"\n                  ? html`\n                      <step-flow-progress\n                        .flowConfig=${this._params.flowConfig}\n                        .step=${this._step}\n                        .hass=${this.hass}\n                      ></step-flow-progress>\n                    `\n                  : this._step.type === \"menu\"\n                  ? html`\n                      <step-flow-menu\n                        .flowConfig=${this._params.flowConfig}\n                        .step=${this._step}\n                        .hass=${this.hass}\n                      ></step-flow-menu>\n                    `\n                  : this._devices === undefined || this._areas === undefined\n                  ? // When it's a create entry result, we will fetch device & area registry\n                    html`\n                      <step-flow-loading\n                        .flowConfig=${this._params.flowConfig}\n                        .hass=${this.hass}\n                        loadingReason=\"loading_devices_areas\"\n                      ></step-flow-loading>\n                    `\n                  : html`\n                      <step-flow-create-entry\n                        .flowConfig=${this._params.flowConfig}\n                        .step=${this._step}\n                        .hass=${this.hass}\n                        .devices=${this._devices}\n                        .areas=${this._areas}\n                      ></step-flow-create-entry>\n                    `}\n              `}\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this.addEventListener(\"flow-update\", (ev) => {\n      const { step, stepPromise } = ev.detail;\n      this._processStep(step || stepPromise);\n    });\n  }\n\n  public willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n    if (!changedProps.has(\"_step\") || !this._step) {\n      return;\n    }\n    if ([\"external\", \"progress\"].includes(this._step.type)) {\n      // external and progress step will send update event from the backend, so we should subscribe to them\n      this._subscribeDataEntryFlowProgressed();\n    }\n    if (this._step.type === \"create_entry\") {\n      if (this._step.result && this._params!.flowConfig.loadDevicesAndAreas) {\n        this._fetchDevices(this._step.result.entry_id);\n        this._fetchAreas();\n      } else {\n        this._devices = [];\n        this._areas = [];\n      }\n    }\n  }\n\n  private async _fetchDevices(configEntryId) {\n    this._unsubDevices = subscribeDeviceRegistry(\n      this.hass.connection,\n      (devices) => {\n        this._devices = devices.filter((device) =>\n          device.config_entries.includes(configEntryId)\n        );\n      }\n    );\n  }\n\n  private async _fetchAreas() {\n    this._unsubAreas = subscribeAreaRegistry(this.hass.connection, (areas) => {\n      this._areas = areas;\n    });\n  }\n\n  private async _processStep(\n    step: DataEntryFlowStep | undefined | Promise<DataEntryFlowStep>\n  ): Promise<void> {\n    if (step instanceof Promise) {\n      this._loading = \"loading_step\";\n      try {\n        this._step = await step;\n      } catch (err: any) {\n        this.closeDialog();\n        showAlertDialog(this, {\n          title: this.hass.localize(\n            \"ui.panel.config.integrations.config_flow.error\"\n          ),\n          text: err?.body?.message,\n        });\n        return;\n      } finally {\n        this._loading = undefined;\n      }\n      return;\n    }\n\n    if (step === undefined) {\n      this.closeDialog();\n      return;\n    }\n    this._step = undefined;\n    await this.updateComplete;\n    this._step = step;\n  }\n\n  private _subscribeDataEntryFlowProgressed() {\n    if (this._unsubDataEntryFlowProgressed) {\n      return;\n    }\n    this._unsubDataEntryFlowProgressed = subscribeDataEntryFlowProgressed(\n      this.hass.connection,\n      async (ev) => {\n        if (ev.data.flow_id !== this._step?.flow_id) {\n          return;\n        }\n        this._processStep(\n          this._params!.flowConfig.fetchFlow(this.hass, this._step?.flow_id)\n        );\n      }\n    );\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --dialog-content-padding: 0;\n        }\n        .dialog-actions {\n          padding: 16px;\n          position: absolute;\n          top: 0;\n          right: 0;\n          inset-inline-start: initial;\n          inset-inline-end: 0px;\n          direction: var(--direction);\n        }\n        .dialog-actions > * {\n          color: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-data-entry-flow\": DataEntryFlowDialog;\n  }\n}\n","import { html } from \"lit\";\nimport {\n  createConfigFlow,\n  deleteConfigFlow,\n  fetchConfigFlow,\n  handleConfigFlowStep,\n} from \"../../data/config_flow\";\nimport { domainToName } from \"../../data/integration\";\nimport {\n  DataEntryFlowDialogParams,\n  loadDataEntryFlowDialog,\n  showFlowDialog,\n} from \"./show-dialog-data-entry-flow\";\n\nexport const loadConfigFlowDialog = loadDataEntryFlowDialog;\n\nexport const showConfigFlowDialog = (\n  element: HTMLElement,\n  dialogParams: Omit<DataEntryFlowDialogParams, \"flowConfig\">\n): void =>\n  showFlowDialog(element, dialogParams, {\n    loadDevicesAndAreas: true,\n    createFlow: async (hass, handler) => {\n      const [step] = await Promise.all([\n        createConfigFlow(hass, handler),\n        hass.loadBackendTranslation(\"config\", handler),\n        // Used as fallback if no header defined for step\n        hass.loadBackendTranslation(\"title\", handler),\n      ]);\n      return step;\n    },\n    fetchFlow: async (hass, flowId) => {\n      const step = await fetchConfigFlow(hass, flowId);\n      await hass.loadBackendTranslation(\"config\", step.handler);\n      return step;\n    },\n    handleFlowStep: handleConfigFlowStep,\n    deleteFlow: deleteConfigFlow,\n\n    renderAbortDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.abort.${step.reason}`,\n        step.description_placeholders\n      );\n\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderShowFormStepHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderShowFormStepDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.description`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderShowFormStepFieldLabel(hass, step, field) {\n      return hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.data.${field.name}`\n      );\n    },\n\n    renderShowFormStepFieldHelper(hass, step, field) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.data_description.${field.name}`,\n        step.description_placeholders\n      );\n      return description\n        ? html`<ha-markdown breaks .content=${description}></ha-markdown>`\n        : \"\";\n    },\n\n    renderShowFormStepFieldError(hass, step, error) {\n      return hass.localize(\n        `component.${step.handler}.config.error.${error}`,\n        step.description_placeholders\n      );\n    },\n\n    renderExternalStepHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) ||\n        hass.localize(\n          \"ui.panel.config.integrations.config_flow.external_step.open_site\"\n        )\n      );\n    },\n\n    renderExternalStepDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.${step.step_id}.description`,\n        step.description_placeholders\n      );\n\n      return html`\n        <p>\n          ${hass.localize(\n            \"ui.panel.config.integrations.config_flow.external_step.description\"\n          )}\n        </p>\n        ${description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\"}\n      `;\n    },\n\n    renderCreateEntryDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.create_entry.${\n          step.description || \"default\"\n        }`,\n        step.description_placeholders\n      );\n\n      return html`\n        ${description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\"}\n        <p>\n          ${hass.localize(\n            \"ui.panel.config.integrations.config_flow.created_config\",\n            \"name\",\n            step.title\n          )}\n        </p>\n      `;\n    },\n\n    renderShowFormProgressHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderShowFormProgressDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.progress.${step.progress_action}`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderMenuHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderMenuDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.description`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderMenuOption(hass, step, option) {\n      return hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.menu_options.${option}`,\n        step.description_placeholders\n      );\n    },\n\n    renderLoadingDescription(hass, reason, handler, step) {\n      if (![\"loading_flow\", \"loading_step\"].includes(reason)) {\n        return \"\";\n      }\n      const domain = step?.handler || handler;\n      return hass.localize(\n        `ui.panel.config.integrations.config_flow.loading.${reason}`,\n        {\n          integration: domain\n            ? domainToName(hass.localize, domain)\n            : // when we are continuing a config flow, we only know the ID and not the domain\n              hass.localize(\n                \"ui.panel.config.integrations.config_flow.loading.fallback_title\"\n              ),\n        }\n      );\n    },\n  });\n"],"names":[],"sourceRoot":""}