{"version":3,"file":"85c402c1.js","mappings":";AAsDA;AAEA;AACA;AACA;;AAEA;AAEA;;AAGA;AAGA;AACA;;;AAKA;AAEA;;;;AAMA;;;AAKA;;AAIA;AACA;AAGA;AACA;AACA;AACA;;AAEA;;;AAOA;AAGA;AACA;;;AAKA;AACA;AAEA;AAKA;;;;;AAKA;;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;;AAEA;AAGA;AACA;;AA3BA;AAgCA;AAGA;;AArIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACyGA;AACA;AACA;AACA;AACA;;AAOA;AAEA;AACA;;AAIA;;;;AAKA;;;;;;AAMA;AACA;;AAEA;;;;;;;;;AASA;AACA;;AAEA;;;;AAIA;;AAGA;;;;;;AAQA;;;;AAKA;AACA;;AAEA;;;;AAIA;;;AAIA;AACA;;AAEA;;;;;;AAQA;AAEA;;AAGA;AACA;;AAEA;;AAIA;;;AAIA;;AAEA;;AAEA;;;;;;;;;AAaA;AACA;AACA;;;AAIA;AACA;;AAGA;AACA;AACA;;;AAIA;AACA;;;;;;;AAQA;AACA;;AAEA;;;AAKA;;;;;AAOA;AACA;;AAEA;;AAEA;;AAEA;;;;;;;;AAQA;;AAGA;AAGA;;AAEA;AAEA;AACA;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAGA;AAEA;AAGA;AACA;;AAIA;AAEA;;AAGA;AAGA;AACA;;;AAKA;;AAGA;AACA;AACA;AACA;;;;AAIA;AACA;;;;AAMA;;AAGA;;;AAIA;AACA;;AAEA;;;;;AAvTA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AC6BA;;AAEA;AACA;;AAOA;AAiBA;AAUA;;AAOA;;;;;;AAQA;;AAUA;;AAIA;;AAWA;;AAEA;;;AA4DA;;AAOA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;AAMA;;AAEA;;;;;AAKA;AACA;AACA;;AAEA;;;;;AAKA;;AAIA;;;;;;AAyGA;;;AAGA;;;;AAIA;;;;ACjXA;AAEA;AACA;AACA;;AAEA;AAEA;;AAGA;AAGA;AACA;;;AAKA;AAEA;;;AAIA;;AAIA;AAGA;AACA;;;AAKA;AAEA;;;AAKA;;;AAKA;;;;;AAKA;AACA;;;;;;;;AAUA;AACA;AACA;AACA;AACA;;;;;AAKA;;;AAKA;;;;;AAKA;AACA;;;;;;;;AAUA;AACA;AACA;AACA;AACA;;;;;AAKA;;;;AAMA;;;;;AAKA;AACA;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;;AAxJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/panels/config/automation/blueprint-automation-editor.ts","webpack://home-assistant-frontend/./src/panels/config/automation/ha-automation-editor.ts","webpack://home-assistant-frontend/./src/panels/config/automation/ha-automation-picker.ts","webpack://home-assistant-frontend/./src/panels/config/automation/manual-automation-editor.ts"],"sourcesContent":["import \"@material/mwc-button/mwc-button\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-blueprint-picker\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-circular-progress\";\nimport \"../../../components/ha-markdown\";\nimport \"../../../components/ha-selector/ha-selector\";\nimport \"../../../components/ha-settings-row\";\nimport \"../../../components/ha-textfield\";\nimport \"../../../components/ha-alert\";\nimport { BlueprintAutomationConfig } from \"../../../data/automation\";\nimport {\n  BlueprintOrError,\n  Blueprints,\n  fetchBlueprints,\n} from \"../../../data/blueprint\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport \"../ha-config-section\";\n\n@customElement(\"blueprint-automation-editor\")\nexport class HaBlueprintAutomationEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public isWide!: boolean;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ reflect: true, type: Boolean }) public narrow!: boolean;\n\n  @property() public config!: BlueprintAutomationConfig;\n\n  @property() public stateObj?: HassEntity;\n\n  @state() private _blueprints?: Blueprints;\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this._getBlueprints();\n  }\n\n  private get _blueprint(): BlueprintOrError | undefined {\n    if (!this._blueprints) {\n      return undefined;\n    }\n    return this._blueprints[this.config.use_blueprint.path];\n  }\n\n  protected render() {\n    const blueprint = this._blueprint;\n    return html`\n      ${this.disabled\n        ? html`<ha-alert alert-type=\"warning\">\n            ${this.hass.localize(\"ui.panel.config.automation.editor.read_only\")}\n            <mwc-button slot=\"action\" @click=${this._duplicate}>\n              ${this.hass.localize(\"ui.panel.config.automation.editor.migrate\")}\n            </mwc-button>\n          </ha-alert>`\n        : \"\"}\n      ${this.stateObj?.state === \"off\"\n        ? html`\n            <ha-alert alert-type=\"info\">\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.disabled\"\n              )}\n              <mwc-button slot=\"action\" @click=${this._enable}>\n                ${this.hass.localize(\n                  \"ui.panel.config.automation.editor.enable\"\n                )}\n              </mwc-button>\n            </ha-alert>\n          `\n        : \"\"}\n      ${this.config.description\n        ? html`<p class=\"description\">${this.config.description}</p>`\n        : \"\"}\n      <ha-card\n        outlined\n        class=\"blueprint\"\n        .header=${this.hass.localize(\n          \"ui.panel.config.automation.editor.blueprint.header\"\n        )}\n      >\n        <div class=\"blueprint-picker-container\">\n          ${this._blueprints\n            ? Object.keys(this._blueprints).length\n              ? html`\n                  <ha-blueprint-picker\n                    .hass=${this.hass}\n                    .label=${this.hass.localize(\n                      \"ui.panel.config.automation.editor.blueprint.blueprint_to_use\"\n                    )}\n                    .blueprints=${this._blueprints}\n                    .value=${this.config.use_blueprint.path}\n                    .disabled=${this.disabled}\n                    @value-changed=${this._blueprintChanged}\n                  ></ha-blueprint-picker>\n                `\n              : this.hass.localize(\n                  \"ui.panel.config.automation.editor.blueprint.no_blueprints\"\n                )\n            : html`<ha-circular-progress active></ha-circular-progress>`}\n        </div>\n\n        ${this.config.use_blueprint.path\n          ? blueprint && \"error\" in blueprint\n            ? html`<p class=\"warning padding\">\n                There is an error in this Blueprint: ${blueprint.error}\n              </p>`\n            : html`${blueprint?.metadata.description\n                ? html`<ha-markdown\n                    class=\"card-content\"\n                    breaks\n                    .content=${blueprint.metadata.description}\n                  ></ha-markdown>`\n                : \"\"}\n              ${blueprint?.metadata?.input &&\n              Object.keys(blueprint.metadata.input).length\n                ? Object.entries(blueprint.metadata.input).map(\n                    ([key, value]) =>\n                      html`<ha-settings-row .narrow=${this.narrow}>\n                        <span slot=\"heading\">${value?.name || key}</span>\n                        <ha-markdown\n                          slot=\"description\"\n                          class=\"card-content\"\n                          breaks\n                          .content=${value?.description}\n                        ></ha-markdown>\n                        ${value?.selector\n                          ? html`<ha-selector\n                              .hass=${this.hass}\n                              .selector=${value.selector}\n                              .key=${key}\n                              .value=${(this.config.use_blueprint.input &&\n                                this.config.use_blueprint.input[key]) ??\n                              value?.default}\n                              .disabled=${this.disabled}\n                              @value-changed=${this._inputChanged}\n                            ></ha-selector>`\n                          : html`<ha-textfield\n                              .key=${key}\n                              required\n                              .value=${(this.config.use_blueprint.input &&\n                                this.config.use_blueprint.input[key]) ??\n                              value?.default}\n                              .disabled=${this.disabled}\n                              @input=${this._inputChanged}\n                            ></ha-textfield>`}\n                      </ha-settings-row>`\n                  )\n                : html`<p class=\"padding\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.blueprint.no_inputs\"\n                    )}\n                  </p>`}`\n          : \"\"}\n      </ha-card>\n    `;\n  }\n\n  private async _getBlueprints() {\n    this._blueprints = await fetchBlueprints(this.hass, \"automation\");\n  }\n\n  private _blueprintChanged(ev) {\n    ev.stopPropagation();\n    if (this.config.use_blueprint.path === ev.detail.value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.config!,\n        use_blueprint: {\n          path: ev.detail.value,\n        },\n      },\n    });\n  }\n\n  private _inputChanged(ev) {\n    ev.stopPropagation();\n    const target = ev.target as any;\n    const key = target.key;\n    const value = ev.detail?.value || target.value;\n    if (\n      (this.config.use_blueprint.input &&\n        this.config.use_blueprint.input[key] === value) ||\n      (!this.config.use_blueprint.input && value === \"\")\n    ) {\n      return;\n    }\n    const input = { ...this.config.use_blueprint.input, [key]: value };\n\n    if (value === \"\" || value === undefined) {\n      delete input[key];\n    }\n\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.config!,\n        use_blueprint: {\n          ...this.config.use_blueprint,\n          input,\n        },\n      },\n    });\n  }\n\n  private async _enable(): Promise<void> {\n    if (!this.hass || !this.stateObj) {\n      return;\n    }\n    await this.hass.callService(\"automation\", \"turn_on\", {\n      entity_id: this.stateObj.entity_id,\n    });\n  }\n\n  private _duplicate() {\n    fireEvent(this, \"duplicate\");\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: block;\n        }\n        ha-card.blueprint {\n          margin: 0 auto;\n        }\n        .padding {\n          padding: 16px;\n        }\n        .link-button-row {\n          padding: 14px;\n        }\n        .blueprint-picker-container {\n          padding: 0 16px 16px;\n        }\n        ha-textfield,\n        ha-blueprint-picker {\n          display: block;\n        }\n        h3 {\n          margin: 16px;\n        }\n        .introduction {\n          margin-top: 0;\n          margin-bottom: 12px;\n        }\n        .introduction a {\n          color: var(--primary-color);\n        }\n        p {\n          margin-bottom: 0;\n        }\n        .description {\n          margin-bottom: 16px;\n        }\n        ha-settings-row {\n          --paper-time-input-justify-content: flex-end;\n          --settings-row-content-width: 100%;\n          --settings-row-prefix-display: contents;\n          border-top: 1px solid var(--divider-color);\n        }\n        ha-alert {\n          margin-bottom: 16px;\n          display: block;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"blueprint-automation-editor\": HaBlueprintAutomationEditor;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport {\n  mdiCheck,\n  mdiContentDuplicate,\n  mdiContentSave,\n  mdiDebugStepOver,\n  mdiDelete,\n  mdiDotsVertical,\n  mdiInformationOutline,\n  mdiPlay,\n  mdiPlayCircleOutline,\n  mdiRenameBox,\n  mdiSort,\n  mdiStopCircleOutline,\n  mdiTransitConnection,\n} from \"@mdi/js\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { navigate } from \"../../../common/navigate\";\nimport { copyToClipboard } from \"../../../common/util/copy-clipboard\";\nimport { afterNextRender } from \"../../../common/util/render-status\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/ha-yaml-editor\";\nimport type { HaYamlEditor } from \"../../../components/ha-yaml-editor\";\nimport {\n  AutomationConfig,\n  AutomationEntity,\n  deleteAutomation,\n  getAutomationStateConfig,\n  fetchAutomationFileConfig,\n  getAutomationEditorInitData,\n  saveAutomationConfig,\n  showAutomationEditor,\n  triggerAutomationActions,\n} from \"../../../data/automation\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/ha-app-layout\";\nimport \"../../../layouts/hass-subpage\";\nimport { KeyboardShortcutMixin } from \"../../../mixins/keyboard-shortcut-mixin\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { showToast } from \"../../../util/toast\";\nimport \"../ha-config-section\";\nimport { showAutomationModeDialog } from \"./automation-mode-dialog/show-dialog-automation-mode\";\nimport { showAutomationRenameDialog } from \"./automation-rename-dialog/show-dialog-automation-rename\";\nimport \"./blueprint-automation-editor\";\nimport \"./manual-automation-editor\";\nimport type { HaManualAutomationEditor } from \"./manual-automation-editor\";\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-editor\": HaAutomationEditor;\n  }\n  // for fire event\n  interface HASSDomEvents {\n    \"subscribe-automation-config\": {\n      callback: (config: AutomationConfig) => void;\n      unsub?: UnsubscribeFunc;\n    };\n    \"ui-mode-not-available\": Error;\n    duplicate: undefined;\n  }\n}\n\nexport class HaAutomationEditor extends KeyboardShortcutMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public automationId: string | null = null;\n\n  @property() public entityId: string | null = null;\n\n  @property() public automations!: AutomationEntity[];\n\n  @property() public isWide?: boolean;\n\n  @property() public narrow!: boolean;\n\n  @property() public route!: Route;\n\n  @state() private _config?: AutomationConfig;\n\n  @state() private _dirty = false;\n\n  @state() private _errors?: string;\n\n  @state() private _entityId?: string;\n\n  @state() private _mode: \"gui\" | \"yaml\" = \"gui\";\n\n  @state() private _readOnly = false;\n\n  @query(\"ha-yaml-editor\", true) private _yamlEditor?: HaYamlEditor;\n\n  @query(\"manual-automation-editor\")\n  private _manualEditor?: HaManualAutomationEditor;\n\n  private _configSubscriptions: Record<\n    string,\n    (config?: AutomationConfig) => void\n  > = {};\n\n  private _configSubscriptionsId = 1;\n\n  protected render(): TemplateResult {\n    const stateObj = this._entityId\n      ? this.hass.states[this._entityId]\n      : undefined;\n    return html`\n      <hass-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        .backCallback=${this._backTapped}\n        .header=${!this._config\n          ? \"\"\n          : this._config.alias ||\n            this.hass.localize(\n              \"ui.panel.config.automation.editor.default_name\"\n            )}\n      >\n        ${this._config?.id && !this.narrow\n          ? html`\n              <mwc-button @click=${this._showTrace} slot=\"toolbar-icon\">\n                ${this.hass.localize(\n                  \"ui.panel.config.automation.editor.show_trace\"\n                )}\n              </mwc-button>\n            `\n          : \"\"}\n        <ha-button-menu corner=\"BOTTOM_START\" slot=\"toolbar-icon\">\n          <ha-icon-button\n            slot=\"trigger\"\n            .label=${this.hass.localize(\"ui.common.menu\")}\n            .path=${mdiDotsVertical}\n          ></ha-icon-button>\n\n          <mwc-list-item\n            graphic=\"icon\"\n            .disabled=${!stateObj}\n            @click=${this._showInfo}\n          >\n            ${this.hass.localize(\"ui.panel.config.automation.editor.show_info\")}\n            <ha-svg-icon\n              slot=\"graphic\"\n              .path=${mdiInformationOutline}\n            ></ha-svg-icon>\n          </mwc-list-item>\n\n          <mwc-list-item\n            graphic=\"icon\"\n            .disabled=${!stateObj}\n            @click=${this._runActions}\n          >\n            ${this.hass.localize(\"ui.panel.config.automation.editor.run\")}\n            <ha-svg-icon slot=\"graphic\" .path=${mdiPlay}></ha-svg-icon>\n          </mwc-list-item>\n\n          ${stateObj && this._config && this.narrow\n            ? html`<a href=\"/config/automation/trace/${this._config.id}\">\n                <mwc-list-item graphic=\"icon\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.automation.editor.show_trace\"\n                  )}\n                  <ha-svg-icon\n                    slot=\"graphic\"\n                    .path=${mdiTransitConnection}\n                  ></ha-svg-icon>\n                </mwc-list-item>\n              </a>`\n            : \"\"}\n\n          <mwc-list-item\n            graphic=\"icon\"\n            @click=${this._promptAutomationAlias}\n            .disabled=${!this.automationId || this._mode === \"yaml\"}\n          >\n            ${this.hass.localize(\"ui.panel.config.automation.editor.rename\")}\n            <ha-svg-icon slot=\"graphic\" .path=${mdiRenameBox}></ha-svg-icon>\n          </mwc-list-item>\n\n          ${this._config && !(\"use_blueprint\" in this._config)\n            ? html`\n                <mwc-list-item\n                  graphic=\"icon\"\n                  @click=${this._promptAutomationMode}\n                  .disabled=${this._readOnly || this._mode === \"yaml\"}\n                >\n                  ${this.hass.localize(\n                    \"ui.panel.config.automation.editor.change_mode\"\n                  )}\n                  <ha-svg-icon\n                    slot=\"graphic\"\n                    .path=${mdiDebugStepOver}\n                  ></ha-svg-icon>\n                </mwc-list-item>\n              `\n            : \"\"}\n          ${this._config && !(\"use_blueprint\" in this._config)\n            ? html`<mwc-list-item\n                graphic=\"icon\"\n                @click=${this._toggleReOrderMode}\n                .disabled=${this._readOnly || this._mode === \"yaml\"}\n              >\n                ${this.hass.localize(\n                  \"ui.panel.config.automation.editor.re_order\"\n                )}\n                <ha-svg-icon slot=\"graphic\" .path=${mdiSort}></ha-svg-icon>\n              </mwc-list-item>`\n            : \"\"}\n\n          <mwc-list-item\n            .disabled=${!this._readOnly && !this.automationId}\n            graphic=\"icon\"\n            @click=${this._duplicate}\n          >\n            ${this.hass.localize(\n              this._readOnly\n                ? \"ui.panel.config.automation.editor.migrate\"\n                : \"ui.panel.config.automation.editor.duplicate\"\n            )}\n            <ha-svg-icon\n              slot=\"graphic\"\n              .path=${mdiContentDuplicate}\n            ></ha-svg-icon>\n          </mwc-list-item>\n\n          <li divider role=\"separator\"></li>\n\n          <mwc-list-item graphic=\"icon\" @click=${this._switchUiMode}>\n            ${this.hass.localize(\"ui.panel.config.automation.editor.edit_ui\")}\n            ${this._mode === \"gui\"\n              ? html`<ha-svg-icon\n                  class=\"selected_menu_item\"\n                  slot=\"graphic\"\n                  .path=${mdiCheck}\n                ></ha-svg-icon>`\n              : ``}\n          </mwc-list-item>\n          <mwc-list-item graphic=\"icon\" @click=${this._switchYamlMode}>\n            ${this.hass.localize(\"ui.panel.config.automation.editor.edit_yaml\")}\n            ${this._mode === \"yaml\"\n              ? html`<ha-svg-icon\n                  class=\"selected_menu_item\"\n                  slot=\"graphic\"\n                  .path=${mdiCheck}\n                ></ha-svg-icon>`\n              : ``}\n          </mwc-list-item>\n\n          <li divider role=\"separator\"></li>\n\n          <mwc-list-item\n            graphic=\"icon\"\n            .disabled=${!stateObj}\n            @click=${this._toggle}\n          >\n            ${stateObj?.state === \"off\"\n              ? this.hass.localize(\"ui.panel.config.automation.editor.enable\")\n              : this.hass.localize(\"ui.panel.config.automation.editor.disable\")}\n            <ha-svg-icon\n              slot=\"graphic\"\n              .path=${stateObj?.state === \"off\"\n                ? mdiPlayCircleOutline\n                : mdiStopCircleOutline}\n            ></ha-svg-icon>\n          </mwc-list-item>\n\n          <mwc-list-item\n            .disabled=${!this.automationId}\n            class=${classMap({ warning: Boolean(this.automationId) })}\n            graphic=\"icon\"\n            @click=${this._deleteConfirm}\n          >\n            ${this.hass.localize(\"ui.panel.config.automation.picker.delete\")}\n            <ha-svg-icon\n              class=${classMap({ warning: Boolean(this.automationId) })}\n              slot=\"graphic\"\n              .path=${mdiDelete}\n            >\n            </ha-svg-icon>\n          </mwc-list-item>\n        </ha-button-menu>\n\n        ${this._config\n          ? html`\n              <div\n                class=\"content ${classMap({\n                  \"yaml-mode\": this._mode === \"yaml\",\n                })}\"\n                @subscribe-automation-config=${this._subscribeAutomationConfig}\n              >\n                ${this._errors\n                  ? html`<ha-alert alert-type=\"error\">\n                      ${this._errors}\n                    </ha-alert>`\n                  : \"\"}\n                ${this._mode === \"gui\"\n                  ? \"use_blueprint\" in this._config\n                    ? html`\n                        <blueprint-automation-editor\n                          .hass=${this.hass}\n                          .narrow=${this.narrow}\n                          .isWide=${this.isWide}\n                          .stateObj=${stateObj}\n                          .config=${this._config}\n                          .disabled=${Boolean(this._readOnly)}\n                          @value-changed=${this._valueChanged}\n                          @duplicate=${this._duplicate}\n                        ></blueprint-automation-editor>\n                      `\n                    : html`\n                        <manual-automation-editor\n                          .hass=${this.hass}\n                          .narrow=${this.narrow}\n                          .isWide=${this.isWide}\n                          .stateObj=${stateObj}\n                          .config=${this._config}\n                          .disabled=${Boolean(this._readOnly)}\n                          @value-changed=${this._valueChanged}\n                          @duplicate=${this._duplicate}\n                        ></manual-automation-editor>\n                      `\n                  : this._mode === \"yaml\"\n                  ? html`\n                      ${this._readOnly\n                        ? html`<ha-alert alert-type=\"warning\">\n                            ${this.hass.localize(\n                              \"ui.panel.config.automation.editor.read_only\"\n                            )}\n                            <mwc-button slot=\"action\" @click=${this._duplicate}>\n                              ${this.hass.localize(\n                                \"ui.panel.config.automation.editor.migrate\"\n                              )}\n                            </mwc-button>\n                          </ha-alert>`\n                        : \"\"}\n                      ${stateObj?.state === \"off\"\n                        ? html`\n                            <ha-alert alert-type=\"info\">\n                              ${this.hass.localize(\n                                \"ui.panel.config.automation.editor.disabled\"\n                              )}\n                              <mwc-button slot=\"action\" @click=${this._toggle}>\n                                ${this.hass.localize(\n                                  \"ui.panel.config.automation.editor.enable\"\n                                )}\n                              </mwc-button>\n                            </ha-alert>\n                          `\n                        : \"\"}\n                      <ha-yaml-editor\n                        .hass=${this.hass}\n                        .defaultValue=${this._preprocessYaml()}\n                        .readOnly=${this._readOnly}\n                        @value-changed=${this._yamlChanged}\n                      ></ha-yaml-editor>\n                      <ha-card outlined>\n                        <div class=\"card-actions\">\n                          <mwc-button @click=${this._copyYaml}>\n                            ${this.hass.localize(\n                              \"ui.panel.config.automation.editor.copy_to_clipboard\"\n                            )}\n                          </mwc-button>\n                        </div>\n                      </ha-card>\n                    `\n                  : ``}\n              </div>\n            `\n          : \"\"}\n        <ha-fab\n          slot=\"fab\"\n          class=${classMap({ dirty: this._dirty })}\n          .label=${this.hass.localize(\"ui.panel.config.automation.editor.save\")}\n          extended\n          @click=${this._saveAutomation}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiContentSave}></ha-svg-icon>\n        </ha-fab>\n      </hass-subpage>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    const oldAutomationId = changedProps.get(\"automationId\");\n    if (\n      changedProps.has(\"automationId\") &&\n      this.automationId &&\n      this.hass &&\n      // Only refresh config if we picked a new automation. If same ID, don't fetch it.\n      oldAutomationId !== this.automationId\n    ) {\n      this._setEntityId();\n      this._loadConfig();\n    }\n\n    if (\n      changedProps.has(\"automationId\") &&\n      !this.automationId &&\n      !this.entityId &&\n      this.hass\n    ) {\n      const initData = getAutomationEditorInitData();\n      let baseConfig: Partial<AutomationConfig> = { description: \"\" };\n      if (!initData || !(\"use_blueprint\" in initData)) {\n        baseConfig = {\n          ...baseConfig,\n          mode: \"single\",\n          trigger: [],\n          condition: [],\n          action: [],\n        };\n      }\n      this._config = {\n        ...baseConfig,\n        ...initData,\n      } as AutomationConfig;\n      this._entityId = undefined;\n      this._readOnly = false;\n      this._dirty = true;\n    }\n\n    if (changedProps.has(\"entityId\") && this.entityId) {\n      getAutomationStateConfig(this.hass, this.entityId).then((c) => {\n        this._config = c.config;\n      });\n      this._entityId = this.entityId;\n      this._dirty = false;\n      this._readOnly = true;\n    }\n\n    if (\n      changedProps.has(\"automations\") &&\n      this.automationId &&\n      !this._entityId\n    ) {\n      this._setEntityId();\n    }\n\n    if (changedProps.has(\"_config\")) {\n      Object.values(this._configSubscriptions).forEach((sub) =>\n        sub(this._config)\n      );\n    }\n  }\n\n  private _setEntityId() {\n    const automation = this.automations.find(\n      (entity: AutomationEntity) => entity.attributes.id === this.automationId\n    );\n    this._entityId = automation?.entity_id;\n  }\n\n  private async _loadConfig() {\n    try {\n      const config = await fetchAutomationFileConfig(\n        this.hass,\n        this.automationId as string\n      );\n\n      // Normalize data: ensure trigger, action and condition are lists\n      // Happens when people copy paste their automations into the config\n      for (const key of [\"trigger\", \"condition\", \"action\"]) {\n        const value = config[key];\n        if (value && !Array.isArray(value)) {\n          config[key] = [value];\n        }\n      }\n      this._dirty = false;\n      this._readOnly = false;\n      this._config = config;\n    } catch (err: any) {\n      const entity = Object.values(this.hass.entities).find(\n        (ent) =>\n          ent.platform === \"automation\" && ent.unique_id === this.automationId\n      );\n      if (entity) {\n        navigate(`/config/automation/show/${entity.entity_id}`, {\n          replace: true,\n        });\n        return;\n      }\n      await showAlertDialog(this, {\n        text:\n          err.status_code === 404\n            ? this.hass.localize(\n                \"ui.panel.config.automation.editor.load_error_not_editable\"\n              )\n            : this.hass.localize(\n                \"ui.panel.config.automation.editor.load_error_unknown\",\n                \"err_no\",\n                err.status_code\n              ),\n      });\n      history.back();\n    }\n  }\n\n  private _valueChanged(ev: CustomEvent<{ value: AutomationConfig }>) {\n    ev.stopPropagation();\n    if (this._readOnly) {\n      return;\n    }\n    this._config = ev.detail.value;\n    this._dirty = true;\n    this._errors = undefined;\n  }\n\n  private _showInfo() {\n    if (!this.hass || !this._entityId) {\n      return;\n    }\n    fireEvent(this, \"hass-more-info\", { entityId: this._entityId });\n  }\n\n  private async _showTrace() {\n    if (this._config?.id) {\n      const result = await this.confirmUnsavedChanged();\n      if (result) {\n        navigate(`/config/automation/trace/${this._config.id}`);\n      }\n    }\n  }\n\n  private _runActions() {\n    if (!this.hass || !this._entityId) {\n      return;\n    }\n    triggerAutomationActions(\n      this.hass,\n      this.hass.states[this._entityId].entity_id\n    );\n  }\n\n  private async _toggle(): Promise<void> {\n    if (!this.hass || !this._entityId) {\n      return;\n    }\n    const stateObj = this.hass.states[this._entityId];\n    const service = stateObj.state === \"off\" ? \"turn_on\" : \"turn_off\";\n    await this.hass.callService(\"automation\", service, {\n      entity_id: stateObj.entity_id,\n    });\n  }\n\n  private _preprocessYaml() {\n    if (!this._config) {\n      return {};\n    }\n    const cleanConfig: AutomationConfig = { ...this._config };\n    delete cleanConfig.id;\n    return cleanConfig;\n  }\n\n  private async _copyYaml(): Promise<void> {\n    if (this._yamlEditor?.yaml) {\n      await copyToClipboard(this._yamlEditor.yaml);\n      showToast(this, {\n        message: this.hass.localize(\"ui.common.copied_clipboard\"),\n      });\n    }\n  }\n\n  private _yamlChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    if (!ev.detail.isValid) {\n      return;\n    }\n    this._config = { id: this._config?.id, ...ev.detail.value };\n    this._errors = undefined;\n    this._dirty = true;\n  }\n\n  private async confirmUnsavedChanged(): Promise<boolean> {\n    if (this._dirty) {\n      return showConfirmationDialog(this, {\n        title: this.hass!.localize(\n          \"ui.panel.config.automation.editor.unsaved_confirm_title\"\n        ),\n        text: this.hass!.localize(\n          \"ui.panel.config.automation.editor.unsaved_confirm_text\"\n        ),\n        confirmText: this.hass!.localize(\"ui.common.leave\"),\n        dismissText: this.hass!.localize(\"ui.common.stay\"),\n        destructive: true,\n      });\n    }\n    return true;\n  }\n\n  private _backTapped = async () => {\n    const result = await this.confirmUnsavedChanged();\n    if (result) {\n      afterNextRender(() => history.back());\n    }\n  };\n\n  private async _duplicate() {\n    const result = this._readOnly\n      ? await showConfirmationDialog(this, {\n          title: \"Migrate automation?\",\n          text: \"You can migrate this automation, so it can be edited from the UI. After it is migrated and you have saved it, you will have to manually delete your old automation from your configuration. Do you want to migrate this automation?\",\n        })\n      : await this.confirmUnsavedChanged();\n    if (result) {\n      showAutomationEditor({\n        ...this._config,\n        id: undefined,\n        alias: this._readOnly ? this._config?.alias : undefined,\n      });\n    }\n  }\n\n  private async _deleteConfirm() {\n    showConfirmationDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.automation.picker.delete_confirm_title\"\n      ),\n      text: this.hass.localize(\n        \"ui.panel.config.automation.picker.delete_confirm_text\",\n        { name: this._config?.alias }\n      ),\n      confirmText: this.hass!.localize(\"ui.common.delete\"),\n      destructive: true,\n      dismissText: this.hass!.localize(\"ui.common.cancel\"),\n      confirm: () => this._delete(),\n    });\n  }\n\n  private async _delete() {\n    if (this.automationId) {\n      await deleteAutomation(this.hass, this.automationId);\n      history.back();\n    }\n  }\n\n  private _switchUiMode() {\n    this._mode = \"gui\";\n  }\n\n  private _switchYamlMode() {\n    this._mode = \"yaml\";\n  }\n\n  private _toggleReOrderMode() {\n    if (this._manualEditor) {\n      this._manualEditor.reOrderMode = !this._manualEditor.reOrderMode;\n    }\n  }\n\n  private async _promptAutomationAlias(): Promise<void> {\n    return new Promise((resolve) => {\n      showAutomationRenameDialog(this, {\n        config: this._config!,\n        updateAutomation: (config) => {\n          this._config = config;\n          this._dirty = true;\n          this.requestUpdate();\n          resolve();\n        },\n        onClose: () => resolve(),\n      });\n    });\n  }\n\n  private async _promptAutomationMode(): Promise<void> {\n    return new Promise((resolve) => {\n      showAutomationModeDialog(this, {\n        config: this._config!,\n        updateAutomation: (config) => {\n          this._config = config;\n          this._dirty = true;\n          this.requestUpdate();\n          resolve();\n        },\n        onClose: () => resolve(),\n      });\n    });\n  }\n\n  private async _saveAutomation(): Promise<void> {\n    const id = this.automationId || String(Date.now());\n    if (!this.automationId) {\n      await this._promptAutomationAlias();\n    }\n\n    try {\n      await saveAutomationConfig(this.hass, id, this._config!);\n    } catch (errors: any) {\n      this._errors = errors.body.message || errors.error || errors.body;\n      showToast(this, {\n        message: errors.body.message || errors.error || errors.body,\n      });\n      throw errors;\n    }\n\n    this._dirty = false;\n\n    if (!this.automationId) {\n      navigate(`/config/automation/edit/${id}`, { replace: true });\n    }\n  }\n\n  private _subscribeAutomationConfig(ev) {\n    const id = this._configSubscriptionsId++;\n    this._configSubscriptions[id] = ev.detail.callback;\n    ev.detail.unsub = () => {\n      delete this._configSubscriptions[id];\n    };\n    ev.detail.callback(this._config);\n  }\n\n  protected handleKeyboardSave() {\n    this._saveAutomation();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-card {\n          overflow: hidden;\n        }\n        .content {\n          padding-bottom: 20px;\n        }\n        .yaml-mode {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n          padding-bottom: 0;\n        }\n        manual-automation-editor,\n        blueprint-automation-editor {\n          margin: 0 auto;\n          max-width: 1040px;\n          padding: 28px 20px 0;\n        }\n        ha-yaml-editor {\n          flex-grow: 1;\n          --code-mirror-height: 100%;\n          min-height: 0;\n        }\n        .yaml-mode ha-card {\n          overflow: initial;\n          --ha-card-border-radius: 0;\n          border-bottom: 1px solid var(--divider-color);\n        }\n        p {\n          margin-bottom: 0;\n        }\n        ha-entity-toggle {\n          margin-right: 8px;\n        }\n        ha-fab {\n          position: relative;\n          bottom: calc(-80px - env(safe-area-inset-bottom));\n          transition: bottom 0.3s;\n        }\n        ha-fab.dirty {\n          bottom: 0;\n        }\n        .selected_menu_item {\n          color: var(--primary-color);\n        }\n        li[role=\"separator\"] {\n          border-bottom-color: var(--divider-color);\n        }\n        ha-button-menu a {\n          text-decoration: none;\n          color: var(--primary-color);\n        }\n        h1 {\n          margin: 0;\n        }\n        .header-name {\n          display: flex;\n          align-items: center;\n          margin: 0 auto;\n          max-width: 1040px;\n          padding: 28px 20px 0;\n        }\n      `,\n    ];\n  }\n}\n\ncustomElements.define(\"ha-automation-editor\", HaAutomationEditor);\n","import {\n  mdiCancel,\n  mdiContentDuplicate,\n  mdiDelete,\n  mdiHelpCircle,\n  mdiInformationOutline,\n  mdiPlay,\n  mdiPlayCircleOutline,\n  mdiPlus,\n  mdiStopCircleOutline,\n  mdiTransitConnection,\n} from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { formatShortDateTime } from \"../../../common/datetime/format_date_time\";\nimport { relativeTime } from \"../../../common/datetime/relative_time\";\nimport { fireEvent, HASSDomEvent } from \"../../../common/dom/fire_event\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { navigate } from \"../../../common/navigate\";\nimport type {\n  DataTableColumnContainer,\n  RowClickedEvent,\n} from \"../../../components/data-table/ha-data-table\";\nimport \"../../../components/ha-button-related-filter-menu\";\nimport \"../../../components/ha-chip\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-icon-overflow-menu\";\nimport \"../../../components/ha-svg-icon\";\nimport {\n  AutomationEntity,\n  deleteAutomation,\n  duplicateAutomation,\n  fetchAutomationFileConfig,\n  triggerAutomationActions,\n} from \"../../../data/automation\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-tabs-subpage-data-table\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { configSections } from \"../ha-panel-config\";\nimport { showNewAutomationDialog } from \"./show-dialog-new-automation\";\n\nconst DAY_IN_MILLISECONDS = 86400000;\n\n@customElement(\"ha-automation-picker\")\nclass HaAutomationPicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property() public route!: Route;\n\n  @property() public automations!: AutomationEntity[];\n\n  @property() private _activeFilters?: string[];\n\n  @state() private _filteredAutomations?: string[] | null;\n\n  @state() private _filterValue?;\n\n  private _automations = memoizeOne(\n    (\n      automations: AutomationEntity[],\n      filteredAutomations?: string[] | null\n    ) => {\n      if (filteredAutomations === null) {\n        return [];\n      }\n      return (\n        filteredAutomations\n          ? automations.filter((automation) =>\n              filteredAutomations!.includes(automation.entity_id)\n            )\n          : automations\n      ).map((automation) => ({\n        ...automation,\n        name: computeStateName(automation),\n        last_triggered: automation.attributes.last_triggered || undefined,\n        disabled: automation.state === \"off\",\n      }));\n    }\n  );\n\n  private _columns = memoizeOne(\n    (narrow: boolean, _locale): DataTableColumnContainer => {\n      const columns: DataTableColumnContainer = {\n        name: {\n          title: this.hass.localize(\n            \"ui.panel.config.automation.picker.headers.name\"\n          ),\n          sortable: true,\n          filterable: true,\n          direction: \"asc\",\n          grows: true,\n          template: narrow\n            ? (name, automation: any) => {\n                const date = new Date(automation.attributes.last_triggered);\n                const now = new Date();\n\n                const diff = now.getTime() - date.getTime();\n                const dayDiff = diff / DAY_IN_MILLISECONDS;\n\n                return html`\n                  ${name}\n                  <div class=\"secondary\">\n                    ${this.hass.localize(\"ui.card.automation.last_triggered\")}:\n                    ${automation.attributes.last_triggered\n                      ? dayDiff > 3\n                        ? formatShortDateTime(date, this.hass.locale)\n                        : relativeTime(date, this.hass.locale)\n                      : this.hass.localize(\"ui.components.relative_time.never\")}\n                  </div>\n                `;\n              }\n            : undefined,\n        },\n      };\n      if (!narrow) {\n        columns.last_triggered = {\n          sortable: true,\n          width: \"20%\",\n          title: this.hass.localize(\"ui.card.automation.last_triggered\"),\n          template: (last_triggered) => {\n            const date = new Date(last_triggered);\n            const now = new Date();\n\n            const diff = now.getTime() - date.getTime();\n            const dayDiff = diff / DAY_IN_MILLISECONDS;\n\n            return html`\n              ${last_triggered\n                ? dayDiff > 3\n                  ? formatShortDateTime(date, this.hass.locale)\n                  : relativeTime(date, this.hass.locale)\n                : this.hass.localize(\"ui.components.relative_time.never\")}\n            `;\n          },\n        };\n      }\n\n      columns.disabled = this.narrow\n        ? {\n            title: \"\",\n            template: (disabled: boolean) =>\n              disabled\n                ? html`\n                    <paper-tooltip animation-delay=\"0\" position=\"left\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.automation.picker.disabled\"\n                      )}\n                    </paper-tooltip>\n                    <ha-svg-icon\n                      .path=${mdiCancel}\n                      style=\"color: var(--secondary-text-color)\"\n                    ></ha-svg-icon>\n                  `\n                : \"\",\n          }\n        : {\n            width: \"20%\",\n            title: \"\",\n            template: (disabled: boolean) =>\n              disabled\n                ? html`\n                    <ha-chip>\n                      ${this.hass.localize(\n                        \"ui.panel.config.automation.picker.disabled\"\n                      )}\n                    </ha-chip>\n                  `\n                : \"\",\n          };\n\n      columns.actions = {\n        title: \"\",\n        width: this.narrow ? undefined : \"10%\",\n        type: \"overflow-menu\",\n        template: (_: string, automation: any) =>\n          html`\n            <ha-icon-overflow-menu\n              .hass=${this.hass}\n              narrow\n              .items=${[\n                {\n                  path: mdiInformationOutline,\n                  label: this.hass.localize(\n                    \"ui.panel.config.automation.editor.show_info\"\n                  ),\n                  action: () => this._showInfo(automation),\n                },\n                {\n                  path: mdiPlay,\n                  label: this.hass.localize(\n                    \"ui.panel.config.automation.editor.run\"\n                  ),\n                  action: () => this._runActions(automation),\n                },\n                {\n                  path: mdiTransitConnection,\n                  label: this.hass.localize(\n                    \"ui.panel.config.automation.editor.show_trace\"\n                  ),\n                  action: () => this._showTrace(automation),\n                },\n                {\n                  divider: true,\n                },\n                {\n                  path: mdiContentDuplicate,\n                  label: this.hass.localize(\n                    \"ui.panel.config.automation.picker.duplicate\"\n                  ),\n                  action: () => this.duplicate(automation),\n                },\n                {\n                  path:\n                    automation.state === \"off\"\n                      ? mdiPlayCircleOutline\n                      : mdiStopCircleOutline,\n                  label:\n                    automation.state === \"off\"\n                      ? this.hass.localize(\n                          \"ui.panel.config.automation.editor.enable\"\n                        )\n                      : this.hass.localize(\n                          \"ui.panel.config.automation.editor.disable\"\n                        ),\n                  action: () => this._toggle(automation),\n                },\n                {\n                  label: this.hass.localize(\n                    \"ui.panel.config.automation.picker.delete\"\n                  ),\n                  path: mdiDelete,\n                  action: () => this._deleteConfirm(automation),\n                  warning: true,\n                },\n              ]}\n            >\n            </ha-icon-overflow-menu>\n          `,\n      };\n      return columns;\n    }\n  );\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/config\"\n        id=\"entity_id\"\n        .route=${this.route}\n        .tabs=${configSections.automations}\n        .activeFilters=${this._activeFilters}\n        .columns=${this._columns(this.narrow, this.hass.locale)}\n        .data=${this._automations(this.automations, this._filteredAutomations)}\n        @row-click=${this._handleRowClicked}\n        .noDataText=${this.hass.localize(\n          \"ui.panel.config.automation.picker.no_automations\"\n        )}\n        @clear-filter=${this._clearFilter}\n        hasFab\n        clickable\n      >\n        <ha-icon-button\n          slot=\"toolbar-icon\"\n          .label=${this.hass.localize(\"ui.common.help\")}\n          .path=${mdiHelpCircle}\n          @click=${this._showHelp}\n        ></ha-icon-button>\n        <ha-button-related-filter-menu\n          slot=\"filter-menu\"\n          corner=\"BOTTOM_START\"\n          .narrow=${this.narrow}\n          .hass=${this.hass}\n          .value=${this._filterValue}\n          exclude-domains='[\"automation\"]'\n          @related-changed=${this._relatedFilterChanged}\n        >\n        </ha-button-related-filter-menu>\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.picker.add_automation\"\n          )}\n          extended\n          @click=${this._createNew}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  private _relatedFilterChanged(ev: CustomEvent) {\n    this._filterValue = ev.detail.value;\n    if (!this._filterValue) {\n      this._clearFilter();\n      return;\n    }\n    this._activeFilters = [ev.detail.filter];\n    this._filteredAutomations = ev.detail.items.automation || null;\n  }\n\n  private _clearFilter() {\n    this._filteredAutomations = undefined;\n    this._activeFilters = undefined;\n    this._filterValue = undefined;\n  }\n\n  private _showInfo(automation: any) {\n    fireEvent(this, \"hass-more-info\", { entityId: automation.entity_id });\n  }\n\n  private _runActions(automation: any) {\n    triggerAutomationActions(this.hass, automation.entity_id);\n  }\n\n  private _showTrace(automation: any) {\n    navigate(`/config/automation/trace/${automation.attributes.id}`);\n  }\n\n  private async _toggle(automation): Promise<void> {\n    const service = automation.state === \"off\" ? \"turn_on\" : \"turn_off\";\n    await this.hass.callService(\"automation\", service, {\n      entity_id: automation.entity_id,\n    });\n  }\n\n  private async _deleteConfirm(automation) {\n    showConfirmationDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.automation.picker.delete_confirm_title\"\n      ),\n      text: this.hass.localize(\n        \"ui.panel.config.automation.picker.delete_confirm_text\",\n        { name: automation.name }\n      ),\n      confirmText: this.hass!.localize(\"ui.common.delete\"),\n      dismissText: this.hass!.localize(\"ui.common.cancel\"),\n      confirm: () => this._delete(automation),\n      destructive: true,\n    });\n  }\n\n  private async _delete(automation) {\n    try {\n      await deleteAutomation(this.hass, automation.attributes.id);\n    } catch (err: any) {\n      await showAlertDialog(this, {\n        text:\n          err.status_code === 400\n            ? this.hass.localize(\n                \"ui.panel.config.automation.editor.load_error_not_deletable\"\n              )\n            : this.hass.localize(\n                \"ui.panel.config.automation.editor.load_error_unknown\",\n                \"err_no\",\n                err.status_code\n              ),\n      });\n    }\n  }\n\n  private async duplicate(automation) {\n    try {\n      const config = await fetchAutomationFileConfig(\n        this.hass,\n        automation.attributes.id\n      );\n      duplicateAutomation(config);\n    } catch (err: any) {\n      await showAlertDialog(this, {\n        text:\n          err.status_code === 404\n            ? this.hass.localize(\n                \"ui.panel.config.automation.editor.load_error_not_duplicable\"\n              )\n            : this.hass.localize(\n                \"ui.panel.config.automation.editor.load_error_unknown\",\n                \"err_no\",\n                err.status_code\n              ),\n      });\n    }\n  }\n\n  private _showHelp() {\n    showAlertDialog(this, {\n      title: this.hass.localize(\"ui.panel.config.automation.caption\"),\n      text: html`\n        ${this.hass.localize(\"ui.panel.config.automation.picker.introduction\")}\n        <p>\n          <a\n            href=${documentationUrl(this.hass, \"/docs/automation/editor/\")}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            ${this.hass.localize(\n              \"ui.panel.config.automation.picker.learn_more\"\n            )}\n          </a>\n        </p>\n      `,\n    });\n  }\n\n  private _handleRowClicked(ev: HASSDomEvent<RowClickedEvent>) {\n    const automation = this.automations.find(\n      (a) => a.entity_id === ev.detail.id\n    );\n\n    if (automation?.attributes.id) {\n      navigate(`/config/automation/edit/${automation.attributes.id}`);\n    } else {\n      navigate(`/config/automation/show/${ev.detail.id}`);\n    }\n  }\n\n  private _createNew() {\n    if (isComponentLoaded(this.hass, \"blueprint\")) {\n      showNewAutomationDialog(this);\n    } else {\n      navigate(\"/config/automation/edit/new\");\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return haStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-picker\": HaAutomationPicker;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { mdiHelpCircle } from \"@mdi/js\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-alert\";\nimport {\n  Condition,\n  ManualAutomationConfig,\n  Trigger,\n} from \"../../../data/automation\";\nimport { Action } from \"../../../data/script\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport \"./action/ha-automation-action\";\nimport \"./condition/ha-automation-condition\";\nimport \"./trigger/ha-automation-trigger\";\n\n@customElement(\"manual-automation-editor\")\nexport class HaManualAutomationEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ attribute: false }) public config!: ManualAutomationConfig;\n\n  @property({ attribute: false }) public stateObj?: HassEntity;\n\n  @property({ type: Boolean, reflect: true, attribute: \"re-order-mode\" })\n  public reOrderMode = false;\n\n  protected render() {\n    return html`\n      ${this.disabled\n        ? html`<ha-alert alert-type=\"warning\">\n            ${this.hass.localize(\"ui.panel.config.automation.editor.read_only\")}\n            <mwc-button slot=\"action\" @click=${this._duplicate}>\n              ${this.hass.localize(\"ui.panel.config.automation.editor.migrate\")}\n            </mwc-button>\n          </ha-alert>`\n        : \"\"}\n      ${this.stateObj?.state === \"off\"\n        ? html`\n            <ha-alert alert-type=\"info\">\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.disabled\"\n              )}\n              <mwc-button slot=\"action\" @click=${this._enable}>\n                ${this.hass.localize(\n                  \"ui.panel.config.automation.editor.enable\"\n                )}\n              </mwc-button>\n            </ha-alert>\n          `\n        : \"\"}\n      ${this.reOrderMode\n        ? html`\n            <ha-alert\n              alert-type=\"info\"\n              .title=${this.hass.localize(\n                \"ui.panel.config.automation.editor.re_order_mode.title\"\n              )}\n            >\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.re_order_mode.description\"\n              )}\n              <mwc-button slot=\"action\" @click=${this._exitReOrderMode}>\n                ${this.hass.localize(\n                  \"ui.panel.config.automation.editor.re_order_mode.exit\"\n                )}\n              </mwc-button>\n            </ha-alert>\n          `\n        : \"\"}\n      ${this.config.description\n        ? html`<p class=\"description\">${this.config.description}</p>`\n        : \"\"}\n      <div class=\"header\">\n        <h2 id=\"triggers-heading\" class=\"name\">\n          ${this.hass.localize(\n            \"ui.panel.config.automation.editor.triggers.header\"\n          )}\n        </h2>\n        <a\n          href=${documentationUrl(this.hass, \"/docs/automation/trigger/\")}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          <ha-icon-button\n            .path=${mdiHelpCircle}\n            .label=${this.hass.localize(\n              \"ui.panel.config.automation.editor.triggers.learn_more\"\n            )}\n          ></ha-icon-button>\n        </a>\n      </div>\n\n      <ha-automation-trigger\n        role=\"region\"\n        aria-labelledby=\"triggers-heading\"\n        .triggers=${this.config.trigger}\n        @value-changed=${this._triggerChanged}\n        .hass=${this.hass}\n        .reOrderMode=${this.reOrderMode}\n        .disabled=${this.disabled}\n      ></ha-automation-trigger>\n\n      <div class=\"header\">\n        <h2 id=\"conditions-heading\" class=\"name\">\n          ${this.hass.localize(\n            \"ui.panel.config.automation.editor.conditions.header\"\n          )}\n        </h2>\n        <a\n          href=${documentationUrl(this.hass, \"/docs/automation/condition/\")}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          <ha-icon-button\n            .path=${mdiHelpCircle}\n            .label=${this.hass.localize(\n              \"ui.panel.config.automation.editor.conditions.learn_more\"\n            )}\n          ></ha-icon-button>\n        </a>\n      </div>\n\n      <ha-automation-condition\n        role=\"region\"\n        aria-labelledby=\"conditions-heading\"\n        .conditions=${this.config.condition || []}\n        @value-changed=${this._conditionChanged}\n        .hass=${this.hass}\n        .reOrderMode=${this.reOrderMode}\n        .disabled=${this.disabled}\n      ></ha-automation-condition>\n\n      <div class=\"header\">\n        <h2 id=\"actions-heading\" class=\"name\">\n          ${this.hass.localize(\n            \"ui.panel.config.automation.editor.actions.header\"\n          )}\n        </h2>\n        <div>\n          <a\n            href=${documentationUrl(this.hass, \"/docs/automation/action/\")}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <ha-icon-button\n              .path=${mdiHelpCircle}\n              .label=${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.learn_more\"\n              )}\n            ></ha-icon-button>\n          </a>\n        </div>\n      </div>\n\n      <ha-automation-action\n        role=\"region\"\n        aria-labelledby=\"actions-heading\"\n        .actions=${this.config.action}\n        @value-changed=${this._actionChanged}\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .reOrderMode=${this.reOrderMode}\n        .disabled=${this.disabled}\n      ></ha-automation-action>\n    `;\n  }\n\n  private _exitReOrderMode() {\n    this.reOrderMode = !this.reOrderMode;\n  }\n\n  private _triggerChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.config!, trigger: ev.detail.value as Trigger[] },\n    });\n  }\n\n  private _conditionChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.config!,\n        condition: ev.detail.value as Condition[],\n      },\n    });\n  }\n\n  private _actionChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.config!, action: ev.detail.value as Action[] },\n    });\n  }\n\n  private async _enable(): Promise<void> {\n    if (!this.hass || !this.stateObj) {\n      return;\n    }\n    await this.hass.callService(\"automation\", \"turn_on\", {\n      entity_id: this.stateObj.entity_id,\n    });\n  }\n\n  private _duplicate() {\n    fireEvent(this, \"duplicate\");\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: block;\n        }\n        ha-card {\n          overflow: hidden;\n        }\n        .description {\n          margin: 0;\n        }\n        p {\n          margin-bottom: 0;\n        }\n        .header {\n          display: flex;\n          align-items: center;\n        }\n        .header:first-child {\n          margin-top: -16px;\n        }\n        .header .name {\n          font-size: 20px;\n          font-weight: 400;\n          flex: 1;\n        }\n        .header a {\n          color: var(--secondary-text-color);\n        }\n        ha-alert {\n          display: block;\n          margin-bottom: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"manual-automation-editor\": HaManualAutomationEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}