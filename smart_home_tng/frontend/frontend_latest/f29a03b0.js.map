{"version":3,"file":"f29a03b0.js","mappings":";;AA2IA;;AAKA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AAEA;AAGA;;AAEA;;;AAIA;AAKA;AAGA;AACA;AACA;;AAQA;AAEA;AAGA;AAEA;AAKA;AAEA;;AAnKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACgFA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AApGA;;;;;;;;;;;;;;;;;AAAA;;AC6JA;AAGA;;;AAKA;;;AAIA;;AAEA;AAEA;;AAEA;;AAIA;AACA;;AALA;;AAfA;;AA8BA;;;AAKA;;AA3CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzEA;;AAKA;AAQA;;AAEA;;;AAGA;AACA;AACA;AAMA;;;;;;AAMA;AAcA;;AAGA;;AAKA;;AAGA;;AA7HA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;ACiHA;AACA;AACA;;;AArHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AA8NA;;AAGA;;AAEA;AAEA;AAEA;AAIA;AAEA;AAIA;;;AAKA;AACA;AACA;AAIA;;AAIA;AAGA;;AAGA;AACA;AACA;AACA;AACA;;AAIA;AAEA;;AAGA;;AAeA;AACA;;;AAGA;;AAbA;AACA;AACA;;;;;AAkBA;;AA7SA;;;;ACjCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8GA;;AC1BA;;AAKA;;;;AAUA;;AAIA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;;;AAOA;AAKA;AACA;AAIA;AACA;;;;AAOA;AACA;;;;;;AAMA;AACA;;AAGA;;AAMA;AAEA;;;;AArIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AC0CA;AAGA;AAPA;;;;;;;;;;;;;AAzDA;;AC8FA;;AAKA;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;;;;;;;;AASA;;AAQA;;;;AAQA;;;;AAIA;AAQA;AAGA;AAGA;AAEA;AAIA;AAIA;AAGA;AAGA;AAEA;;;;;;;;AAYA;AASA;;AAKA;AAGA;;;;AAQA;;AAEA;;;;AAMA;;AAIA;;;;;;;AAOA;;AAEA;;;;AAIA;;AAEA;;AAKA;;;;AAtNA;;AAgXA;AACA;AACA;;AAEA;AACA;;;AATA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA5WA;;ACoGA;;AAKA;AAEA;AACA;;AASA;;AAuBA;AACA;AAIA;;AAIA;;;AAIA;;;AAIA;;;;;;;AAOA;;AAMA;;;;AAIA;AAGA;AAIA;;AAMA;;;AAIA;AAEA;;;AAKA;;AAIA;AAIA;AASA;AAMA;;AAMA;;;;;AAMA;AAEA;;AAGA;;;AAMA;AAEA;;AAKA;;AAQA;AAGA;AAIA;AAEA;;;AAMA;;AAGA;;AAQA;;AAGA;;;AAQA;;;AAUA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAjUA;;ACHA;AAGA;AAIA;;AAZA;;;;;;;;;;;AC/BA;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/cards/hui-button-card.ts","webpack://home-assistant-frontend/./src/panels/lovelace/cards/hui-calendar-card.ts","webpack://home-assistant-frontend/./src/panels/lovelace/cards/hui-entities-card.ts","webpack://home-assistant-frontend/./src/panels/lovelace/cards/hui-entity-card.ts","webpack://home-assistant-frontend/./src/panels/lovelace/cards/hui-glance-card.ts","webpack://home-assistant-frontend/./src/panels/lovelace/cards/hui-grid-card.ts","webpack://home-assistant-frontend/./src/panels/lovelace/cards/hui-light-card.ts","webpack://home-assistant-frontend/./src/panels/lovelace/cards/hui-stack-card.ts","webpack://home-assistant-frontend/./src/panels/lovelace/cards/hui-thermostat-card.ts","webpack://home-assistant-frontend/./src/panels/lovelace/cards/hui-weather-forecast-card.ts","webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-entities-toggle.ts","webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-warning-element.ts"],"sourcesContent":["import \"@material/mwc-ripple\";\nimport type { Ripple } from \"@material/mwc-ripple\";\nimport { RippleHandlers } from \"@material/mwc-ripple/ripple-handlers\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport {\n  customElement,\n  eventOptions,\n  property,\n  queryAsync,\n  state,\n} from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { DOMAINS_TOGGLE } from \"../../../common/const\";\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport { computeActiveState } from \"../../../common/entity/compute_active_state\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateDisplay } from \"../../../common/entity/compute_state_display\";\nimport { computeStateDomain } from \"../../../common/entity/compute_state_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { isValidEntityId } from \"../../../common/entity/valid_entity_id\";\nimport { iconColorCSS } from \"../../../common/style/icon_color_css\";\nimport \"../../../components/ha-card\";\nimport { LightEntity } from \"../../../data/light\";\nimport { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { findEntities } from \"../common/find-entities\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport { LovelaceCard, LovelaceCardEditor } from \"../types\";\nimport { ButtonCardConfig } from \"./types\";\n\n@customElement(\"hui-button-card\")\nexport class HuiButtonCard extends LitElement implements LovelaceCard {\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\"../editor/config-elements/hui-button-card-editor\");\n    return document.createElement(\"hui-button-card-editor\");\n  }\n\n  public static getStubConfig(\n    hass: HomeAssistant,\n    entities: string[],\n    entitiesFallback: string[]\n  ): ButtonCardConfig {\n    const maxEntities = 1;\n    const foundEntities = findEntities(\n      hass,\n      maxEntities,\n      entities,\n      entitiesFallback,\n      [\"light\", \"switch\"]\n    );\n\n    return {\n      type: \"button\",\n      tap_action: {\n        action: \"toggle\",\n      },\n      entity: foundEntities[0] || \"\",\n    };\n  }\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: ButtonCardConfig;\n\n  @queryAsync(\"mwc-ripple\") private _ripple!: Promise<Ripple | null>;\n\n  @state() private _shouldRenderRipple = false;\n\n  public getCardSize(): number {\n    return (\n      (this._config?.show_icon ? 4 : 0) + (this._config?.show_name ? 1 : 0)\n    );\n  }\n\n  public setConfig(config: ButtonCardConfig): void {\n    if (config.entity && !isValidEntityId(config.entity)) {\n      throw new Error(\"Invalid entity\");\n    }\n\n    this._config = {\n      tap_action: {\n        action:\n          config.entity && DOMAINS_TOGGLE.has(computeDomain(config.entity))\n            ? \"toggle\"\n            : \"more-info\",\n      },\n      hold_action: { action: \"more-info\" },\n      show_icon: true,\n      show_name: true,\n      state_color: true,\n      ...config,\n    };\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    if (changedProps.has(\"_config\")) {\n      return true;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n\n    if (\n      !oldHass ||\n      oldHass.themes !== this.hass!.themes ||\n      oldHass.locale !== this.hass!.locale\n    ) {\n      return true;\n    }\n\n    return (\n      Boolean(this._config!.entity) &&\n      oldHass.states[this._config!.entity!] !==\n        this.hass!.states[this._config!.entity!]\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n    const stateObj = this._config.entity\n      ? this.hass.states[this._config.entity]\n      : undefined;\n\n    if (this._config.entity && !stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    const name = this._config.show_name\n      ? this._config.name || (stateObj ? computeStateName(stateObj) : \"\")\n      : \"\";\n\n    return html`\n      <ha-card\n        @action=${this._handleAction}\n        @focus=${this.handleRippleFocus}\n        @blur=${this.handleRippleBlur}\n        @mousedown=${this.handleRippleActivate}\n        @mouseup=${this.handleRippleDeactivate}\n        @touchstart=${this.handleRippleActivate}\n        @touchend=${this.handleRippleDeactivate}\n        @touchcancel=${this.handleRippleDeactivate}\n        .actionHandler=${actionHandler({\n          hasHold: hasAction(this._config!.hold_action),\n          hasDoubleClick: hasAction(this._config!.double_tap_action),\n        })}\n        role=\"button\"\n        aria-label=${this._config.name ||\n        (stateObj ? computeStateName(stateObj) : \"\")}\n        tabindex=${ifDefined(\n          hasAction(this._config.tap_action) ? \"0\" : undefined\n        )}\n        @keydown=${this._handleKeyDown}\n      >\n        ${this._config.show_icon\n          ? html`\n              <ha-state-icon\n                tabindex=\"-1\"\n                data-domain=${ifDefined(\n                  this._config.state_color && stateObj\n                    ? computeStateDomain(stateObj)\n                    : undefined\n                )}\n                data-state=${ifDefined(\n                  stateObj ? computeActiveState(stateObj) : undefined\n                )}\n                .icon=${this._config.icon}\n                .state=${stateObj}\n                style=${styleMap({\n                  filter: stateObj ? this._computeBrightness(stateObj) : \"\",\n                  color: stateObj ? this._computeColor(stateObj) : \"\",\n                  height: this._config.icon_height\n                    ? this._config.icon_height\n                    : \"\",\n                })}\n              ></ha-state-icon>\n            `\n          : \"\"}\n        ${this._config.show_name\n          ? html`<span tabindex=\"-1\" .title=${name}>${name}</span>`\n          : \"\"}\n        ${this._config.show_state && stateObj\n          ? html`<span class=\"state\">\n              ${computeStateDisplay(\n                this.hass.localize,\n                stateObj,\n                this.hass.locale\n              )}\n            </span>`\n          : \"\"}\n        ${this._shouldRenderRipple ? html`<mwc-ripple></mwc-ripple>` : \"\"}\n      </ha-card>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    const oldConfig = changedProps.get(\"_config\") as\n      | ButtonCardConfig\n      | undefined;\n\n    if (\n      !oldHass ||\n      !oldConfig ||\n      oldHass.themes !== this.hass.themes ||\n      oldConfig.theme !== this._config.theme\n    ) {\n      applyThemesOnElement(this, this.hass.themes, this._config.theme);\n    }\n  }\n\n  private _rippleHandlers: RippleHandlers = new RippleHandlers(() => {\n    this._shouldRenderRipple = true;\n    return this._ripple;\n  });\n\n  private _handleKeyDown(ev: KeyboardEvent) {\n    if (ev.key === \"Enter\" || ev.key === \" \") {\n      handleAction(this, this.hass!, this._config!, \"tap\");\n    }\n  }\n\n  @eventOptions({ passive: true })\n  private handleRippleActivate(evt?: Event) {\n    this._rippleHandlers.startPress(evt);\n  }\n\n  private handleRippleDeactivate() {\n    this._rippleHandlers.endPress();\n  }\n\n  private handleRippleFocus() {\n    this._rippleHandlers.startFocus();\n  }\n\n  private handleRippleBlur() {\n    this._rippleHandlers.endFocus();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      iconColorCSS,\n      css`\n        ha-card {\n          cursor: pointer;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          text-align: center;\n          padding: 4% 0;\n          font-size: 1.2rem;\n          height: 100%;\n          box-sizing: border-box;\n          justify-content: center;\n          position: relative;\n          overflow: hidden;\n        }\n\n        ha-card:focus {\n          outline: none;\n        }\n\n        ha-state-icon {\n          width: 40%;\n          height: auto;\n          color: var(--paper-item-icon-color, #44739e);\n          --mdc-icon-size: 100%;\n        }\n\n        ha-state-icon + span {\n          margin-top: 8px;\n        }\n\n        ha-state-icon,\n        span {\n          outline: none;\n        }\n\n        .state {\n          font-size: 0.9rem;\n          color: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n\n  private _computeBrightness(stateObj: HassEntity | LightEntity): string {\n    if (!stateObj.attributes.brightness || !this._config?.state_color) {\n      return \"\";\n    }\n    const brightness = stateObj.attributes.brightness;\n    return `brightness(${(brightness + 245) / 5}%)`;\n  }\n\n  private _computeColor(stateObj: HassEntity | LightEntity): string {\n    if (this._config?.state_color && stateObj.attributes.rgb_color) {\n      return `rgb(${stateObj.attributes.rgb_color.join(\",\")})`;\n    }\n    return \"\";\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    handleAction(this, this.hass!, this._config!, ev.detail.action!);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-button-card\": HuiButtonCard;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state, query } from \"lit/decorators\";\nimport { getColorByIndex } from \"../../../common/color/colors\";\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport { HASSDomEvent } from \"../../../common/dom/fire_event\";\nimport { debounce } from \"../../../common/util/debounce\";\nimport \"../../../components/ha-card\";\nimport { Calendar, fetchCalendarEvents } from \"../../../data/calendar\";\nimport type {\n  CalendarEvent,\n  CalendarViewChanged,\n  FullCalendarView,\n  HomeAssistant,\n} from \"../../../types\";\nimport \"../../calendar/ha-full-calendar\";\nimport type { HAFullCalendar } from \"../../calendar/ha-full-calendar\";\nimport { findEntities } from \"../common/find-entities\";\nimport { installResizeObserver } from \"../common/install-resize-observer\";\nimport \"../components/hui-warning\";\nimport type { LovelaceCard, LovelaceCardEditor } from \"../types\";\nimport type { CalendarCardConfig } from \"./types\";\n\n@customElement(\"hui-calendar-card\")\nexport class HuiCalendarCard extends LitElement implements LovelaceCard {\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\"../editor/config-elements/hui-calendar-card-editor\");\n    return document.createElement(\"hui-calendar-card-editor\");\n  }\n\n  public static getStubConfig(\n    hass: HomeAssistant,\n    entities: string[],\n    entitiesFill: string[]\n  ) {\n    const includeDomains = [\"calendar\"];\n    const maxEntities = 2;\n    const foundEntities = findEntities(\n      hass,\n      maxEntities,\n      entities,\n      entitiesFill,\n      includeDomains\n    );\n\n    return {\n      entities: foundEntities,\n    };\n  }\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public _events: CalendarEvent[] = [];\n\n  @state() private _config?: CalendarCardConfig;\n\n  @state() private _calendars: Calendar[] = [];\n\n  @state() private _narrow = false;\n\n  @state() private _veryNarrow = false;\n\n  @query(\"ha-full-calendar\", true) private _calendar?: HAFullCalendar;\n\n  private _startDate?: Date;\n\n  private _endDate?: Date;\n\n  private _resizeObserver?: ResizeObserver;\n\n  public setConfig(config: CalendarCardConfig): void {\n    if (!config.entities?.length) {\n      throw new Error(\"Entities must be specified\");\n    }\n\n    if (!Array.isArray(config.entities)) {\n      throw new Error(\"Entities need to be an array\");\n    }\n\n    this._calendars = config!.entities.map((entity, idx) => ({\n      entity_id: entity,\n      backgroundColor: getColorByIndex(idx),\n    }));\n\n    if (this._config?.entities !== config.entities) {\n      this._fetchCalendarEvents();\n    }\n\n    this._config = { initial_view: \"dayGridMonth\", ...config };\n  }\n\n  public getCardSize(): number {\n    return this._config?.header ? 1 : 0 + 11;\n  }\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    this.updateComplete.then(() => this._attachObserver());\n  }\n\n  public disconnectedCallback(): void {\n    if (this._resizeObserver) {\n      this._resizeObserver.disconnect();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass || !this._calendars.length) {\n      return html``;\n    }\n\n    const views: FullCalendarView[] = this._veryNarrow\n      ? [\"list\"]\n      : [\"list\", \"dayGridMonth\", \"dayGridDay\"];\n\n    return html`\n      <ha-card>\n        <div class=\"header\">${this._config.title}</div>\n        <ha-full-calendar\n          .narrow=${this._narrow}\n          .events=${this._events}\n          .hass=${this.hass}\n          .views=${views}\n          .initialView=${this._config.initial_view!}\n          @view-changed=${this._handleViewChanged}\n        ></ha-full-calendar>\n      </ha-card>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    const oldConfig = changedProps.get(\"_config\") as\n      | CalendarCardConfig\n      | undefined;\n\n    if (\n      !oldHass ||\n      !oldConfig ||\n      (changedProps.has(\"hass\") && oldHass.themes !== this.hass.themes) ||\n      (changedProps.has(\"_config\") && oldConfig.theme !== this._config.theme)\n    ) {\n      applyThemesOnElement(this, this.hass.themes, this._config!.theme);\n    }\n  }\n\n  private _handleViewChanged(ev: HASSDomEvent<CalendarViewChanged>): void {\n    this._startDate = ev.detail.start;\n    this._endDate = ev.detail.end;\n    this._fetchCalendarEvents();\n  }\n\n  private async _fetchCalendarEvents(): Promise<void> {\n    if (!this._startDate || !this._endDate) {\n      return;\n    }\n\n    this._events = await fetchCalendarEvents(\n      this.hass!,\n      this._startDate,\n      this._endDate,\n      this._calendars\n    );\n  }\n\n  private _measureCard() {\n    const card = this.shadowRoot!.querySelector(\"ha-card\");\n    if (!card) {\n      return;\n    }\n    this._narrow = card.offsetWidth < 870;\n    this._veryNarrow = card.offsetWidth < 350;\n\n    this._calendar?.updateSize();\n  }\n\n  private async _attachObserver(): Promise<void> {\n    if (!this._resizeObserver) {\n      await installResizeObserver();\n      this._resizeObserver = new ResizeObserver(\n        debounce(() => this._measureCard(), 250, false)\n      );\n    }\n    const card = this.shadowRoot!.querySelector(\"ha-card\");\n    // If we show an error or warning there is no ha-card\n    if (!card) {\n      return;\n    }\n    this._resizeObserver.observe(card);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-card {\n        position: relative;\n        padding: 0 8px 8px;\n        box-sizing: border-box;\n        height: 100%;\n      }\n\n      .header {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-size: var(--ha-card-header-font-size, 24px);\n        line-height: 1.2;\n        padding-top: 16px;\n        padding-left: 8px;\n        padding-inline-start: 8px;\n        direction: var(--direction);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-calendar-card\": HuiCalendarCard;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, state } from \"lit/decorators\";\nimport { DOMAINS_TOGGLE } from \"../../../common/const\";\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport \"../../../components/ha-card\";\nimport { HomeAssistant } from \"../../../types\";\nimport { computeCardSize } from \"../common/compute-card-size\";\nimport { findEntities } from \"../common/find-entities\";\nimport { processConfigEntities } from \"../common/process-config-entities\";\nimport \"../components/hui-entities-toggle\";\nimport { createHeaderFooterElement } from \"../create-element/create-header-footer-element\";\nimport { createRowElement } from \"../create-element/create-row-element\";\nimport {\n  EntityConfig,\n  LovelaceRow,\n  LovelaceRowConfig,\n} from \"../entity-rows/types\";\nimport {\n  LovelaceCard,\n  LovelaceCardEditor,\n  LovelaceHeaderFooter,\n} from \"../types\";\nimport { EntitiesCardConfig } from \"./types\";\n\n@customElement(\"hui-entities-card\")\nclass HuiEntitiesCard extends LitElement implements LovelaceCard {\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\"../editor/config-elements/hui-entities-card-editor\");\n    return document.createElement(\"hui-entities-card-editor\");\n  }\n\n  public static getStubConfig(\n    hass: HomeAssistant,\n    entities: string[],\n    entitiesFallback: string[]\n  ): EntitiesCardConfig {\n    const maxEntities = 3;\n    const foundEntities = findEntities(\n      hass,\n      maxEntities,\n      entities,\n      entitiesFallback,\n      [\"light\", \"switch\", \"sensor\"]\n    );\n\n    return { type: \"entities\", entities: foundEntities };\n  }\n\n  @state() private _config?: EntitiesCardConfig;\n\n  private _hass?: HomeAssistant;\n\n  private _configEntities?: LovelaceRowConfig[];\n\n  private _showHeaderToggle?: boolean;\n\n  private _headerElement?: LovelaceHeaderFooter;\n\n  private _footerElement?: LovelaceHeaderFooter;\n\n  set hass(hass: HomeAssistant) {\n    this._hass = hass;\n    this.shadowRoot\n      ?.querySelectorAll(\"#states > div > *\")\n      .forEach((element: unknown) => {\n        (element as LovelaceRow).hass = hass;\n      });\n    if (this._headerElement) {\n      this._headerElement.hass = hass;\n    }\n    if (this._footerElement) {\n      this._footerElement.hass = hass;\n    }\n    const entitiesToggle = this.shadowRoot?.querySelector(\n      \"hui-entities-toggle\"\n    );\n    if (entitiesToggle) {\n      (entitiesToggle as any).hass = hass;\n    }\n  }\n\n  public async getCardSize(): Promise<number> {\n    if (!this._config) {\n      return 0;\n    }\n    // +1 for the header\n    let size =\n      (this._config.title || this._showHeaderToggle ? 2 : 0) +\n      (this._config.entities.length || 1);\n    if (this._headerElement) {\n      const headerSize = computeCardSize(this._headerElement);\n      size += headerSize instanceof Promise ? await headerSize : headerSize;\n    }\n    if (this._footerElement) {\n      const footerSize = computeCardSize(this._footerElement);\n      size += footerSize instanceof Promise ? await footerSize : footerSize;\n    }\n\n    return size;\n  }\n\n  public setConfig(config: EntitiesCardConfig): void {\n    if (!config.entities || !Array.isArray(config.entities)) {\n      throw new Error(\"Entities must be specified\");\n    }\n\n    const entities = processConfigEntities(config.entities);\n\n    this._config = config;\n    this._configEntities = entities;\n    if (config.title !== undefined && config.show_header_toggle === undefined) {\n      // Default value is show toggle if we can at least toggle 2 entities.\n      let toggleable = 0;\n      for (const rowConf of entities) {\n        if (!(\"entity\" in rowConf)) {\n          continue;\n        }\n        toggleable += Number(DOMAINS_TOGGLE.has(computeDomain(rowConf.entity)));\n        if (toggleable === 2) {\n          break;\n        }\n      }\n      this._showHeaderToggle = toggleable === 2;\n    } else {\n      this._showHeaderToggle = config.show_header_toggle;\n    }\n\n    if (this._config.header) {\n      this._headerElement = createHeaderFooterElement(\n        this._config.header\n      ) as LovelaceHeaderFooter;\n      this._headerElement.type = \"header\";\n      if (this._hass) {\n        this._headerElement.hass = this._hass;\n      }\n    } else {\n      this._headerElement = undefined;\n    }\n\n    if (this._config.footer) {\n      this._footerElement = createHeaderFooterElement(\n        this._config.footer\n      ) as LovelaceHeaderFooter;\n      this._footerElement.type = \"footer\";\n      if (this._hass) {\n        this._footerElement.hass = this._hass;\n      }\n    } else {\n      this._footerElement = undefined;\n    }\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    if (!this._config || !this._hass) {\n      return;\n    }\n    const oldHass = changedProps.get(\"_hass\") as HomeAssistant | undefined;\n    const oldConfig = changedProps.get(\"_config\") as\n      | EntitiesCardConfig\n      | undefined;\n\n    if (\n      (changedProps.has(\"_hass\") &&\n        (!oldHass || oldHass.themes !== this._hass.themes)) ||\n      (changedProps.has(\"_config\") &&\n        (!oldConfig || oldConfig.theme !== this._config.theme))\n    ) {\n      applyThemesOnElement(this, this._hass.themes, this._config.theme);\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this._hass) {\n      return html``;\n    }\n\n    return html`\n      <ha-card>\n        ${this._headerElement\n          ? html`<div class=\"header-footer header\">${this._headerElement}</div>`\n          : \"\"}\n        ${!this._config.title && !this._showHeaderToggle && !this._config.icon\n          ? \"\"\n          : html`\n              <h1 class=\"card-header\">\n                <div class=\"name\">\n                  ${this._config.icon\n                    ? html`\n                        <ha-icon\n                          class=\"icon\"\n                          .icon=${this._config.icon}\n                        ></ha-icon>\n                      `\n                    : \"\"}\n                  ${this._config.title}\n                </div>\n                ${!this._showHeaderToggle\n                  ? html``\n                  : html`\n                      <hui-entities-toggle\n                        .hass=${this._hass}\n                        .entities=${(\n                          this._configEntities!.filter(\n                            (conf) => \"entity\" in conf\n                          ) as EntityConfig[]\n                        ).map((conf) => conf.entity)}\n                      ></hui-entities-toggle>\n                    `}\n              </h1>\n            `}\n        <div id=\"states\" class=\"card-content\">\n          ${this._configEntities!.map((entityConf) =>\n            this.renderEntity(entityConf)\n          )}\n        </div>\n\n        ${this._footerElement\n          ? html`<div class=\"header-footer footer\">${this._footerElement}</div>`\n          : \"\"}\n      </ha-card>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-card {\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        justify-content: space-between;\n      }\n      .card-header {\n        display: flex;\n        justify-content: space-between;\n      }\n\n      .card-header .name {\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n\n      #states {\n        flex: 1;\n      }\n\n      #states > * {\n        margin: 8px 0;\n      }\n\n      #states > *:first-child {\n        margin-top: 0;\n      }\n\n      #states > *:last-child {\n        margin-bottom: 0;\n      }\n\n      #states > div > * {\n        overflow: clip visible;\n      }\n\n      #states > div {\n        position: relative;\n      }\n\n      .icon {\n        padding: 0px 18px 0px 8px;\n      }\n\n      .header {\n        border-top-left-radius: var(--ha-card-border-radius, 2px);\n        border-top-right-radius: var(--ha-card-border-radius, 2px);\n        margin-bottom: 16px;\n        overflow: hidden;\n      }\n\n      .footer {\n        border-bottom-left-radius: var(--ha-card-border-radius, 2px);\n        border-bottom-right-radius: var(--ha-card-border-radius, 2px);\n        margin-top: -16px;\n        overflow: hidden;\n      }\n    `;\n  }\n\n  private renderEntity(entityConf: LovelaceRowConfig): TemplateResult {\n    const element = createRowElement(\n      (!(\"type\" in entityConf) || entityConf.type === \"conditional\") &&\n        this._config!.state_color\n        ? ({\n            state_color: true,\n            ...(entityConf as EntityConfig),\n          } as EntityConfig)\n        : entityConf\n    );\n    if (this._hass) {\n      element.hass = this._hass;\n    }\n\n    return html`<div>${element}</div>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-entities-card\": HuiEntitiesCard;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeActiveState } from \"../../../common/entity/compute_active_state\";\nimport { computeStateDisplay } from \"../../../common/entity/compute_state_display\";\nimport { computeStateDomain } from \"../../../common/entity/compute_state_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { isValidEntityId } from \"../../../common/entity/valid_entity_id\";\nimport {\n  formatNumber,\n  isNumericState,\n} from \"../../../common/number/format_number\";\nimport { iconColorCSS } from \"../../../common/style/icon_color_css\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon\";\nimport { UNAVAILABLE_STATES } from \"../../../data/entity\";\nimport { formatAttributeValue } from \"../../../data/entity_attributes\";\nimport { HomeAssistant } from \"../../../types\";\nimport { computeCardSize } from \"../common/compute-card-size\";\nimport { findEntities } from \"../common/find-entities\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport { createHeaderFooterElement } from \"../create-element/create-header-footer-element\";\nimport {\n  LovelaceCard,\n  LovelaceCardEditor,\n  LovelaceHeaderFooter,\n} from \"../types\";\nimport { HuiErrorCard } from \"./hui-error-card\";\nimport { EntityCardConfig } from \"./types\";\n\n@customElement(\"hui-entity-card\")\nexport class HuiEntityCard extends LitElement implements LovelaceCard {\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\"../editor/config-elements/hui-entity-card-editor\");\n    return document.createElement(\"hui-entity-card-editor\");\n  }\n\n  public static getStubConfig(\n    hass: HomeAssistant,\n    entities: string[],\n    entitiesFill: string[]\n  ) {\n    const includeDomains = [\"sensor\", \"light\", \"switch\"];\n    const maxEntities = 1;\n    const foundEntities = findEntities(\n      hass,\n      maxEntities,\n      entities,\n      entitiesFill,\n      includeDomains\n    );\n\n    return {\n      entity: foundEntities[0] || \"\",\n    };\n  }\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: EntityCardConfig;\n\n  private _footerElement?: HuiErrorCard | LovelaceHeaderFooter;\n\n  public setConfig(config: EntityCardConfig): void {\n    if (!config.entity) {\n      throw new Error(\"Entity must be specified\");\n    }\n    if (config.entity && !isValidEntityId(config.entity)) {\n      throw new Error(\"Invalid entity\");\n    }\n\n    this._config = config;\n\n    if (this._config.footer) {\n      this._footerElement = createHeaderFooterElement(this._config.footer);\n    } else if (this._footerElement) {\n      this._footerElement = undefined;\n    }\n  }\n\n  public async getCardSize(): Promise<number> {\n    let size = 2;\n    if (this._footerElement) {\n      const footerSize = computeCardSize(this._footerElement);\n      size += footerSize instanceof Promise ? await footerSize : footerSize;\n    }\n    return size;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    const domain = computeStateDomain(stateObj);\n    const showUnit = this._config.attribute\n      ? this._config.attribute in stateObj.attributes\n      : !UNAVAILABLE_STATES.includes(stateObj.state);\n\n    const name = this._config.name || computeStateName(stateObj);\n\n    return html`\n      <ha-card @click=${this._handleClick} tabindex=\"0\">\n        <div class=\"header\">\n          <div class=\"name\" .title=${name}>${name}</div>\n          <div class=\"icon\">\n            <ha-state-icon\n              .icon=${this._config.icon}\n              .state=${stateObj}\n              data-domain=${ifDefined(\n                this._config.state_color ||\n                  (domain === \"light\" && this._config.state_color !== false)\n                  ? domain\n                  : undefined\n              )}\n              data-state=${stateObj ? computeActiveState(stateObj) : \"\"}\n            ></ha-state-icon>\n          </div>\n        </div>\n        <div class=\"info\">\n          <span class=\"value\"\n            >${\"attribute\" in this._config\n              ? stateObj.attributes[this._config.attribute!] !== undefined\n                ? formatAttributeValue(\n                    this.hass,\n                    stateObj.attributes[this._config.attribute!]\n                  )\n                : this.hass.localize(\"state.default.unknown\")\n              : isNumericState(stateObj)\n              ? formatNumber(stateObj.state, this.hass.locale)\n              : computeStateDisplay(\n                  this.hass.localize,\n                  stateObj,\n                  this.hass.locale\n                )}</span\n          >${showUnit\n            ? html`\n                <span class=\"measurement\"\n                  >${this._config.unit ||\n                  (this._config.attribute\n                    ? \"\"\n                    : stateObj.attributes.unit_of_measurement)}</span\n                >\n              `\n            : \"\"}\n        </div>\n        ${this._footerElement}\n      </ha-card>\n    `;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    // Side Effect used to update footer hass while keeping optimizations\n    if (this._footerElement) {\n      this._footerElement.hass = this.hass;\n    }\n\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    const oldConfig = changedProps.get(\"_config\") as\n      | EntityCardConfig\n      | undefined;\n\n    if (\n      !oldHass ||\n      !oldConfig ||\n      oldHass.themes !== this.hass.themes ||\n      oldConfig.theme !== this._config.theme\n    ) {\n      applyThemesOnElement(this, this.hass.themes, this._config!.theme);\n    }\n  }\n\n  private _handleClick(): void {\n    fireEvent(this, \"hass-more-info\", { entityId: this._config!.entity });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      iconColorCSS,\n      css`\n        ha-card {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n          justify-content: space-between;\n          cursor: pointer;\n          outline: none;\n        }\n\n        .header {\n          display: flex;\n          padding: 8px 16px 0;\n          justify-content: space-between;\n        }\n\n        .name {\n          color: var(--secondary-text-color);\n          line-height: 40px;\n          font-weight: 500;\n          font-size: 16px;\n          overflow: hidden;\n          white-space: nowrap;\n          text-overflow: ellipsis;\n        }\n\n        .icon {\n          color: var(--state-icon-color, #44739e);\n          line-height: 40px;\n        }\n\n        .info {\n          padding: 0px 16px 16px;\n          margin-top: -4px;\n          overflow: hidden;\n          white-space: nowrap;\n          text-overflow: ellipsis;\n          line-height: 28px;\n        }\n\n        .value {\n          font-size: 28px;\n          margin-right: 4px;\n        }\n\n        .measurement {\n          font-size: 18px;\n          color: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-entity-card\": HuiEntityCard;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateDisplay } from \"../../../common/entity/compute_state_display\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport \"../../../components/entity/state-badge\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon\";\nimport \"../../../components/ha-relative-time\";\nimport { UNAVAILABLE_STATES } from \"../../../data/entity\";\nimport {\n  ActionHandlerEvent,\n  CallServiceActionConfig,\n  MoreInfoActionConfig,\n} from \"../../../data/lovelace\";\nimport { SENSOR_DEVICE_CLASS_TIMESTAMP } from \"../../../data/sensor\";\nimport { HomeAssistant } from \"../../../types\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { findEntities } from \"../common/find-entities\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport { processConfigEntities } from \"../common/process-config-entities\";\nimport \"../components/hui-timestamp-display\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport \"../components/hui-warning-element\";\nimport { LovelaceCard, LovelaceCardEditor } from \"../types\";\nimport { GlanceCardConfig, GlanceConfigEntity } from \"./types\";\n\n@customElement(\"hui-glance-card\")\nexport class HuiGlanceCard extends LitElement implements LovelaceCard {\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\"../editor/config-elements/hui-glance-card-editor\");\n    return document.createElement(\"hui-glance-card-editor\");\n  }\n\n  public static getStubConfig(\n    hass: HomeAssistant,\n    entities: string[],\n    entitiesFallback: string[]\n  ): GlanceCardConfig {\n    const includeDomains = [\"sensor\"];\n    const maxEntities = 3;\n    const foundEntities = findEntities(\n      hass,\n      maxEntities,\n      entities,\n      entitiesFallback,\n      includeDomains\n    );\n\n    return { type: \"glance\", entities: foundEntities };\n  }\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: GlanceCardConfig;\n\n  private _configEntities?: GlanceConfigEntity[];\n\n  public getCardSize(): number {\n    const rowHeight =\n      (this._config!.show_icon ? 1 : 0) +\n      (this._config!.show_name ? 1 : 0) +\n      (this._config!.show_state ? 1 : 0);\n\n    const numRows = Math.ceil(\n      this._configEntities!.length / (this._config!.columns || 5)\n    );\n\n    return (this._config!.title ? 2 : 0) + rowHeight * numRows;\n  }\n\n  public setConfig(config: GlanceCardConfig): void {\n    this._config = {\n      show_name: true,\n      show_state: true,\n      show_icon: true,\n      state_color: true,\n      ...config,\n    };\n    const entities = processConfigEntities<GlanceConfigEntity>(\n      config.entities\n    ).map((entityConf) => ({\n      hold_action: { action: \"more-info\" } as MoreInfoActionConfig,\n      ...entityConf,\n    }));\n\n    for (const entity of entities) {\n      if (\n        (entity.tap_action &&\n          entity.tap_action.action === \"call-service\" &&\n          !entity.tap_action.service) ||\n        (entity.hold_action &&\n          entity.hold_action.action === \"call-service\" &&\n          !(entity.hold_action as CallServiceActionConfig).service)\n      ) {\n        throw new Error(\n          'Missing required property \"service\" when tap_action or hold_action is call-service'\n        );\n      }\n    }\n\n    const columns = config.columns || Math.min(config.entities.length, 5);\n    this.style.setProperty(\"--glance-column-width\", `${100 / columns}%`);\n\n    this._configEntities = entities;\n\n    if (this.hass) {\n      this.requestUpdate();\n    }\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    if (changedProps.has(\"_config\")) {\n      return true;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n\n    if (\n      !this._configEntities ||\n      !oldHass ||\n      oldHass.themes !== this.hass!.themes ||\n      oldHass.locale !== this.hass!.locale\n    ) {\n      return true;\n    }\n\n    for (const entity of this._configEntities) {\n      if (oldHass.states[entity.entity] !== this.hass!.states[entity.entity]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n    const { title } = this._config;\n\n    return html`\n      <ha-card .header=${title}>\n        <div class=${classMap({ entities: true, \"no-header\": !title })}>\n          ${this._configEntities!.map((entityConf) =>\n            this.renderEntity(entityConf)\n          )}\n        </div>\n      </ha-card>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    const oldConfig = changedProps.get(\"_config\") as\n      | GlanceCardConfig\n      | undefined;\n\n    if (\n      !oldHass ||\n      !oldConfig ||\n      oldHass.themes !== this.hass.themes ||\n      oldConfig.theme !== this._config.theme\n    ) {\n      applyThemesOnElement(this, this.hass.themes, this._config.theme);\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-card {\n        height: 100%;\n      }\n      .entities {\n        display: flex;\n        padding: 0 16px 4px;\n        flex-wrap: wrap;\n        box-sizing: border-box;\n        align-items: center;\n        align-content: center;\n      }\n      .entities.no-header {\n        padding-top: 16px;\n      }\n      .entity {\n        box-sizing: border-box;\n        padding: 0 4px;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        cursor: pointer;\n        margin-bottom: 12px;\n        width: var(--glance-column-width, 20%);\n      }\n      .entity:focus {\n        outline: none;\n        background: var(--divider-color);\n        border-radius: 14px;\n        padding: 4px;\n        margin: -4px 0;\n      }\n      .entity div {\n        width: 100%;\n        text-align: center;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n      .name {\n        min-height: var(--paper-font-body1_-_line-height, 20px);\n      }\n      .warning {\n        cursor: default;\n        position: relative;\n        padding: 8px;\n        width: calc(var(--glance-column-width, 20%) - 4px);\n        margin: 0 2px;\n      }\n      .warning::before {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        opacity: 0.12;\n        pointer-events: none;\n        content: \"\";\n        border-radius: 4px;\n        background-color: var(--warning-color);\n      }\n      state-badge {\n        margin: 8px 0;\n      }\n      hui-warning-element {\n        padding: 8px;\n      }\n    `;\n  }\n\n  private renderEntity(entityConf): TemplateResult {\n    const stateObj = this.hass!.states[entityConf.entity];\n\n    if (!stateObj) {\n      return html`<div class=\"entity warning\">\n        ${this._config!.show_name\n          ? html`\n              <div class=\"name\">\n                ${createEntityNotFoundWarning(this.hass!, entityConf.entity)}\n              </div>\n            `\n          : \"\"}\n        ${this._config!.show_icon\n          ? html` <hui-warning-element\n              .label=${createEntityNotFoundWarning(\n                this.hass!,\n                entityConf.entity\n              )}\n            ></hui-warning-element>`\n          : \"\"}\n        <div>${this._config!.show_state ? entityConf.entity : \"\"}</div>\n      </div>`;\n    }\n\n    const name = entityConf.name ?? computeStateName(stateObj);\n\n    return html`\n      <div\n        class=\"entity\"\n        .config=${entityConf}\n        @action=${this._handleAction}\n        .actionHandler=${actionHandler({\n          hasHold: hasAction(entityConf.hold_action),\n          hasDoubleClick: hasAction(entityConf.double_tap_action),\n        })}\n        tabindex=${ifDefined(\n          hasAction(entityConf.tap_action) ? \"0\" : undefined\n        )}\n      >\n        ${this._config!.show_name\n          ? html` <div class=\"name\" .title=${name}>${name}</div> `\n          : \"\"}\n        ${this._config!.show_icon\n          ? html`\n              <state-badge\n                .hass=${this.hass}\n                .stateObj=${stateObj}\n                .overrideIcon=${entityConf.icon}\n                .overrideImage=${entityConf.image}\n                .stateColor=${(entityConf.state_color === false ||\n                  entityConf.state_color) ??\n                this._config!.state_color}\n              ></state-badge>\n            `\n          : \"\"}\n        ${this._config!.show_state && entityConf.show_state !== false\n          ? html`\n              <div>\n                ${computeDomain(entityConf.entity) === \"sensor\" &&\n                stateObj.attributes.device_class ===\n                  SENSOR_DEVICE_CLASS_TIMESTAMP &&\n                !UNAVAILABLE_STATES.includes(stateObj.state)\n                  ? html`\n                      <hui-timestamp-display\n                        .hass=${this.hass}\n                        .ts=${new Date(stateObj.state)}\n                        .format=${entityConf.format}\n                        capitalize\n                      ></hui-timestamp-display>\n                    `\n                  : entityConf.show_last_changed\n                  ? html`\n                      <ha-relative-time\n                        .hass=${this.hass}\n                        .datetime=${stateObj.last_changed}\n                        capitalize\n                      ></ha-relative-time>\n                    `\n                  : computeStateDisplay(\n                      this.hass!.localize,\n                      stateObj,\n                      this.hass!.locale\n                    )}\n              </div>\n            `\n          : \"\"}\n      </div>\n    `;\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    const config = (ev.currentTarget as any).config as GlanceConfigEntity;\n    handleAction(this, this.hass!, config, ev.detail.action!);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-glance-card\": HuiGlanceCard;\n  }\n}\n","import { css, CSSResultGroup } from \"lit\";\nimport { computeCardSize } from \"../common/compute-card-size\";\nimport { LovelaceCardEditor } from \"../types\";\nimport { HuiStackCard } from \"./hui-stack-card\";\nimport { GridCardConfig } from \"./types\";\n\nconst DEFAULT_COLUMNS = 3;\nconst SQUARE_ROW_HEIGHTS_BY_COLUMNS = {\n  1: 5,\n  2: 3,\n  3: 2,\n};\n\nclass HuiGridCard extends HuiStackCard<GridCardConfig> {\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\"../editor/config-elements/hui-grid-card-editor\");\n    return document.createElement(\"hui-grid-card-editor\");\n  }\n\n  public async getCardSize(): Promise<number> {\n    if (!this._cards || !this._config) {\n      return 0;\n    }\n\n    if (this.square) {\n      const rowHeight = SQUARE_ROW_HEIGHTS_BY_COLUMNS[this.columns] || 1;\n      return (\n        (this._cards.length < this.columns\n          ? rowHeight\n          : (this._cards.length / this.columns) * rowHeight) +\n        (this._config.title ? 1 : 0)\n      );\n    }\n\n    const promises: Array<Promise<number> | number> = [];\n\n    for (const element of this._cards) {\n      promises.push(computeCardSize(element));\n    }\n\n    const cardSizes = await Promise.all(promises);\n\n    let totalHeight = this._config.title ? 1 : 0;\n\n    // Each column will adjust to max card size of it's row\n    for (let start = 0; start < cardSizes.length; start += this.columns) {\n      totalHeight += Math.max(...cardSizes.slice(start, start + this.columns));\n    }\n\n    return totalHeight;\n  }\n\n  get columns() {\n    return this._config?.columns || DEFAULT_COLUMNS;\n  }\n\n  get square() {\n    return this._config?.square !== false;\n  }\n\n  setConfig(config: GridCardConfig) {\n    super.setConfig(config);\n    this.style.setProperty(\"--grid-card-column-count\", String(this.columns));\n    if (this.square) {\n      this.setAttribute(\"square\", \"\");\n    } else {\n      this.removeAttribute(\"square\");\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      super.sharedStyles,\n      css`\n        #root {\n          display: grid;\n          grid-template-columns: repeat(\n            var(--grid-card-column-count, ${DEFAULT_COLUMNS}),\n            minmax(0, 1fr)\n          );\n          grid-gap: var(--grid-card-gap, 8px);\n        }\n        :host([square]) #root {\n          grid-auto-rows: 1fr;\n        }\n        :host([square]) #root::before {\n          content: \"\";\n          width: 0;\n          padding-bottom: 100%;\n          grid-row: 1 / 1;\n          grid-column: 1 / 1;\n        }\n\n        :host([square]) #root > *:not([hidden]) {\n          grid-row: 1 / 1;\n          grid-column: 1 / 1;\n        }\n        :host([square]) #root > *:not([hidden]) ~ *:not([hidden]) {\n          /*\n\t       * Remove grid-row and grid-column from every element that comes after\n\t       * the first not-hidden element\n\t       */\n          grid-row: unset;\n          grid-column: unset;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-grid-card\": HuiGridCard;\n  }\n}\n\ncustomElements.define(\"hui-grid-card\", HuiGridCard);\n","import { mdiDotsVertical } from \"@mdi/js\";\nimport \"@thomasloven/round-slider\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeStateDisplay } from \"../../../common/entity/compute_state_display\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-state-icon\";\nimport { UNAVAILABLE, UNAVAILABLE_STATES } from \"../../../data/entity\";\nimport { LightEntity, lightSupportsBrightness } from \"../../../data/light\";\nimport { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { findEntities } from \"../common/find-entities\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport { LovelaceCard, LovelaceCardEditor } from \"../types\";\nimport { LightCardConfig } from \"./types\";\n\n@customElement(\"hui-light-card\")\nexport class HuiLightCard extends LitElement implements LovelaceCard {\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\"../editor/config-elements/hui-light-card-editor\");\n    return document.createElement(\"hui-light-card-editor\");\n  }\n\n  public static getStubConfig(\n    hass: HomeAssistant,\n    entities: string[],\n    entitiesFallback: string[]\n  ): LightCardConfig {\n    const includeDomains = [\"light\"];\n    const maxEntities = 1;\n    const foundEntities = findEntities(\n      hass,\n      maxEntities,\n      entities,\n      entitiesFallback,\n      includeDomains\n    );\n\n    return { type: \"light\", entity: foundEntities[0] || \"\" };\n  }\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: LightCardConfig;\n\n  private _brightnessTimout?: number;\n\n  public getCardSize(): number {\n    return 5;\n  }\n\n  public setConfig(config: LightCardConfig): void {\n    if (!config.entity || config.entity.split(\".\")[0] !== \"light\") {\n      throw new Error(\"Specify an entity from within the light domain\");\n    }\n\n    this._config = {\n      tap_action: { action: \"toggle\" },\n      hold_action: { action: \"more-info\" },\n      ...config,\n    };\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config!.entity] as LightEntity;\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    const brightness = Math.round(\n      ((stateObj.attributes.brightness || 0) / 255) * 100\n    );\n\n    const name = this._config.name ?? computeStateName(stateObj);\n\n    return html`\n      <ha-card>\n        <ha-icon-button\n          class=\"more-info\"\n          .label=${this.hass!.localize(\n            \"ui.panel.lovelace.cards.show_more_info\"\n          )}\n          .path=${mdiDotsVertical}\n          @click=${this._handleMoreInfo}\n          tabindex=\"0\"\n        ></ha-icon-button>\n\n        <div class=\"content\">\n          <div id=\"controls\">\n            <div id=\"slider\">\n              <round-slider\n                min=\"1\"\n                max=\"100\"\n                .value=${brightness}\n                .disabled=${UNAVAILABLE_STATES.includes(stateObj.state)}\n                @value-changing=${this._dragEvent}\n                @value-changed=${this._setBrightness}\n                style=${styleMap({\n                  visibility: lightSupportsBrightness(stateObj)\n                    ? \"visible\"\n                    : \"hidden\",\n                })}\n              ></round-slider>\n              <ha-icon-button\n                class=\"light-button ${classMap({\n                  \"slider-center\": lightSupportsBrightness(stateObj),\n                  \"state-on\": stateObj.state === \"on\",\n                  \"state-unavailable\": stateObj.state === UNAVAILABLE,\n                })}\"\n                .disabled=${UNAVAILABLE_STATES.includes(stateObj.state)}\n                style=${styleMap({\n                  filter: this._computeBrightness(stateObj),\n                  color: this._computeColor(stateObj),\n                })}\n                @action=${this._handleAction}\n                .actionHandler=${actionHandler({\n                  hasHold: hasAction(this._config!.hold_action),\n                  hasDoubleClick: hasAction(this._config!.double_tap_action),\n                })}\n                tabindex=\"0\"\n              >\n                <ha-state-icon\n                  .icon=${this._config.icon}\n                  .state=${stateObj}\n                ></ha-state-icon>\n              </ha-icon-button>\n            </div>\n          </div>\n\n          <div id=\"info\" .title=${name}>\n            ${UNAVAILABLE_STATES.includes(stateObj.state)\n              ? html`\n                  <div>\n                    ${computeStateDisplay(\n                      this.hass.localize,\n                      stateObj,\n                      this.hass.locale\n                    )}\n                  </div>\n                `\n              : html` <div class=\"brightness\">%</div> `}\n            ${name}\n          </div>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const stateObj = this.hass!.states[this._config!.entity];\n\n    if (!stateObj) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    const oldConfig = changedProps.get(\"_config\") as\n      | LightCardConfig\n      | undefined;\n\n    if (\n      !oldHass ||\n      !oldConfig ||\n      oldHass.themes !== this.hass.themes ||\n      oldConfig.theme !== this._config.theme\n    ) {\n      applyThemesOnElement(this, this.hass.themes, this._config.theme);\n    }\n  }\n\n  private _dragEvent(e: any): void {\n    this.shadowRoot!.querySelector(\n      \".brightness\"\n    )!.innerHTML = `${e.detail.value} %`;\n    this._showBrightness();\n    this._hideBrightness();\n  }\n\n  private _showBrightness(): void {\n    clearTimeout(this._brightnessTimout);\n    this.shadowRoot!.querySelector(\".brightness\")!.classList.add(\n      \"show_brightness\"\n    );\n  }\n\n  private _hideBrightness(): void {\n    this._brightnessTimout = window.setTimeout(() => {\n      this.shadowRoot!.querySelector(\".brightness\")!.classList.remove(\n        \"show_brightness\"\n      );\n    }, 500);\n  }\n\n  private _setBrightness(e: any): void {\n    this.hass!.callService(\"light\", \"turn_on\", {\n      entity_id: this._config!.entity,\n      brightness_pct: e.detail.value,\n    });\n  }\n\n  private _computeBrightness(stateObj: LightEntity): string {\n    if (stateObj.state === \"off\" || !stateObj.attributes.brightness) {\n      return \"\";\n    }\n    const brightness = stateObj.attributes.brightness;\n    return `brightness(${(brightness + 245) / 5}%)`;\n  }\n\n  private _computeColor(stateObj: LightEntity): string {\n    if (stateObj.state === \"off\") {\n      return \"\";\n    }\n    return stateObj.attributes.rgb_color\n      ? `rgb(${stateObj.attributes.rgb_color.join(\",\")})`\n      : \"\";\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    handleAction(this, this.hass!, this._config!, ev.detail.action!);\n  }\n\n  private _handleMoreInfo() {\n    fireEvent(this, \"hass-more-info\", {\n      entityId: this._config!.entity,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-card {\n        height: 100%;\n        box-sizing: border-box;\n        position: relative;\n        overflow: hidden;\n        text-align: center;\n        --name-font-size: 1.2rem;\n        --brightness-font-size: 1.2rem;\n      }\n\n      .more-info {\n        position: absolute;\n        cursor: pointer;\n        top: 0;\n        right: 0;\n        inset-inline-start: initial;\n        inset-inline-end: 0;\n        border-radius: 100%;\n        color: var(--secondary-text-color);\n        z-index: 1;\n        direction: var(--direction);\n      }\n\n      .content {\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n      }\n\n      #controls {\n        display: flex;\n        justify-content: center;\n        padding: 16px;\n        position: relative;\n      }\n\n      #slider {\n        height: 100%;\n        width: 100%;\n        position: relative;\n        max-width: 200px;\n        min-width: 100px;\n      }\n\n      round-slider {\n        --round-slider-path-color: var(--slider-track-color);\n        --round-slider-bar-color: var(--primary-color);\n        padding-bottom: 10%;\n      }\n\n      .light-button {\n        color: var(--paper-item-icon-color, #44739e);\n        width: 60%;\n        height: auto;\n        position: absolute;\n        max-width: calc(100% - 40px);\n        box-sizing: border-box;\n        border-radius: 100%;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        --mdc-icon-button-size: 100%;\n        --mdc-icon-size: 100%;\n      }\n\n      .light-button.state-on {\n        color: var(--paper-item-icon-active-color, #fdd835);\n      }\n\n      .light-button.state-unavailable {\n        color: var(--state-icon-unavailable-color);\n      }\n\n      #info {\n        text-align: center;\n        margin-top: -56px;\n        padding: 16px;\n        font-size: var(--name-font-size);\n      }\n\n      .brightness {\n        font-size: var(--brightness-font-size);\n        opacity: 0;\n        transition: opacity 0.5s ease-in-out;\n        -moz-transition: opacity 0.5s ease-in-out;\n        -webkit-transition: opacity 0.5s ease-in-out;\n      }\n\n      .show_brightness {\n        opacity: 1;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-light-card\": HuiLightCard;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { LovelaceCardConfig } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\nimport { createCardElement } from \"../create-element/create-card-element\";\nimport { LovelaceCard, LovelaceCardEditor } from \"../types\";\nimport { StackCardConfig } from \"./types\";\n\nexport abstract class HuiStackCard<T extends StackCardConfig = StackCardConfig>\n  extends LitElement\n  implements LovelaceCard\n{\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\"../editor/config-elements/hui-stack-card-editor\");\n    return document.createElement(\"hui-stack-card-editor\");\n  }\n\n  public static getStubConfig(): Record<string, unknown> {\n    return { cards: [] };\n  }\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public editMode?: boolean;\n\n  @property() protected _cards?: LovelaceCard[];\n\n  @state() protected _config?: T;\n\n  public getCardSize(): number | Promise<number> {\n    return 1;\n  }\n\n  public setConfig(config: T): void {\n    if (!config || !config.cards || !Array.isArray(config.cards)) {\n      throw new Error(\"Invalid configuration\");\n    }\n    this._config = config;\n    this._cards = config.cards.map((card) => {\n      const element = this._createCardElement(card) as LovelaceCard;\n      return element;\n    });\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (\n      !this._cards ||\n      (!changedProps.has(\"hass\") && !changedProps.has(\"editMode\"))\n    ) {\n      return;\n    }\n\n    for (const element of this._cards) {\n      if (this.hass) {\n        element.hass = this.hass;\n      }\n      if (this.editMode !== undefined) {\n        element.editMode = this.editMode;\n      }\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this._cards) {\n      return html``;\n    }\n\n    return html`\n      ${this._config.title\n        ? html`<h1 class=\"card-header\">${this._config.title}</h1>`\n        : \"\"}\n      <div id=\"root\">${this._cards}</div>\n    `;\n  }\n\n  static get sharedStyles(): CSSResultGroup {\n    return css`\n      .card-header {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        font-weight: normal;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        letter-spacing: -0.012em;\n        line-height: 32px;\n        display: block;\n        padding: 24px 16px 16px;\n      }\n    `;\n  }\n\n  private _createCardElement(cardConfig: LovelaceCardConfig) {\n    const element = createCardElement(cardConfig) as LovelaceCard;\n    if (this.hass) {\n      element.hass = this.hass;\n    }\n    element.addEventListener(\n      \"ll-rebuild\",\n      (ev) => {\n        ev.stopPropagation();\n        this._rebuildCard(element, cardConfig);\n      },\n      { once: true }\n    );\n    return element;\n  }\n\n  private _rebuildCard(\n    cardElToReplace: LovelaceCard,\n    config: LovelaceCardConfig\n  ): void {\n    const newCardEl = this._createCardElement(config);\n    if (cardElToReplace.parentElement) {\n      cardElToReplace.parentElement.replaceChild(newCardEl, cardElToReplace);\n    }\n    this._cards = this._cards!.map((curCardEl) =>\n      curCardEl === cardElToReplace ? newCardEl : curCardEl\n    );\n  }\n}\n","import {\n  mdiAutorenew,\n  mdiCalendarSync,\n  mdiDotsVertical,\n  mdiFan,\n  mdiFire,\n  mdiPower,\n  mdiSnowflake,\n  mdiWaterPercent,\n} from \"@mdi/js\";\nimport \"@thomasloven/round-slider\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  svg,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { UNIT_F } from \"../../../common/const\";\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { formatNumber } from \"../../../common/number/format_number\";\nimport \"../../../components/ha-card\";\nimport type { HaCard } from \"../../../components/ha-card\";\nimport \"../../../components/ha-icon-button\";\nimport {\n  ClimateEntity,\n  CLIMATE_PRESET_NONE,\n  compareClimateHvacModes,\n  HvacMode,\n} from \"../../../data/climate\";\nimport { UNAVAILABLE } from \"../../../data/entity\";\nimport { HomeAssistant } from \"../../../types\";\nimport { findEntities } from \"../common/find-entities\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport { LovelaceCard, LovelaceCardEditor } from \"../types\";\nimport { ThermostatCardConfig } from \"./types\";\n\nconst modeIcons: { [mode in HvacMode]: string } = {\n  auto: mdiCalendarSync,\n  heat_cool: mdiAutorenew,\n  heat: mdiFire,\n  cool: mdiSnowflake,\n  off: mdiPower,\n  fan_only: mdiFan,\n  dry: mdiWaterPercent,\n};\n\n@customElement(\"hui-thermostat-card\")\nexport class HuiThermostatCard extends LitElement implements LovelaceCard {\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\"../editor/config-elements/hui-thermostat-card-editor\");\n    return document.createElement(\"hui-thermostat-card-editor\");\n  }\n\n  public static getStubConfig(\n    hass: HomeAssistant,\n    entities: string[],\n    entitiesFallback: string[]\n  ): ThermostatCardConfig {\n    const includeDomains = [\"climate\"];\n    const maxEntities = 1;\n    const foundEntities = findEntities(\n      hass,\n      maxEntities,\n      entities,\n      entitiesFallback,\n      includeDomains\n    );\n\n    return { type: \"thermostat\", entity: foundEntities[0] || \"\" };\n  }\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: ThermostatCardConfig;\n\n  @state() private _setTemp?: number | number[];\n\n  @query(\"ha-card\") private _card?: HaCard;\n\n  public getCardSize(): number {\n    return 7;\n  }\n\n  public setConfig(config: ThermostatCardConfig): void {\n    if (!config.entity || config.entity.split(\".\")[0] !== \"climate\") {\n      throw new Error(\"Specify an entity from within the climate domain\");\n    }\n\n    this._config = config;\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n    const stateObj = this.hass.states[this._config.entity] as ClimateEntity;\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    const mode = stateObj.state in modeIcons ? stateObj.state : \"unknown-mode\";\n    const name =\n      this._config!.name ||\n      computeStateName(this.hass!.states[this._config!.entity]);\n    const targetTemp =\n      stateObj.attributes.temperature !== null &&\n      Number.isFinite(Number(stateObj.attributes.temperature))\n        ? stateObj.attributes.temperature\n        : stateObj.attributes.min_temp;\n\n    const slider =\n      stateObj.state === UNAVAILABLE\n        ? html` <round-slider disabled=\"true\"></round-slider> `\n        : html`\n            <round-slider\n              .value=${targetTemp}\n              .low=${stateObj.attributes.target_temp_low}\n              .high=${stateObj.attributes.target_temp_high}\n              .min=${stateObj.attributes.min_temp}\n              .max=${stateObj.attributes.max_temp}\n              .step=${this._stepSize}\n              @value-changing=${this._dragEvent}\n              @value-changed=${this._setTemperature}\n            ></round-slider>\n          `;\n\n    const currentTemperature = svg`\n        <svg viewBox=\"0 0 40 20\">\n          <text\n            x=\"50%\"\n            dx=\"1\"\n            y=\"60%\"\n            text-anchor=\"middle\"\n            style=\"font-size: 13px;\"\n          >\n            ${\n              stateObj.attributes.current_temperature !== null &&\n              !isNaN(stateObj.attributes.current_temperature)\n                ? svg`${formatNumber(\n                    stateObj.attributes.current_temperature,\n                    this.hass.locale\n                  )}\n            <tspan dx=\"-3\" dy=\"-6.5\" style=\"font-size: 4px;\">\n              ${this.hass.config.unit_system.temperature}\n            </tspan>`\n                : \"\"\n            }\n          </text>\n        </svg>\n      `;\n\n    const setValues = svg`\n      <svg id=\"set-values\">\n        <g>\n          <text text-anchor=\"middle\" class=\"set-value\">\n            ${\n              stateObj.state === UNAVAILABLE\n                ? this.hass.localize(\"state.default.unavailable\")\n                : this._setTemp === undefined || this._setTemp === null\n                ? \"\"\n                : Array.isArray(this._setTemp)\n                ? this._stepSize === 1\n                  ? svg`\n                      ${formatNumber(this._setTemp[0], this.hass.locale, {\n                        maximumFractionDigits: 0,\n                      })} -\n                      ${formatNumber(this._setTemp[1], this.hass.locale, {\n                        maximumFractionDigits: 0,\n                      })}\n                      `\n                  : svg`\n                      ${formatNumber(this._setTemp[0], this.hass.locale, {\n                        minimumFractionDigits: 1,\n                        maximumFractionDigits: 1,\n                      })} -\n                      ${formatNumber(this._setTemp[1], this.hass.locale, {\n                        minimumFractionDigits: 1,\n                        maximumFractionDigits: 1,\n                      })}\n                      `\n                : this._stepSize === 1\n                ? svg`\n                      ${formatNumber(this._setTemp, this.hass.locale, {\n                        maximumFractionDigits: 0,\n                      })}\n                      `\n                : svg`\n                      ${formatNumber(this._setTemp, this.hass.locale, {\n                        minimumFractionDigits: 1,\n                        maximumFractionDigits: 1,\n                      })}\n                      `\n            }\n          </text>\n          <text\n            dy=\"22\"\n            text-anchor=\"middle\"\n            id=\"set-mode\"\n          >\n            ${\n              stateObj.attributes.hvac_action\n                ? this.hass!.localize(\n                    `state_attributes.climate.hvac_action.${stateObj.attributes.hvac_action}`\n                  )\n                : this.hass!.localize(\n                    `component.climate.state._.${stateObj.state}`\n                  )\n            }\n            ${\n              stateObj.attributes.preset_mode &&\n              stateObj.attributes.preset_mode !== CLIMATE_PRESET_NONE\n                ? html`\n                    -\n                    ${this.hass!.localize(\n                      `state_attributes.climate.preset_mode.${stateObj.attributes.preset_mode}`\n                    ) || stateObj.attributes.preset_mode}\n                  `\n                : \"\"\n            }\n          </text>\n        </g>\n      </svg>\n    `;\n\n    return html`\n      <ha-card\n        class=${classMap({\n          [mode]: true,\n        })}\n      >\n        <ha-icon-button\n          class=\"more-info\"\n          .label=${this.hass!.localize(\n            \"ui.panel.lovelace.cards.show_more_info\"\n          )}\n          .path=${mdiDotsVertical}\n          @click=${this._handleMoreInfo}\n          tabindex=\"0\"\n        ></ha-icon-button>\n\n        <div class=\"content\">\n          <div id=\"controls\">\n            <div id=\"slider\">\n              ${slider}\n              <div id=\"slider-center\">\n                <div id=\"temperature\">${currentTemperature} ${setValues}</div>\n              </div>\n            </div>\n          </div>\n          <div id=\"info\" .title=${name}>\n            <div id=\"modes\">\n              ${(stateObj.attributes.hvac_modes || [])\n                .concat()\n                .sort(compareClimateHvacModes)\n                .map((modeItem) => this._renderIcon(modeItem, mode))}\n            </div>\n            ${name}\n          </div>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    if (\n      !this._config ||\n      !this.hass ||\n      (!changedProps.has(\"hass\") && !changedProps.has(\"_config\"))\n    ) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    const oldConfig = changedProps.get(\"_config\") as\n      | ThermostatCardConfig\n      | undefined;\n\n    if (\n      !oldHass ||\n      !oldConfig ||\n      oldHass.themes !== this.hass.themes ||\n      oldConfig.theme !== this._config.theme\n    ) {\n      applyThemesOnElement(this, this.hass.themes, this._config.theme);\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n    if (!stateObj) {\n      return;\n    }\n\n    if (!oldHass || oldHass.states[this._config.entity] !== stateObj) {\n      this._rescale_svg();\n    }\n  }\n\n  public willUpdate(changedProps: PropertyValues) {\n    if (!this.hass || !this._config || !changedProps.has(\"hass\")) {\n      return;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n    if (!stateObj) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n\n    if (!oldHass || oldHass.states[this._config.entity] !== stateObj) {\n      this._setTemp = this._getSetTemp(stateObj);\n    }\n  }\n\n  private _rescale_svg() {\n    // Set the viewbox of the SVG containing the set temperature to perfectly\n    // fit the text\n    // That way it will auto-scale correctly\n    // This is not done to the SVG containing the current temperature, because\n    // it should not be centered on the text, but only on the value\n    const card = this._card;\n    if (card) {\n      card.updateComplete.then(() => {\n        const svgRoot = this.shadowRoot!.querySelector(\"#set-values\")!;\n        const box = svgRoot.querySelector(\"g\")!.getBBox()!;\n        svgRoot.setAttribute(\n          \"viewBox\",\n          `${box.x} ${box!.y} ${box.width} ${box.height}`\n        );\n        svgRoot.setAttribute(\"width\", `${box.width}`);\n        svgRoot.setAttribute(\"height\", `${box.height}`);\n      });\n    }\n  }\n\n  private get _stepSize(): number {\n    const stateObj = this.hass!.states[this._config!.entity] as ClimateEntity;\n\n    if (stateObj.attributes.target_temp_step) {\n      return stateObj.attributes.target_temp_step;\n    }\n    return this.hass!.config.unit_system.temperature === UNIT_F ? 1 : 0.5;\n  }\n\n  private _getSetTemp(\n    stateObj: HassEntity\n  ): undefined | number | [number, number] {\n    if (stateObj.state === UNAVAILABLE) {\n      return undefined;\n    }\n\n    if (\n      stateObj.attributes.target_temp_low &&\n      stateObj.attributes.target_temp_high\n    ) {\n      return [\n        stateObj.attributes.target_temp_low,\n        stateObj.attributes.target_temp_high,\n      ];\n    }\n\n    return stateObj.attributes.temperature;\n  }\n\n  private _dragEvent(e): void {\n    const stateObj = this.hass!.states[this._config!.entity] as ClimateEntity;\n\n    if (e.detail.low) {\n      this._setTemp = [e.detail.low, stateObj.attributes.target_temp_high];\n    } else if (e.detail.high) {\n      this._setTemp = [stateObj.attributes.target_temp_low, e.detail.high];\n    } else {\n      this._setTemp = e.detail.value;\n    }\n  }\n\n  private _setTemperature(e): void {\n    const stateObj = this.hass!.states[this._config!.entity] as ClimateEntity;\n\n    if (e.detail.low) {\n      this.hass!.callService(\"climate\", \"set_temperature\", {\n        entity_id: this._config!.entity,\n        target_temp_low: e.detail.low,\n        target_temp_high: stateObj.attributes.target_temp_high,\n      });\n    } else if (e.detail.high) {\n      this.hass!.callService(\"climate\", \"set_temperature\", {\n        entity_id: this._config!.entity,\n        target_temp_low: stateObj.attributes.target_temp_low,\n        target_temp_high: e.detail.high,\n      });\n    } else {\n      this.hass!.callService(\"climate\", \"set_temperature\", {\n        entity_id: this._config!.entity,\n        temperature: e.detail.value,\n      });\n    }\n  }\n\n  private _renderIcon(mode: string, currentMode: string): TemplateResult {\n    if (!modeIcons[mode]) {\n      return html``;\n    }\n    return html`\n      <ha-icon-button\n        class=${classMap({ \"selected-icon\": currentMode === mode })}\n        .mode=${mode}\n        @click=${this._handleAction}\n        tabindex=\"0\"\n        .path=${modeIcons[mode]}\n        .label=${this.hass!.localize(`component.climate.state._.${mode}`)}\n      >\n      </ha-icon-button>\n    `;\n  }\n\n  private _handleMoreInfo() {\n    fireEvent(this, \"hass-more-info\", {\n      entityId: this._config!.entity,\n    });\n  }\n\n  private _handleAction(e: MouseEvent): void {\n    this.hass!.callService(\"climate\", \"set_hvac_mode\", {\n      entity_id: this._config!.entity,\n      hvac_mode: (e.currentTarget as any).mode,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n      }\n\n      ha-card {\n        height: 100%;\n        position: relative;\n        overflow: hidden;\n        --name-font-size: 1.2rem;\n        --brightness-font-size: 1.2rem;\n        --rail-border-color: transparent;\n      }\n      .auto,\n      .heat_cool {\n        --mode-color: var(--state-climate-auto-color);\n      }\n      .cool {\n        --mode-color: var(--state-climate-cool-color);\n      }\n      .heat {\n        --mode-color: var(--state-climate-heat-color);\n      }\n      .manual {\n        --mode-color: var(--state-climate-manual-color);\n      }\n      .off {\n        --mode-color: var(--state-climate-off-color);\n      }\n      .fan_only {\n        --mode-color: var(--state-climate-fan_only-color);\n      }\n      .eco {\n        --mode-color: var(--state-climate-eco-color);\n      }\n      .dry {\n        --mode-color: var(--state-climate-dry-color);\n      }\n      .idle {\n        --mode-color: var(--state-climate-idle-color);\n      }\n      .unknown-mode {\n        --mode-color: var(--state-unknown-color);\n      }\n\n      .more-info {\n        position: absolute;\n        cursor: pointer;\n        top: 0;\n        right: 0;\n        inset-inline-end: 0px;\n        inset-inline-start: initial;\n        border-radius: 100%;\n        color: var(--secondary-text-color);\n        z-index: 1;\n        direction: var(--direction);\n      }\n\n      .content {\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n      }\n\n      #controls {\n        display: flex;\n        justify-content: center;\n        padding: 16px;\n        position: relative;\n      }\n\n      #slider {\n        height: 100%;\n        width: 100%;\n        position: relative;\n        max-width: 250px;\n        min-width: 100px;\n      }\n\n      round-slider {\n        --round-slider-path-color: var(--slider-track-color);\n        --round-slider-bar-color: var(--mode-color);\n        padding-bottom: 10%;\n      }\n\n      #slider-center {\n        position: absolute;\n        width: calc(100% - 40px);\n        height: calc(100% - 40px);\n        box-sizing: border-box;\n        border-radius: 100%;\n        left: 20px;\n        top: 20px;\n        text-align: center;\n        overflow-wrap: break-word;\n        pointer-events: none;\n      }\n\n      #temperature {\n        position: absolute;\n        transform: translate(-50%, -50%);\n        width: 100%;\n        height: 50%;\n        top: 45%;\n        left: 50%;\n        direction: ltr;\n      }\n\n      #set-values {\n        max-width: 80%;\n        transform: translate(0, -50%);\n        font-size: 20px;\n      }\n\n      #set-mode {\n        fill: var(--secondary-text-color);\n        font-size: 16px;\n      }\n\n      #info {\n        display: flex-vertical;\n        justify-content: center;\n        text-align: center;\n        padding: 16px;\n        margin-top: -60px;\n        font-size: var(--name-font-size);\n      }\n\n      #modes > * {\n        color: var(--disabled-text-color);\n        cursor: pointer;\n        display: inline-block;\n      }\n\n      #modes .selected-icon {\n        color: var(--mode-color);\n      }\n\n      text {\n        fill: var(--primary-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-thermostat-card\": HuiThermostatCard;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { formatTime } from \"../../../common/datetime/format_time\";\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport { computeStateDisplay } from \"../../../common/entity/compute_state_display\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { isValidEntityId } from \"../../../common/entity/valid_entity_id\";\nimport { formatNumber } from \"../../../common/number/format_number\";\nimport { debounce } from \"../../../common/util/debounce\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-svg-icon\";\nimport { UNAVAILABLE } from \"../../../data/entity\";\nimport { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport {\n  getSecondaryWeatherAttribute,\n  getWeatherStateIcon,\n  getWeatherUnit,\n  getWind,\n  isForecastHourly,\n  weatherAttrIcons,\n  WeatherEntity,\n  weatherSVGStyles,\n} from \"../../../data/weather\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { findEntities } from \"../common/find-entities\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport { installResizeObserver } from \"../common/install-resize-observer\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport type { LovelaceCard, LovelaceCardEditor } from \"../types\";\nimport type { WeatherForecastCardConfig } from \"./types\";\n\nconst DAY_IN_MILLISECONDS = 86400000;\n\n@customElement(\"hui-weather-forecast-card\")\nclass HuiWeatherForecastCard extends LitElement implements LovelaceCard {\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\"../editor/config-elements/hui-weather-forecast-card-editor\");\n    return document.createElement(\"hui-weather-forecast-card-editor\");\n  }\n\n  public static getStubConfig(\n    hass: HomeAssistant,\n    entities: string[],\n    entitiesFallback: string[]\n  ): WeatherForecastCardConfig {\n    const includeDomains = [\"weather\"];\n    const maxEntities = 1;\n    const foundEntities = findEntities(\n      hass,\n      maxEntities,\n      entities,\n      entitiesFallback,\n      includeDomains\n    );\n\n    return { type: \"weather-forecast\", entity: foundEntities[0] || \"\" };\n  }\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: WeatherForecastCardConfig;\n\n  @property({ type: Boolean, reflect: true, attribute: \"veryverynarrow\" })\n  private _veryVeryNarrow = false;\n\n  private _resizeObserver?: ResizeObserver;\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    this.updateComplete.then(() => this._attachObserver());\n  }\n\n  public disconnectedCallback(): void {\n    if (this._resizeObserver) {\n      this._resizeObserver.disconnect();\n    }\n  }\n\n  public getCardSize(): number {\n    let cardSize = 0;\n    if (this._config?.show_current !== false) {\n      cardSize += 2;\n    }\n    if (this._config?.show_forecast !== false) {\n      cardSize += 3;\n    }\n    return cardSize;\n  }\n\n  public setConfig(config: WeatherForecastCardConfig): void {\n    if (!config.entity) {\n      throw new Error(\"Entity must be specified\");\n    }\n    if (!isValidEntityId(config.entity)) {\n      throw new Error(\"Invalid entity\");\n    }\n\n    this._config = config;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  public willUpdate(): void {\n    if (!this.hasUpdated) {\n      this._measureCard();\n    }\n  }\n\n  protected firstUpdated(): void {\n    this._attachObserver();\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    const oldConfig = changedProps.get(\"_config\") as\n      | WeatherForecastCardConfig\n      | undefined;\n\n    if (\n      (changedProps.has(\"hass\") && !oldHass) ||\n      (changedProps.has(\"_config\") && !oldConfig) ||\n      (changedProps.has(\"hass\") && oldHass!.themes !== this.hass.themes) ||\n      (changedProps.has(\"_config\") && oldConfig!.theme !== this._config.theme)\n    ) {\n      applyThemesOnElement(this, this.hass.themes, this._config.theme);\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity] as WeatherEntity;\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    if (stateObj.state === UNAVAILABLE) {\n      return html`\n        <ha-card class=\"unavailable\" @click=${this._handleAction}>\n          ${this.hass.localize(\n            \"ui.panel.lovelace.warning.entity_unavailable\",\n            \"entity\",\n            `${computeStateName(stateObj)} (${this._config.entity})`\n          )}\n        </ha-card>\n      `;\n    }\n\n    const forecast =\n      this._config?.show_forecast !== false &&\n      stateObj.attributes.forecast?.length\n        ? stateObj.attributes.forecast.slice(0, this._veryVeryNarrow ? 3 : 5)\n        : undefined;\n    const weather = !forecast || this._config?.show_current !== false;\n\n    const hourly = isForecastHourly(forecast);\n    let dayNight: boolean | undefined;\n\n    if (hourly) {\n      const dateFirst = new Date(forecast![0].datetime);\n      const datelast = new Date(forecast![forecast!.length - 1].datetime);\n      const dayDiff = datelast.getTime() - dateFirst.getTime();\n\n      dayNight = dayDiff > DAY_IN_MILLISECONDS;\n    }\n\n    const weatherStateIcon = getWeatherStateIcon(stateObj.state, this);\n    const name = this._config.name ?? computeStateName(stateObj);\n\n    return html`\n      <ha-card\n        @action=${this._handleAction}\n        .actionHandler=${actionHandler({\n          hasHold: hasAction(this._config!.hold_action),\n          hasDoubleClick: hasAction(this._config!.double_tap_action),\n        })}\n        tabindex=${ifDefined(\n          hasAction(this._config.tap_action) ? \"0\" : undefined\n        )}\n      >\n        ${weather\n          ? html`\n              <div class=\"content\">\n                <div class=\"icon-image\">\n                  ${weatherStateIcon ||\n                  html`\n                    <ha-state-icon\n                      class=\"weather-icon\"\n                      .state=${stateObj}\n                    ></ha-state-icon>\n                  `}\n                </div>\n                <div class=\"info\">\n                  <div class=\"name-state\">\n                    <div class=\"state\">\n                      ${computeStateDisplay(\n                        this.hass.localize,\n                        stateObj,\n                        this.hass.locale\n                      )}\n                    </div>\n                    <div class=\"name\" .title=${name}>${name}</div>\n                  </div>\n                  <div class=\"temp-attribute\">\n                    <div class=\"temp\">\n                      ${stateObj.attributes.temperature !== undefined &&\n                      stateObj.attributes.temperature !== null\n                        ? html`\n                            ${formatNumber(\n                              stateObj.attributes.temperature,\n                              this.hass.locale\n                            )}&nbsp;<span\n                              >${getWeatherUnit(\n                                this.hass,\n                                stateObj,\n                                \"temperature\"\n                              )}</span\n                            >\n                          `\n                        : html`&nbsp;`}\n                    </div>\n                    <div class=\"attribute\">\n                      ${this._config.secondary_info_attribute !== undefined\n                        ? html`\n                            ${this._config.secondary_info_attribute in\n                            weatherAttrIcons\n                              ? html`\n                                  <ha-svg-icon\n                                    class=\"attr-icon\"\n                                    .path=${weatherAttrIcons[\n                                      this._config.secondary_info_attribute\n                                    ]}\n                                  ></ha-svg-icon>\n                                `\n                              : this.hass!.localize(\n                                  `ui.card.weather.attributes.${this._config.secondary_info_attribute}`\n                                )}\n                            ${this._config.secondary_info_attribute ===\n                            \"wind_speed\"\n                              ? getWind(\n                                  this.hass,\n                                  stateObj,\n                                  stateObj.attributes.wind_speed,\n                                  stateObj.attributes.wind_bearing\n                                )\n                              : html`\n                                  ${formatNumber(\n                                    stateObj.attributes[\n                                      this._config.secondary_info_attribute\n                                    ],\n                                    this.hass.locale\n                                  )}\n                                  ${getWeatherUnit(\n                                    this.hass,\n                                    stateObj,\n                                    this._config.secondary_info_attribute\n                                  )}\n                                `}\n                          `\n                        : getSecondaryWeatherAttribute(this.hass, stateObj)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            `\n          : \"\"}\n        ${forecast\n          ? html`\n              <div class=\"forecast\">\n                ${forecast.map((item) =>\n                  this._showValue(item.templow) ||\n                  this._showValue(item.temperature)\n                    ? html`\n                        <div>\n                          <div>\n                            ${dayNight\n                              ? html`\n                                  ${new Date(item.datetime).toLocaleDateString(\n                                    this.hass!.language,\n                                    { weekday: \"short\" }\n                                  )}\n                                  <div class=\"daynight\">\n                                    ${item.daytime === undefined || item.daytime\n                                      ? this.hass!.localize(\n                                          \"ui.card.weather.day\"\n                                        )\n                                      : this.hass!.localize(\n                                          \"ui.card.weather.night\"\n                                        )}<br />\n                                  </div>\n                                `\n                              : hourly\n                              ? html`\n                                  ${formatTime(\n                                    new Date(item.datetime),\n                                    this.hass!.locale\n                                  )}\n                                `\n                              : html`\n                                  ${new Date(item.datetime).toLocaleDateString(\n                                    this.hass!.language,\n                                    { weekday: \"short\" }\n                                  )}\n                                `}\n                          </div>\n                          ${this._showValue(item.condition)\n                            ? html`\n                                <div class=\"forecast-image-icon\">\n                                  ${getWeatherStateIcon(\n                                    item.condition!,\n                                    this,\n                                    !(\n                                      item.daytime || item.daytime === undefined\n                                    )\n                                  )}\n                                </div>\n                              `\n                            : \"\"}\n                          <div class=\"temp\">\n                            ${this._showValue(item.temperature)\n                              ? html`${formatNumber(\n                                  item.temperature,\n                                  this.hass!.locale\n                                )}°`\n                              : \"—\"}\n                          </div>\n                          <div class=\"templow\">\n                            ${this._showValue(item.templow)\n                              ? html`${formatNumber(\n                                  item.templow!,\n                                  this.hass!.locale\n                                )}°`\n                              : hourly\n                              ? \"\"\n                              : \"—\"}\n                          </div>\n                        </div>\n                      `\n                    : \"\"\n                )}\n              </div>\n            `\n          : \"\"}\n      </ha-card>\n    `;\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    handleAction(this, this.hass!, this._config!, ev.detail.action!);\n  }\n\n  private async _attachObserver(): Promise<void> {\n    if (!this._resizeObserver) {\n      await installResizeObserver();\n      this._resizeObserver = new ResizeObserver(\n        debounce(() => this._measureCard(), 250, false)\n      );\n    }\n    const card = this.shadowRoot!.querySelector(\"ha-card\");\n    // If we show an error or warning there is no ha-card\n    if (!card) {\n      return;\n    }\n    this._resizeObserver.observe(card);\n  }\n\n  private _measureCard() {\n    if (!this.isConnected) {\n      return;\n    }\n\n    const card = this.shadowRoot!.querySelector(\"ha-card\");\n    // If we show an error or warning there is no ha-card\n    if (!card) {\n      return;\n    }\n\n    if (card.offsetWidth < 375) {\n      this.setAttribute(\"narrow\", \"\");\n    } else {\n      this.removeAttribute(\"narrow\");\n    }\n    if (card.offsetWidth < 300) {\n      this.setAttribute(\"verynarrow\", \"\");\n    } else {\n      this.removeAttribute(\"verynarrow\");\n    }\n    this._veryVeryNarrow = card.offsetWidth < 245;\n  }\n\n  private _showValue(item?: any): boolean {\n    return typeof item !== \"undefined\" && item !== null;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      weatherSVGStyles,\n      css`\n        ha-card {\n          cursor: pointer;\n          outline: none;\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          padding: 16px;\n          box-sizing: border-box;\n        }\n\n        .content {\n          display: flex;\n          flex-wrap: nowrap;\n          justify-content: space-between;\n          align-items: center;\n        }\n\n        .icon-image {\n          display: flex;\n          align-items: center;\n          min-width: 64px;\n          margin-right: 16px;\n        }\n\n        .icon-image > * {\n          flex: 0 0 64px;\n          height: 64px;\n        }\n\n        .weather-icon {\n          --mdc-icon-size: 64px;\n        }\n\n        .info {\n          display: flex;\n          justify-content: space-between;\n          flex-grow: 1;\n          overflow: hidden;\n        }\n\n        .temp-attribute {\n          text-align: right;\n        }\n\n        .temp-attribute .temp {\n          position: relative;\n          margin-right: 24px;\n        }\n\n        .temp-attribute .temp span {\n          position: absolute;\n          font-size: 24px;\n          top: 1px;\n        }\n\n        .state,\n        .temp-attribute .temp {\n          font-size: 28px;\n          line-height: 1.2;\n        }\n\n        .name,\n        .attribute {\n          font-size: 14px;\n          line-height: 1;\n        }\n\n        .name-state {\n          overflow: hidden;\n          padding-right: 12px;\n          width: 100%;\n        }\n\n        .name,\n        .state {\n          overflow: hidden;\n          text-overflow: ellipsis;\n          white-space: nowrap;\n        }\n\n        .attribute {\n          white-space: nowrap;\n        }\n\n        .forecast {\n          display: flex;\n          justify-content: space-around;\n          padding-top: 16px;\n        }\n\n        .forecast > div {\n          text-align: center;\n        }\n\n        .forecast .icon,\n        .forecast .temp {\n          margin: 4px 0;\n        }\n\n        .forecast .temp {\n          font-size: 16px;\n        }\n\n        .forecast-image-icon {\n          padding-top: 4px;\n          padding-bottom: 4px;\n          display: flex;\n          justify-content: center;\n        }\n\n        .forecast-image-icon > * {\n          width: 40px;\n          height: 40px;\n          --mdc-icon-size: 40px;\n        }\n\n        .forecast-icon {\n          --mdc-icon-size: 40px;\n        }\n\n        .attr-icon {\n          --mdc-icon-size: 20px;\n        }\n\n        .attribute,\n        .templow,\n        .daynight,\n        .name {\n          color: var(--secondary-text-color);\n        }\n\n        .unavailable {\n          height: 100px;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          font-size: 16px;\n          padding: 10px 20px;\n          text-align: center;\n        }\n\n        /* ============= NARROW ============= */\n\n        :host([narrow]) .icon-image {\n          min-width: 52px;\n        }\n\n        :host([narrow]) .weather-image {\n          flex: 0 0 52px;\n          width: 52px;\n        }\n\n        :host([narrow]) .icon-image .weather-icon {\n          --mdc-icon-size: 52px;\n        }\n\n        :host([narrow]) .state,\n        :host([narrow]) .temp-attribute .temp {\n          font-size: 22px;\n        }\n\n        :host([narrow]) .temp-attribute .temp {\n          margin-right: 16px;\n        }\n\n        :host([narrow]) .temp span {\n          top: 1px;\n          font-size: 16px;\n        }\n\n        /* ============= VERY NARROW ============= */\n\n        :host([veryNarrow]) .name,\n        :host([veryNarrow]) .attribute {\n          display: none;\n        }\n\n        :host([veryNarrow]) .info {\n          flex-direction: column;\n          align-items: flex-start;\n        }\n\n        :host([veryNarrow]) .name-state {\n          padding-right: 0;\n        }\n\n        /* ============= VERY VERY NARROW ============= */\n\n        :host([veryVeryNarrow]) .info {\n          padding-top: 4px;\n          align-items: center;\n        }\n\n        :host([veryVeryNarrow]) .content {\n          flex-wrap: wrap;\n          justify-content: center;\n          flex-direction: column;\n        }\n\n        :host([veryVeryNarrow]) .icon-image {\n          margin-right: 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-weather-forecast-card\": HuiWeatherForecastCard;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { DOMAINS_TOGGLE } from \"../../../common/const\";\nimport \"../../../components/ha-switch\";\nimport type { HaSwitch } from \"../../../components/ha-switch\";\nimport { forwardHaptic } from \"../../../data/haptics\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { turnOnOffEntities } from \"../common/entity/turn-on-off-entities\";\n\n@customElement(\"hui-entities-toggle\")\nclass HuiEntitiesToggle extends LitElement {\n  @property({ type: Array }) public entities?: string[];\n\n  @property({ attribute: false }) protected hass?: HomeAssistant;\n\n  @state() private _toggleEntities?: string[];\n\n  public willUpdate(changedProperties: PropertyValues): void {\n    super.willUpdate(changedProperties);\n    if (changedProperties.has(\"entities\")) {\n      this._toggleEntities = this.entities!.filter(\n        (entityId) =>\n          entityId in this.hass!.states &&\n          DOMAINS_TOGGLE.has(entityId.split(\".\", 1)[0])\n      );\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._toggleEntities?.length) {\n      return html``;\n    }\n\n    return html`\n      <ha-switch\n        aria-label=${this.hass!.localize(\n          \"ui.panel.lovelace.card.entities.toggle\"\n        )}\n        .checked=${this._toggleEntities!.some((entityId) => {\n          const stateObj = this.hass!.states[entityId];\n          return stateObj && stateObj.state === \"on\";\n        })}\n        @change=${this._callService}\n      ></ha-switch>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        width: 38px;\n        display: block;\n      }\n      ha-switch {\n        padding: 13px 5px;\n        margin: -4px -8px;\n      }\n    `;\n  }\n\n  private _callService(ev: MouseEvent): void {\n    forwardHaptic(\"light\");\n    const turnOn = (ev.target as HaSwitch).checked;\n    turnOnOffEntities(this.hass!, this._toggleEntities!, turnOn!);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-entities-toggle\": HuiEntitiesToggle;\n  }\n}\n","import { mdiAlertOutline } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../../components/ha-svg-icon\";\n\n@customElement(\"hui-warning-element\")\nexport class HuiWarningElement extends LitElement {\n  @property() public label?: string;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-svg-icon .path=${mdiAlertOutline} .title=${this.label}></ha-svg-icon>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-svg-icon {\n        color: var(--warning-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-warning-element\": HuiWarningElement;\n  }\n}\n"],"names":[],"sourceRoot":""}