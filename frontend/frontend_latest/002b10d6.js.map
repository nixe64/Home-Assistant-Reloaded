{"version":3,"file":"002b10d6.js","mappings":";AA4BA;;;AAGA;AAMA;AAwBA;;;AAMA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrEA;AAoEA;;AApEA;;;;ACEA;ACyCA;AACA;AAmBA;AACA;;AA8CA;;AAIA;;;;AAKA;;AAEA;AAKA;AASA;;;;AAKA;;AAEA;;AAGA;;AASA;AAeA;AACA;AAmBA;AACA;;;;ACxIA;;AAEA;;;;AAsBA;;AAEA;AAqCA;AAIA;;;;AAkBA;;AAEA;;;;AAsBA;;AAEA;AC1FA;;;;AAIA;;AAMA;AACA;;;AAGA;AACA;;;AAGA;;AAIA;;AAGA;;AAEA;;;;;;;AA/FA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;ACaA;AACA;AACA;AACA;AACA;AACA;;;;;AAtBA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AC8BA;AAIA;AACA;AACA;AAKA;AACA;;;;AAIA;AACA;;;;;AASA;;;AAGA;AAEA;;AAKA;;;AAOA;;AAIA;;AAEA;AAEA;AAEA;;;;;AAUA;;;;;AAOA;;AAEA;AAEA;AAGA;AACA;;;AAKA;;;AA9FA;;;;;;;;;;;;;;;;;AAAA;;ACLA;AACA;AACA;AAGA;AACA;AACA;;;AAOA;AACA;;;AAzBA;;;;;;;;AAAA;;;ACqGA;AAUA;;;AAGA;AACA;AAKA;AACA;AAGA;AACA;AACA;;AAEA;;;;AAKA;AACA;;;AAGA;;;AAIA;;AA7EA;;AAuFA;AAGA;AACA;;AAEA;;AAKA;;;AAIA;;;AAGA;;AAIA;AAEA;;;AAIA;;;AAKA;;AAIA;;;;AA5HA;AAwJA;AAqBA;;AAMA;AACA;;AAQA;AAgBA;AAuCA;AA1BA;AACA;AASA;AAiBA;;AAGA;AACA;;AAEA;AAEA;;;AAGA;AAEA;AACA;AAGA;;AAIA;;AAIA;AAGA;AACA;;AAIA;;;;;AAMA;;;AAGA;AAKA;;;AAGA;;AAIA;;AAGA;AACA;;;AAKA;AAEA;;AAEA;;;AAGA;;;;;;AAQA;AAEA;AAMA;AAEA;;;;;AAUA;;;;;AAOA;;AAEA;AAEA;AAGA;;;;;AAKA;;AAIA;;AAEA;;;;;AAMA;;;AAGA;;;AAKA;AAEA;;;AAGA;;;;;AAKA;;AAIA;;;AAGA;;;;;;AAMA;AAEA;;AAGA;;;AAGA;;;;;;AAQA;;;AApaA;;;AA8qBA;;;;AAMA;;;;AAOA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA/rBA;AC8QA;AACA;AAGA;AAYA;;AAEA;;;;AAMA;AACA;;;;AAIA;;;;AAIA;AACA;;AAIA;AACA;;;;AAMA;;AAGA;;;AAGA;;AAKA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;AAIA;AACA;;AAEA;AACA;;;AAKA;AACA;;AAGA;;;;;AAKA;;AAEA;AACA;AACA;;AAIA;;;AAIA;;AAEA;;AAKA;AACA;;AAIA;AAEA;;;;;;AAMA;;AAIA;AACA;AACA;AACA;;AAEA;AAGA;;AAIA;AACA;AACA;AACA;;AAEA;AAGA;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AASA;;;AAKA;;;AAKA;;AAEA;;;AAOA;;;AASA;;;AAGA;;;AAKA;;AAEA;;;;;;;AAUA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA5cA","sources":["webpack://home-assistant-frontend/./src/common/integrations/protocolIntegrationPicked.ts","webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/components/ha-checkbox.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/show-dialog-config-flow.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/show-dialog-options-flow.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/ha-integration-header.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/ha-integration-action-card.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/ha-config-flow-card.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/ha-ignored-config-entry-card.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/ha-integration-card.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/ha-config-integrations.ts"],"sourcesContent":["import { html } from \"lit\";\nimport { getConfigEntries } from \"../../data/config_entries\";\nimport { showConfigFlowDialog } from \"../../dialogs/config-flow/show-dialog-config-flow\";\nimport { showConfirmationDialog } from \"../../dialogs/generic/show-dialog-box\";\nimport { showZWaveJSAddNodeDialog } from \"../../panels/config/integrations/integration-panels/zwave_js/show-dialog-zwave_js-add-node\";\nimport type { HomeAssistant } from \"../../types\";\nimport { documentationUrl } from \"../../util/documentation-url\";\nimport { isComponentLoaded } from \"../config/is_component_loaded\";\nimport { navigate } from \"../navigate\";\n\nexport const protocolIntegrationPicked = async (\n  element: HTMLElement,\n  hass: HomeAssistant,\n  slug: string\n) => {\n  if (slug === \"zwave_js\") {\n    const entries = await getConfigEntries(hass, {\n      domain: \"zwave_js\",\n    });\n\n    if (!isComponentLoaded(hass, \"zwave_js\") || !entries.length) {\n      // If the component isn't loaded, ask them to load the integration first\n      showConfirmationDialog(element, {\n        text: hass.localize(\n          \"ui.panel.config.integrations.config_flow.missing_zwave_zigbee\",\n          {\n            integration: \"Z-Wave\",\n            supported_hardware_link: html`<a\n              href=${documentationUrl(hass, \"/docs/z-wave/controllers\")}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              >${hass.localize(\n                \"ui.panel.config.integrations.config_flow.supported_hardware\"\n              )}</a\n            >`,\n          }\n        ),\n        confirmText: hass.localize(\n          \"ui.panel.config.integrations.config_flow.proceed\"\n        ),\n        confirm: () => {\n          showConfigFlowDialog(element, {\n            startFlowHandler: \"zwave_js\",\n          });\n        },\n      });\n      return;\n    }\n\n    showZWaveJSAddNodeDialog(element, {\n      entry_id: entries[0].entry_id,\n    });\n  } else if (slug === \"zha\") {\n    // If the component isn't loaded, ask them to load the integration first\n    if (!isComponentLoaded(hass, \"zha\")) {\n      showConfirmationDialog(element, {\n        text: hass.localize(\n          \"ui.panel.config.integrations.config_flow.missing_zwave_zigbee\",\n          {\n            integration: \"Zigbee\",\n            supported_hardware_link: html`<a\n              href=${documentationUrl(\n                hass,\n                \"/integrations/zha/#known-working-zigbee-radio-modules\"\n              )}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              >${hass.localize(\n                \"ui.panel.config.integrations.config_flow.supported_hardware\"\n              )}</a\n            >`,\n          }\n        ),\n        confirmText: hass.localize(\n          \"ui.panel.config.integrations.config_flow.proceed\"\n        ),\n        confirm: () => {\n          showConfigFlowDialog(element, {\n            startFlowHandler: \"zha\",\n          });\n        },\n      });\n      return;\n    }\n\n    navigate(\"/config/zha/add\");\n  }\n};\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public outlined = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { CheckboxBase } from \"@material/mwc-checkbox/mwc-checkbox-base\";\nimport { styles } from \"@material/mwc-checkbox/mwc-checkbox.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends CheckboxBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n","import { html } from \"lit\";\nimport {\n  createConfigFlow,\n  deleteConfigFlow,\n  fetchConfigFlow,\n  handleConfigFlowStep,\n} from \"../../data/config_flow\";\nimport { domainToName } from \"../../data/integration\";\nimport {\n  DataEntryFlowDialogParams,\n  loadDataEntryFlowDialog,\n  showFlowDialog,\n} from \"./show-dialog-data-entry-flow\";\n\nexport const loadConfigFlowDialog = loadDataEntryFlowDialog;\n\nexport const showConfigFlowDialog = (\n  element: HTMLElement,\n  dialogParams: Omit<DataEntryFlowDialogParams, \"flowConfig\">\n): void =>\n  showFlowDialog(element, dialogParams, {\n    loadDevicesAndAreas: true,\n    createFlow: async (hass, handler) => {\n      const [step] = await Promise.all([\n        createConfigFlow(hass, handler),\n        hass.loadBackendTranslation(\"config\", handler),\n        // Used as fallback if no header defined for step\n        hass.loadBackendTranslation(\"title\", handler),\n      ]);\n      return step;\n    },\n    fetchFlow: async (hass, flowId) => {\n      const step = await fetchConfigFlow(hass, flowId);\n      await hass.loadBackendTranslation(\"config\", step.handler);\n      return step;\n    },\n    handleFlowStep: handleConfigFlowStep,\n    deleteFlow: deleteConfigFlow,\n\n    renderAbortDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.abort.${step.reason}`,\n        step.description_placeholders\n      );\n\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderShowFormStepHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderShowFormStepDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.description`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderShowFormStepFieldLabel(hass, step, field) {\n      return hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.data.${field.name}`\n      );\n    },\n\n    renderShowFormStepFieldHelper(hass, step, field) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.data_description.${field.name}`,\n        step.description_placeholders\n      );\n      return description\n        ? html`<ha-markdown breaks .content=${description}></ha-markdown>`\n        : \"\";\n    },\n\n    renderShowFormStepFieldError(hass, step, error) {\n      return hass.localize(\n        `component.${step.handler}.config.error.${error}`,\n        step.description_placeholders\n      );\n    },\n\n    renderExternalStepHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) ||\n        hass.localize(\n          \"ui.panel.config.integrations.config_flow.external_step.open_site\"\n        )\n      );\n    },\n\n    renderExternalStepDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.${step.step_id}.description`,\n        step.description_placeholders\n      );\n\n      return html`\n        <p>\n          ${hass.localize(\n            \"ui.panel.config.integrations.config_flow.external_step.description\"\n          )}\n        </p>\n        ${description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\"}\n      `;\n    },\n\n    renderCreateEntryDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.create_entry.${\n          step.description || \"default\"\n        }`,\n        step.description_placeholders\n      );\n\n      return html`\n        ${description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\"}\n        <p>\n          ${hass.localize(\n            \"ui.panel.config.integrations.config_flow.created_config\",\n            \"name\",\n            step.title\n          )}\n        </p>\n      `;\n    },\n\n    renderShowFormProgressHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderShowFormProgressDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.progress.${step.progress_action}`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderMenuHeader(hass, step) {\n      return (\n        hass.localize(\n          `component.${step.handler}.config.step.${step.step_id}.title`\n        ) || hass.localize(`component.${step.handler}.title`)\n      );\n    },\n\n    renderMenuDescription(hass, step) {\n      const description = hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.description`,\n        step.description_placeholders\n      );\n      return description\n        ? html`\n            <ha-markdown allowsvg breaks .content=${description}></ha-markdown>\n          `\n        : \"\";\n    },\n\n    renderMenuOption(hass, step, option) {\n      return hass.localize(\n        `component.${step.handler}.config.step.${step.step_id}.menu_options.${option}`,\n        step.description_placeholders\n      );\n    },\n\n    renderLoadingDescription(hass, reason, handler, step) {\n      if (![\"loading_flow\", \"loading_step\"].includes(reason)) {\n        return \"\";\n      }\n      const domain = step?.handler || handler;\n      return hass.localize(\n        `ui.panel.config.integrations.config_flow.loading.${reason}`,\n        {\n          integration: domain\n            ? domainToName(hass.localize, domain)\n            : // when we are continuing a config flow, we only know the ID and not the domain\n              hass.localize(\n                \"ui.panel.config.integrations.config_flow.loading.fallback_title\"\n              ),\n        }\n      );\n    },\n  });\n","import { html } from \"lit\";\nimport { ConfigEntry } from \"../../data/config_entries\";\nimport { domainToName, IntegrationManifest } from \"../../data/integration\";\nimport {\n  createOptionsFlow,\n  deleteOptionsFlow,\n  fetchOptionsFlow,\n  handleOptionsFlowStep,\n} from \"../../data/options_flow\";\nimport {\n  loadDataEntryFlowDialog,\n  showFlowDialog,\n} from \"./show-dialog-data-entry-flow\";\n\nexport const loadOptionsFlowDialog = loadDataEntryFlowDialog;\n\nexport const showOptionsFlowDialog = (\n  element: HTMLElement,\n  configEntry: ConfigEntry,\n  manifest?: IntegrationManifest | null\n): void =>\n  showFlowDialog(\n    element,\n    {\n      startFlowHandler: configEntry.entry_id,\n      domain: configEntry.domain,\n      manifest,\n    },\n    {\n      loadDevicesAndAreas: false,\n      createFlow: async (hass, handler) => {\n        const [step] = await Promise.all([\n          createOptionsFlow(hass, handler),\n          hass.loadBackendTranslation(\"options\", configEntry.domain),\n        ]);\n        return step;\n      },\n      fetchFlow: async (hass, flowId) => {\n        const [step] = await Promise.all([\n          fetchOptionsFlow(hass, flowId),\n          hass.loadBackendTranslation(\"options\", configEntry.domain),\n        ]);\n        return step;\n      },\n      handleFlowStep: handleOptionsFlowStep,\n      deleteFlow: deleteOptionsFlow,\n\n      renderAbortDescription(hass, step) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.abort.${step.reason}`,\n          step.description_placeholders\n        );\n\n        return description\n          ? html`\n              <ha-markdown\n                breaks\n                allowsvg\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderShowFormStepHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.title`\n          ) || hass.localize(`ui.dialogs.options_flow.form.header`)\n        );\n      },\n\n      renderShowFormStepDescription(hass, step) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.description`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderShowFormStepFieldLabel(hass, step, field) {\n        return hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.data.${field.name}`\n        );\n      },\n\n      renderShowFormStepFieldHelper(hass, step, field) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.data_description.${field.name}`,\n          step.description_placeholders\n        );\n        return description\n          ? html`<ha-markdown breaks .content=${description}></ha-markdown>`\n          : \"\";\n      },\n\n      renderShowFormStepFieldError(hass, step, error) {\n        return hass.localize(\n          `component.${configEntry.domain}.options.error.${error}`,\n          step.description_placeholders\n        );\n      },\n\n      renderExternalStepHeader(_hass, _step) {\n        return \"\";\n      },\n\n      renderExternalStepDescription(_hass, _step) {\n        return \"\";\n      },\n\n      renderCreateEntryDescription(hass, _step) {\n        return html`\n          <p>${hass.localize(`ui.dialogs.options_flow.success.description`)}</p>\n        `;\n      },\n\n      renderShowFormProgressHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.title`\n          ) || hass.localize(`component.${configEntry.domain}.title`)\n        );\n      },\n\n      renderShowFormProgressDescription(hass, step) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.progress.${step.progress_action}`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderMenuHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.title`\n          ) || hass.localize(`component.${configEntry.domain}.title`)\n        );\n      },\n\n      renderMenuDescription(hass, step) {\n        const description = hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.description`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderMenuOption(hass, step, option) {\n        return hass.localize(\n          `component.${configEntry.domain}.options.step.${step.step_id}.menu_options.${option}`,\n          step.description_placeholders\n        );\n      },\n\n      renderLoadingDescription(hass, reason) {\n        return (\n          hass.localize(`component.${configEntry.domain}.options.loading`) ||\n          hass.localize(`ui.dialogs.options_flow.loading.${reason}`, {\n            integration: domainToName(hass.localize, configEntry.domain),\n          })\n        );\n      },\n    }\n  );\n","import { mdiCloud, mdiPackageVariant, mdiSyncOff } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../../components/ha-svg-icon\";\nimport { ConfigEntry } from \"../../../data/config_entries\";\nimport { domainToName, IntegrationManifest } from \"../../../data/integration\";\nimport { HomeAssistant } from \"../../../types\";\nimport { brandsUrl } from \"../../../util/brands-url\";\n\n@customElement(\"ha-integration-header\")\nexport class HaIntegrationHeader extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public banner?: string;\n\n  @property() public localizedDomainName?: string;\n\n  @property() public domain!: string;\n\n  @property() public label?: string;\n\n  @property({ attribute: false }) public manifest?: IntegrationManifest;\n\n  @property({ attribute: false }) public configEntry?: ConfigEntry;\n\n  protected render(): TemplateResult {\n    let primary: string;\n    let secondary: string | undefined;\n\n    const domainName =\n      this.localizedDomainName ||\n      domainToName(this.hass.localize, this.domain, this.manifest);\n\n    if (this.label) {\n      primary = this.label;\n      secondary =\n        primary.toLowerCase() === domainName.toLowerCase()\n          ? undefined\n          : domainName;\n    } else {\n      primary = domainName;\n    }\n\n    const icons: [string, string][] = [];\n\n    if (this.manifest) {\n      if (!this.manifest.is_built_in) {\n        icons.push([\n          mdiPackageVariant,\n          this.hass.localize(\n            \"ui.panel.config.integrations.config_entry.provided_by_custom_integration\"\n          ),\n        ]);\n      }\n\n      if (\n        this.manifest.iot_class &&\n        this.manifest.iot_class.startsWith(\"cloud_\")\n      ) {\n        icons.push([\n          mdiCloud,\n          this.hass.localize(\n            \"ui.panel.config.integrations.config_entry.depends_on_cloud\"\n          ),\n        ]);\n      }\n\n      if (this.configEntry?.pref_disable_polling) {\n        icons.push([\n          mdiSyncOff,\n          this.hass.localize(\n            \"ui.panel.config.integrations.config_entry.disabled_polling\"\n          ),\n        ]);\n      }\n    }\n\n    return html`\n      ${!this.banner ? \"\" : html`<div class=\"banner\">${this.banner}</div>`}\n      <slot name=\"above-header\"></slot>\n      <div class=\"header\">\n        <img\n          src=${brandsUrl({\n            domain: this.domain,\n            type: \"icon\",\n            darkOptimized: this.hass.themes?.darkMode,\n          })}\n          referrerpolicy=\"no-referrer\"\n          @error=${this._onImageError}\n          @load=${this._onImageLoad}\n        />\n        <div class=\"info\">\n          <div class=\"primary\" role=\"heading\">${primary}</div>\n          ${secondary ? html`<div class=\"secondary\">${secondary}</div>` : \"\"}\n        </div>\n\n        ${icons.length === 0\n          ? \"\"\n          : html`\n              <div class=\"icons\">\n                ${icons.map(\n                  ([icon, description]) => html`\n                    <span>\n                      <ha-svg-icon .path=${icon}></ha-svg-icon>\n                      <paper-tooltip animation-delay=\"0\"\n                        >${description}</paper-tooltip\n                      >\n                    </span>\n                  `\n                )}\n              </div>\n            `}\n      </div>\n    `;\n  }\n\n  private _onImageLoad(ev) {\n    ev.target.style.visibility = \"initial\";\n  }\n\n  private _onImageError(ev) {\n    ev.target.style.visibility = \"hidden\";\n  }\n\n  static styles = css`\n    .banner {\n      background-color: var(--state-color);\n      color: var(--text-on-state-color);\n      text-align: center;\n      padding: 2px;\n      border-top-left-radius: var(--ha-card-border-radius, 4px);\n      border-top-right-radius: var(--ha-card-border-radius, 4px);\n    }\n    .header {\n      display: flex;\n      position: relative;\n      padding-top: 0px;\n      padding-bottom: 8px;\n      padding-inline-start: 16px;\n      padding-inline-end: 8px;\n      direction: var(--direction);\n    }\n    .header img {\n      margin-top: 16px;\n      margin-inline-start: initial;\n      margin-inline-end: 16px;\n      width: 40px;\n      height: 40px;\n      direction: var(--direction);\n    }\n    .header .info {\n      flex: 1;\n      align-self: center;\n    }\n    .header .info div {\n      word-wrap: break-word;\n      display: -webkit-box;\n      -webkit-box-orient: vertical;\n      -webkit-line-clamp: 2;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n    .primary {\n      font-size: 16px;\n      margin-top: 16px;\n      margin-right: 2px;\n      font-weight: 400;\n      word-break: break-word;\n      color: var(--primary-text-color);\n    }\n    .secondary {\n      font-size: 14px;\n      color: var(--secondary-text-color);\n    }\n    .icons {\n      margin-right: 8px;\n      margin-left: auto;\n      height: 28px;\n      color: var(--text-on-state-color, var(--secondary-text-color));\n      background-color: var(--state-color, #e0e0e0);\n      border-bottom-left-radius: 4px;\n      border-bottom-right-radius: 4px;\n      display: flex;\n      float: right;\n    }\n    .icons ha-svg-icon {\n      width: 20px;\n      height: 20px;\n      margin: 4px;\n    }\n    paper-tooltip {\n      white-space: nowrap;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-integration-header\": HaIntegrationHeader;\n  }\n}\n","import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { IntegrationManifest } from \"../../../data/integration\";\nimport type { HomeAssistant } from \"../../../types\";\nimport \"./ha-integration-header\";\n\n@customElement(\"ha-integration-action-card\")\nexport class HaIntegrationActionCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public banner!: string;\n\n  @property() public localizedDomainName?: string;\n\n  @property() public domain!: string;\n\n  @property() public label!: string;\n\n  @property() public manifest?: IntegrationManifest;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-card outlined>\n        <ha-integration-header\n          .hass=${this.hass}\n          .banner=${this.banner}\n          .domain=${this.domain}\n          .label=${this.label}\n          .localizedDomainName=${this.localizedDomainName}\n          .manifest=${this.manifest}\n        ></ha-integration-header>\n        <div class=\"filler\"></div>\n        <div class=\"actions\"><slot></slot></div>\n      </ha-card>\n    `;\n  }\n\n  static styles = css`\n    ha-card {\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      --ha-card-border-color: var(--state-color);\n      --mdc-theme-primary: var(--state-color);\n    }\n    .filler {\n      flex: 1;\n    }\n    .attention {\n      --state-color: var(--error-color);\n      --text-on-state-color: var(--text-primary-color);\n    }\n    .discovered {\n      --state-color: var(--primary-color);\n      --text-on-state-color: var(--text-primary-color);\n    }\n    .actions {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 8px 6px 0;\n      height: 48px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-integration-action-card\": HaIntegrationActionCard;\n  }\n}\n","import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport {\n  mdiBookshelf,\n  mdiCog,\n  mdiDotsVertical,\n  mdiEyeOff,\n  mdiOpenInNew,\n} from \"@mdi/js\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport {\n  ATTENTION_SOURCES,\n  DISCOVERY_SOURCES,\n  ignoreConfigFlow,\n  localizeConfigFlowTitle,\n} from \"../../../data/config_flow\";\nimport type { IntegrationManifest } from \"../../../data/integration\";\nimport { showConfigFlowDialog } from \"../../../dialogs/config-flow/show-dialog-config-flow\";\nimport { showConfirmationDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport type { HomeAssistant } from \"../../../types\";\nimport type { DataEntryFlowProgressExtended } from \"./ha-config-integrations\";\nimport \"./ha-integration-action-card\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\n\n@customElement(\"ha-config-flow-card\")\nexport class HaConfigFlowCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public flow!: DataEntryFlowProgressExtended;\n\n  @property() public manifest?: IntegrationManifest;\n\n  protected render(): TemplateResult {\n    const attention = ATTENTION_SOURCES.includes(this.flow.context.source);\n    return html`\n      <ha-integration-action-card\n        class=${classMap({\n          discovered: !attention,\n          attention: attention,\n        })}\n        .hass=${this.hass}\n        .manifest=${this.manifest}\n        .banner=${this.hass.localize(\n          `ui.panel.config.integrations.${\n            attention ? \"attention\" : \"discovered\"\n          }`\n        )}\n        .domain=${this.flow.handler}\n        .label=${this.flow.localized_title}\n      >\n        <mwc-button\n          unelevated\n          @click=${this._continueFlow}\n          .label=${this.hass.localize(\n            `ui.panel.config.integrations.${\n              attention ? \"reconfigure\" : \"configure\"\n            }`\n          )}\n        ></mwc-button>\n        <ha-button-menu corner=\"BOTTOM_START\">\n          <ha-icon-button\n            slot=\"trigger\"\n            .label=${this.hass.localize(\"ui.common.menu\")}\n            .path=${mdiDotsVertical}\n          ></ha-icon-button>\n          ${this.flow.context.configuration_url\n            ? html`<a\n                href=${this.flow.context.configuration_url.replace(\n                  /^homeassistant:\\/\\//,\n                  \"\"\n                )}\n                rel=\"noreferrer\"\n                target=${this.flow.context.configuration_url.startsWith(\n                  \"homeassistant://\"\n                )\n                  ? \"_self\"\n                  : \"_blank\"}\n              >\n                <mwc-list-item graphic=\"icon\" hasMeta>\n                  ${this.hass.localize(\n                    \"ui.panel.config.integrations.config_entry.open_configuration_url\"\n                  )}\n                  <ha-svg-icon slot=\"graphic\" .path=${mdiCog}></ha-svg-icon>\n                  <ha-svg-icon slot=\"meta\" .path=${mdiOpenInNew}></ha-svg-icon>\n                </mwc-list-item>\n              </a>`\n            : \"\"}\n          ${this.manifest\n            ? html`<a\n                href=${this.manifest.is_built_in\n                  ? documentationUrl(\n                      this.hass,\n                      `/integrations/${this.manifest.domain}`\n                    )\n                  : this.manifest.documentation}\n                rel=\"noreferrer\"\n                target=\"_blank\"\n              >\n                <mwc-list-item graphic=\"icon\" hasMeta>\n                  ${this.hass.localize(\n                    \"ui.panel.config.integrations.config_entry.documentation\"\n                  )}\n                  <ha-svg-icon\n                    slot=\"graphic\"\n                    .path=${mdiBookshelf}\n                  ></ha-svg-icon>\n                  <ha-svg-icon slot=\"meta\" .path=${mdiOpenInNew}></ha-svg-icon>\n                </mwc-list-item>\n              </a>`\n            : \"\"}\n          ${DISCOVERY_SOURCES.includes(this.flow.context.source) &&\n          this.flow.context.unique_id\n            ? html`\n                <mwc-list-item graphic=\"icon\" @click=${this._ignoreFlow}>\n                  ${this.hass.localize(\n                    \"ui.panel.config.integrations.ignore.ignore\"\n                  )}\n                  <ha-svg-icon slot=\"graphic\" .path=${mdiEyeOff}></ha-svg-icon>\n                </mwc-list-item>\n              `\n            : \"\"}\n        </ha-button-menu>\n      </ha-integration-action-card>\n    `;\n  }\n\n  private _continueFlow() {\n    showConfigFlowDialog(this, {\n      continueFlowId: this.flow.flow_id,\n      dialogClosedCallback: () => {\n        this._handleFlowUpdated();\n      },\n    });\n  }\n\n  private async _ignoreFlow() {\n    const confirmed = await showConfirmationDialog(this, {\n      title: this.hass!.localize(\n        \"ui.panel.config.integrations.ignore.confirm_ignore_title\",\n        \"name\",\n        localizeConfigFlowTitle(this.hass.localize, this.flow)\n      ),\n      text: this.hass!.localize(\n        \"ui.panel.config.integrations.ignore.confirm_ignore\"\n      ),\n      confirmText: this.hass!.localize(\n        \"ui.panel.config.integrations.ignore.ignore\"\n      ),\n    });\n    if (!confirmed) {\n      return;\n    }\n    await ignoreConfigFlow(\n      this.hass,\n      this.flow.flow_id,\n      localizeConfigFlowTitle(this.hass.localize, this.flow)\n    );\n    this._handleFlowUpdated();\n  }\n\n  private _handleFlowUpdated() {\n    fireEvent(this, \"change\", undefined, {\n      bubbles: false,\n    });\n  }\n\n  static styles = css`\n    .attention {\n      --state-color: var(--error-color);\n      --text-on-state-color: var(--text-primary-color);\n    }\n    .discovered {\n      --state-color: var(--primary-color);\n      --text-on-state-color: var(--text-primary-color);\n    }\n    a {\n      text-decoration: none;\n      color: var(--primary-color);\n    }\n    ha-svg-icon[slot=\"meta\"] {\n      width: 18px;\n      height: 18px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-flow-card\": HaConfigFlowCard;\n  }\n}\n","import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { deleteConfigEntry } from \"../../../data/config_entries\";\nimport type { IntegrationManifest } from \"../../../data/integration\";\nimport { showConfirmationDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport type { HomeAssistant } from \"../../../types\";\nimport type { ConfigEntryExtended } from \"./ha-config-integrations\";\nimport \"./ha-integration-action-card\";\n\n@customElement(\"ha-ignored-config-entry-card\")\nexport class HaIgnoredConfigEntryCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entry!: ConfigEntryExtended;\n\n  @property() public manifest?: IntegrationManifest;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-integration-action-card\n        .hass=${this.hass}\n        .manifest=${this.manifest}\n        .banner=${this.hass.localize(\n          \"ui.panel.config.integrations.ignore.ignored\"\n        )}\n        .domain=${this.entry.domain}\n        .localizedDomainName=${this.entry.localized_domain_name}\n        .label=${this.entry.title === \"Ignored\"\n          ? // In 2020.2 we added support for entry.title. All ignored entries before\n            // that have title \"Ignored\" so we fallback to localized domain name.\n            this.entry.localized_domain_name\n          : this.entry.title}\n      >\n        <mwc-button\n          @click=${this._removeIgnoredIntegration}\n          .label=${this.hass.localize(\n            \"ui.panel.config.integrations.ignore.stop_ignore\"\n          )}\n        ></mwc-button>\n      </ha-integration-action-card>\n    `;\n  }\n\n  private async _removeIgnoredIntegration() {\n    showConfirmationDialog(this, {\n      title: this.hass!.localize(\n        \"ui.panel.config.integrations.ignore.confirm_delete_ignore_title\",\n        \"name\",\n        this.hass.localize(`component.${this.entry.domain}.title`)\n      ),\n      text: this.hass!.localize(\n        \"ui.panel.config.integrations.ignore.confirm_delete_ignore\"\n      ),\n      confirmText: this.hass!.localize(\n        \"ui.panel.config.integrations.ignore.stop_ignore\"\n      ),\n      confirm: async () => {\n        const result = await deleteConfigEntry(this.hass, this.entry.entry_id);\n        if (result.require_restart) {\n          alert(\n            this.hass.localize(\n              \"ui.panel.config.integrations.config_entry.restart_confirm\"\n            )\n          );\n        }\n        fireEvent(this, \"change\", undefined, {\n          bubbles: false,\n        });\n      },\n    });\n  }\n\n  static styles = css`\n    :host {\n      --state-color: var(--divider-color, #e0e0e0);\n    }\n\n    mwc-button {\n      --mdc-theme-primary: var(--primary-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-ignored-config-entry-card\": HaIgnoredConfigEntryCard;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport type { RequestSelectedDetail } from \"@material/mwc-list/mwc-list-item\";\nimport {\n  mdiAlertCircle,\n  mdiBookshelf,\n  mdiBug,\n  mdiChevronLeft,\n  mdiCog,\n  mdiDelete,\n  mdiDotsVertical,\n  mdiDownload,\n  mdiOpenInNew,\n  mdiReloadAlert,\n  mdiProgressHelper,\n  mdiPlayCircleOutline,\n  mdiReload,\n  mdiRenameBox,\n  mdiStopCircleOutline,\n} from \"@mdi/js\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport memoizeOne from \"memoize-one\";\nimport { shouldHandleRequestSelectedEvent } from \"../../../common/mwc/handle-request-selected-event\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-icon-next\";\nimport \"../../../components/ha-svg-icon\";\nimport {\n  fetchApplicationCredentialsConfigEntry,\n  deleteApplicationCredential,\n} from \"../../../data/application_credential\";\nimport { getSignedPath } from \"../../../data/auth\";\nimport {\n  ConfigEntry,\n  deleteConfigEntry,\n  disableConfigEntry,\n  DisableConfigEntryResult,\n  enableConfigEntry,\n  reloadConfigEntry,\n  updateConfigEntry,\n  ERROR_STATES,\n  RECOVERABLE_STATES,\n} from \"../../../data/config_entries\";\nimport type { DeviceRegistryEntry } from \"../../../data/device_registry\";\nimport { getConfigEntryDiagnosticsDownloadUrl } from \"../../../data/diagnostics\";\nimport type { EntityRegistryEntry } from \"../../../data/entity_registry\";\nimport type { IntegrationManifest } from \"../../../data/integration\";\nimport { integrationIssuesUrl } from \"../../../data/integration\";\nimport { showConfigEntrySystemOptionsDialog } from \"../../../dialogs/config-entry-system-options/show-dialog-config-entry-system-options\";\nimport { showOptionsFlowDialog } from \"../../../dialogs/config-flow/show-dialog-options-flow\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n  showPromptDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport { haStyle, haStyleScrollbar } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { fileDownload } from \"../../../util/file_download\";\nimport type { ConfigEntryExtended } from \"./ha-config-integrations\";\nimport \"./ha-integration-header\";\n\nconst integrationsWithPanel = {\n  mqtt: \"/config/mqtt\",\n  zha: \"/config/zha/dashboard\",\n  zwave_js: \"/config/zwave_js/dashboard\",\n};\n\n@customElement(\"ha-integration-card\")\nexport class HaIntegrationCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public domain!: string;\n\n  @property({ attribute: false }) public items!: ConfigEntryExtended[];\n\n  @property({ attribute: false }) public manifest?: IntegrationManifest;\n\n  @property({ attribute: false })\n  public entityRegistryEntries!: EntityRegistryEntry[];\n\n  @property({ attribute: false })\n  public deviceRegistryEntries!: DeviceRegistryEntry[];\n\n  @property() public selectedConfigEntryId?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public supportsDiagnostics = false;\n\n  protected render(): TemplateResult {\n    let item = this._selectededConfigEntry;\n\n    if (this.items.length === 1) {\n      item = this.items[0];\n    } else if (this.selectedConfigEntryId) {\n      item = this.items.find(\n        (entry) => entry.entry_id === this.selectedConfigEntryId\n      );\n    }\n\n    const hasItem = item !== undefined;\n\n    return html`\n      <ha-card\n        outlined\n        class=${classMap({\n          single: hasItem,\n          group: !hasItem,\n          hasMultiple: this.items.length > 1,\n          disabled: this.disabled,\n          \"state-not-loaded\": hasItem && item!.state === \"not_loaded\",\n          \"state-failed-unload\": hasItem && item!.state === \"failed_unload\",\n          \"state-setup\": hasItem && item!.state === \"setup_in_progress\",\n          \"state-error\": hasItem && ERROR_STATES.includes(item!.state),\n        })}\n        .configEntry=${item}\n      >\n        <ha-integration-header\n          .hass=${this.hass}\n          .banner=${this.disabled\n            ? this.hass.localize(\n                \"ui.panel.config.integrations.config_entry.disable.disabled\"\n              )\n            : undefined}\n          .domain=${this.domain}\n          .label=${item\n            ? item.title || item.localized_domain_name || this.domain\n            : undefined}\n          .localizedDomainName=${item ? item.localized_domain_name : undefined}\n          .manifest=${this.manifest}\n          .configEntry=${item}\n        >\n          ${this.items.length > 1\n            ? html`\n                <div class=\"back-btn\" slot=\"above-header\">\n                  <ha-icon-button\n                    .path=${mdiChevronLeft}\n                    @click=${this._back}\n                    .label=${this.hass.localize(\"ui.common.back\")}\n                  ></ha-icon-button>\n                </div>\n              `\n            : \"\"}\n        </ha-integration-header>\n\n        ${item\n          ? this._renderSingleEntry(item)\n          : this._renderGroupedIntegration()}\n      </ha-card>\n    `;\n  }\n\n  private _renderGroupedIntegration(): TemplateResult {\n    return html`\n      <paper-listbox class=\"ha-scrollbar\">\n        ${this.items.map(\n          (item) =>\n            html`<paper-item\n              .entryId=${item.entry_id}\n              @click=${this._selectConfigEntry}\n              ><paper-item-body\n                >${item.title ||\n                this.hass.localize(\n                  \"ui.panel.config.integrations.config_entry.unnamed_entry\"\n                )}</paper-item-body\n              >\n              ${item.state === \"setup_in_progress\"\n                ? html`<span>\n                    <ha-svg-icon\n                      class=\"info\"\n                      .path=${mdiProgressHelper}\n                    ></ha-svg-icon\n                    ><paper-tooltip animation-delay=\"0\" position=\"left\">\n                      ${this.hass.localize(\n                        `ui.panel.config.integrations.config_entry.state.setup_in_progress`\n                      )}\n                    </paper-tooltip>\n                  </span>`\n                : \"\"}\n              ${ERROR_STATES.includes(item.state)\n                ? html`<span>\n                    <ha-svg-icon\n                      class=\"error\"\n                      .path=${item.state === \"setup_retry\"\n                        ? mdiReloadAlert\n                        : mdiAlertCircle}\n                    ></ha-svg-icon\n                    ><paper-tooltip animation-delay=\"0\" position=\"left\">\n                      ${this.hass.localize(\n                        `ui.panel.config.integrations.config_entry.state.${item.state}`\n                      )}\n                    </paper-tooltip>\n                  </span>`\n                : \"\"}\n              <ha-icon-next></ha-icon-next>\n            </paper-item>`\n        )}\n      </paper-listbox>\n    `;\n  }\n\n  private _renderSingleEntry(item: ConfigEntryExtended): TemplateResult {\n    const devices = this._getDevices(item, this.deviceRegistryEntries);\n    const services = this._getServices(item, this.deviceRegistryEntries);\n    const entities = this._getEntities(item, this.entityRegistryEntries);\n\n    let stateText: Parameters<typeof this.hass.localize> | undefined;\n    let stateTextExtra: TemplateResult | string | undefined;\n    let icon: string = mdiAlertCircle;\n\n    if (item.disabled_by) {\n      stateText = [\n        \"ui.panel.config.integrations.config_entry.disable.disabled_cause\",\n        \"cause\",\n        this.hass.localize(\n          `ui.panel.config.integrations.config_entry.disable.disabled_by.${item.disabled_by}`\n        ) || item.disabled_by,\n      ];\n      if (item.state === \"failed_unload\") {\n        stateTextExtra = html`.\n        ${this.hass.localize(\n          \"ui.panel.config.integrations.config_entry.disable_restart_confirm\"\n        )}.`;\n      }\n    } else if (item.state === \"not_loaded\") {\n      stateText = [\"ui.panel.config.integrations.config_entry.not_loaded\"];\n    } else if (item.state === \"setup_in_progress\") {\n      icon = mdiProgressHelper;\n      stateText = [\n        \"ui.panel.config.integrations.config_entry.setup_in_progress\",\n      ];\n    } else if (ERROR_STATES.includes(item.state)) {\n      if (item.state === \"setup_retry\") {\n        icon = mdiReloadAlert;\n      }\n      stateText = [\n        `ui.panel.config.integrations.config_entry.state.${item.state}`,\n      ];\n      if (item.reason) {\n        this.hass.loadBackendTranslation(\"config\", item.domain);\n        stateTextExtra = html`:\n        ${this.hass.localize(\n          `component.${item.domain}.config.error.${item.reason}`\n        ) || item.reason}`;\n      } else {\n        stateTextExtra = html`\n          <br />\n          <a href=${`/config/logs/?filter=${item.domain}`}>\n            ${this.hass.localize(\n              \"ui.panel.config.integrations.config_entry.check_the_logs\"\n            )}\n          </a>\n        `;\n      }\n    }\n\n    let devicesLine: (TemplateResult | string)[] = [];\n\n    for (const [items, localizeKey] of [\n      [devices, \"devices\"],\n      [services, \"services\"],\n    ] as const) {\n      if (items.length === 0) {\n        continue;\n      }\n      const url =\n        items.length === 1\n          ? `/config/devices/device/${items[0].id}`\n          : `/config/devices/dashboard?historyBack=1&config_entry=${item.entry_id}`;\n      devicesLine.push(\n        // no white space before/after template on purpose\n        html`<a href=${url}\n          >${this.hass.localize(\n            `ui.panel.config.integrations.config_entry.${localizeKey}`,\n            \"count\",\n            items.length\n          )}</a\n        >`\n      );\n    }\n\n    if (entities.length) {\n      devicesLine.push(\n        // no white space before/after template on purpose\n        html`<a\n          href=${`/config/entities?historyBack=1&config_entry=${item.entry_id}`}\n          >${this.hass.localize(\n            \"ui.panel.config.integrations.config_entry.entities\",\n            \"count\",\n            entities.length\n          )}</a\n        >`\n      );\n    }\n\n    if (devicesLine.length === 2) {\n      devicesLine = [\n        devicesLine[0],\n        ` ${this.hass.localize(\"ui.common.and\")} `,\n        devicesLine[1],\n      ];\n    } else if (devicesLine.length === 3) {\n      devicesLine = [\n        devicesLine[0],\n        \", \",\n        devicesLine[1],\n        ` ${this.hass.localize(\"ui.common.and\")} `,\n        devicesLine[2],\n      ];\n    }\n\n    return html`\n      ${stateText\n        ? html`\n            <div class=\"message\">\n              <ha-svg-icon .path=${icon}></ha-svg-icon>\n              <div>${this.hass.localize(...stateText)}${stateTextExtra}</div>\n            </div>\n          `\n        : \"\"}\n      <div class=\"content\">${devicesLine}</div>\n      <div class=\"actions\">\n        <div>\n          ${item.disabled_by === \"user\"\n            ? html`<mwc-button unelevated @click=${this._handleEnable}>\n                ${this.hass.localize(\"ui.common.enable\")}\n              </mwc-button>`\n            : item.domain in integrationsWithPanel\n            ? html`<a\n                href=${`${integrationsWithPanel[item.domain]}?config_entry=${\n                  item.entry_id\n                }`}\n                ><mwc-button>\n                  ${this.hass.localize(\n                    \"ui.panel.config.integrations.config_entry.configure\"\n                  )}\n                </mwc-button></a\n              >`\n            : item.supports_options\n            ? html`\n                <mwc-button @click=${this._showOptions}>\n                  ${this.hass.localize(\n                    \"ui.panel.config.integrations.config_entry.configure\"\n                  )}\n                </mwc-button>\n              `\n            : \"\"}\n        </div>\n        <ha-button-menu corner=\"BOTTOM_START\">\n          <ha-icon-button\n            slot=\"trigger\"\n            .label=${this.hass.localize(\"ui.common.menu\")}\n            .path=${mdiDotsVertical}\n          ></ha-icon-button>\n          ${!item.disabled_by &&\n          RECOVERABLE_STATES.includes(item.state) &&\n          item.supports_unload &&\n          item.source !== \"system\"\n            ? html`<mwc-list-item\n                @request-selected=${this._handleReload}\n                graphic=\"icon\"\n              >\n                ${this.hass.localize(\n                  \"ui.panel.config.integrations.config_entry.reload\"\n                )}\n                <ha-svg-icon slot=\"graphic\" .path=${mdiReload}></ha-svg-icon>\n              </mwc-list-item>`\n            : \"\"}\n\n          <mwc-list-item @request-selected=${this._handleRename} graphic=\"icon\">\n            ${this.hass.localize(\n              \"ui.panel.config.integrations.config_entry.rename\"\n            )}\n            <ha-svg-icon slot=\"graphic\" .path=${mdiRenameBox}></ha-svg-icon>\n          </mwc-list-item>\n          ${this.supportsDiagnostics && item.state === \"loaded\"\n            ? html`<a\n                href=${getConfigEntryDiagnosticsDownloadUrl(item.entry_id)}\n                target=\"_blank\"\n                @click=${this._signUrl}\n              >\n                <mwc-list-item graphic=\"icon\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.integrations.config_entry.download_diagnostics\"\n                  )}\n                  <ha-svg-icon\n                    slot=\"graphic\"\n                    .path=${mdiDownload}\n                  ></ha-svg-icon>\n                </mwc-list-item>\n              </a>`\n            : \"\"}\n          ${this.manifest &&\n          (this.manifest.is_built_in ||\n            this.manifest.issue_tracker ||\n            this.manifest.documentation)\n            ? html`<li divider role=\"separator\"></li>`\n            : \"\"}\n          ${this.manifest\n            ? html` <a\n                href=${this.manifest.is_built_in\n                  ? documentationUrl(\n                      this.hass,\n                      `/integrations/${this.manifest.domain}`\n                    )\n                  : this.manifest.documentation}\n                rel=\"noreferrer\"\n                target=\"_blank\"\n              >\n                <mwc-list-item graphic=\"icon\" hasMeta>\n                  ${this.hass.localize(\n                    \"ui.panel.config.integrations.config_entry.documentation\"\n                  )}\n                  <ha-svg-icon\n                    slot=\"graphic\"\n                    .path=${mdiBookshelf}\n                  ></ha-svg-icon>\n                  <ha-svg-icon slot=\"meta\" .path=${mdiOpenInNew}></ha-svg-icon>\n                </mwc-list-item>\n              </a>`\n            : \"\"}\n          ${this.manifest &&\n          (this.manifest.is_built_in || this.manifest.issue_tracker)\n            ? html`<a\n                href=${integrationIssuesUrl(item.domain, this.manifest)}\n                rel=\"noreferrer\"\n                target=\"_blank\"\n              >\n                <mwc-list-item graphic=\"icon\" hasMeta>\n                  ${this.hass.localize(\n                    \"ui.panel.config.integrations.config_entry.known_issues\"\n                  )}\n                  <ha-svg-icon slot=\"graphic\" .path=${mdiBug}></ha-svg-icon>\n                  <ha-svg-icon slot=\"meta\" .path=${mdiOpenInNew}></ha-svg-icon>\n                </mwc-list-item>\n              </a>`\n            : \"\"}\n\n          <li divider role=\"separator\"></li>\n\n          <mwc-list-item\n            @request-selected=${this._handleSystemOptions}\n            graphic=\"icon\"\n          >\n            ${this.hass.localize(\n              \"ui.panel.config.integrations.config_entry.system_options\"\n            )}\n            <ha-svg-icon slot=\"graphic\" .path=${mdiCog}></ha-svg-icon>\n          </mwc-list-item>\n          ${item.disabled_by === \"user\"\n            ? html`<mwc-list-item\n                @request-selected=${this._handleEnable}\n                graphic=\"icon\"\n              >\n                ${this.hass.localize(\"ui.common.enable\")}\n                <ha-svg-icon\n                  slot=\"graphic\"\n                  .path=${mdiPlayCircleOutline}\n                ></ha-svg-icon>\n              </mwc-list-item>`\n            : item.source !== \"system\"\n            ? html`<mwc-list-item\n                class=\"warning\"\n                @request-selected=${this._handleDisable}\n                graphic=\"icon\"\n              >\n                ${this.hass.localize(\"ui.common.disable\")}\n                <ha-svg-icon\n                  slot=\"graphic\"\n                  class=\"warning\"\n                  .path=${mdiStopCircleOutline}\n                ></ha-svg-icon>\n              </mwc-list-item>`\n            : \"\"}\n          ${item.source !== \"system\"\n            ? html`<mwc-list-item\n                class=\"warning\"\n                @request-selected=${this._handleDelete}\n                graphic=\"icon\"\n              >\n                ${this.hass.localize(\n                  \"ui.panel.config.integrations.config_entry.delete\"\n                )}\n                <ha-svg-icon\n                  slot=\"graphic\"\n                  class=\"warning\"\n                  .path=${mdiDelete}\n                ></ha-svg-icon>\n              </mwc-list-item>`\n            : \"\"}\n        </ha-button-menu>\n      </div>\n    `;\n  }\n\n  private get _selectededConfigEntry(): ConfigEntryExtended | undefined {\n    return this.items.length === 1\n      ? this.items[0]\n      : this.selectedConfigEntryId\n      ? this.items.find(\n          (entry) => entry.entry_id === this.selectedConfigEntryId\n        )\n      : undefined;\n  }\n\n  private _selectConfigEntry(ev: Event) {\n    this.selectedConfigEntryId = (ev.currentTarget as any).entryId;\n  }\n\n  private _back() {\n    this.selectedConfigEntryId = undefined;\n    this.classList.remove(\"highlight\");\n  }\n\n  private _getEntities = memoizeOne(\n    (\n      configEntry: ConfigEntry,\n      entityRegistryEntries: EntityRegistryEntry[]\n    ): EntityRegistryEntry[] => {\n      if (!entityRegistryEntries) {\n        return [];\n      }\n      return entityRegistryEntries.filter(\n        (entity) => entity.config_entry_id === configEntry.entry_id\n      );\n    }\n  );\n\n  private _getDevices = memoizeOne(\n    (\n      configEntry: ConfigEntry,\n      deviceRegistryEntries: DeviceRegistryEntry[]\n    ): DeviceRegistryEntry[] => {\n      if (!deviceRegistryEntries) {\n        return [];\n      }\n      return deviceRegistryEntries.filter(\n        (device) =>\n          device.config_entries.includes(configEntry.entry_id) &&\n          device.entry_type !== \"service\"\n      );\n    }\n  );\n\n  private _getServices = memoizeOne(\n    (\n      configEntry: ConfigEntry,\n      deviceRegistryEntries: DeviceRegistryEntry[]\n    ): DeviceRegistryEntry[] => {\n      if (!deviceRegistryEntries) {\n        return [];\n      }\n      return deviceRegistryEntries.filter(\n        (device) =>\n          device.config_entries.includes(configEntry.entry_id) &&\n          device.entry_type === \"service\"\n      );\n    }\n  );\n\n  private _showOptions(ev) {\n    showOptionsFlowDialog(\n      this,\n      ev.target.closest(\"ha-card\").configEntry,\n      this.manifest\n    );\n  }\n\n  private _handleRename(ev: CustomEvent<RequestSelectedDetail>): void {\n    if (!shouldHandleRequestSelectedEvent(ev)) {\n      return;\n    }\n    this._editEntryName(\n      ((ev.target as HTMLElement).closest(\"ha-card\") as any).configEntry\n    );\n  }\n\n  private _handleReload(ev: CustomEvent<RequestSelectedDetail>): void {\n    if (!shouldHandleRequestSelectedEvent(ev)) {\n      return;\n    }\n    this._reloadIntegration(\n      ((ev.target as HTMLElement).closest(\"ha-card\") as any).configEntry\n    );\n  }\n\n  private _handleDelete(ev: CustomEvent<RequestSelectedDetail>): void {\n    if (!shouldHandleRequestSelectedEvent(ev)) {\n      return;\n    }\n    this._removeIntegration(\n      ((ev.target as HTMLElement).closest(\"ha-card\") as any).configEntry\n    );\n  }\n\n  private _handleDisable(ev: CustomEvent<RequestSelectedDetail>): void {\n    if (!shouldHandleRequestSelectedEvent(ev)) {\n      return;\n    }\n    this._disableIntegration(\n      ((ev.target as HTMLElement).closest(\"ha-card\") as any).configEntry\n    );\n  }\n\n  private _handleEnable(ev: CustomEvent<RequestSelectedDetail>): void {\n    if (ev.detail.source && !shouldHandleRequestSelectedEvent(ev)) {\n      return;\n    }\n    this._enableIntegration(\n      ((ev.target as HTMLElement).closest(\"ha-card\") as any).configEntry\n    );\n  }\n\n  private _handleSystemOptions(ev: CustomEvent<RequestSelectedDetail>): void {\n    if (!shouldHandleRequestSelectedEvent(ev)) {\n      return;\n    }\n    this._showSystemOptions(\n      ((ev.target as HTMLElement).closest(\"ha-card\") as any).configEntry\n    );\n  }\n\n  private _showSystemOptions(configEntry: ConfigEntry) {\n    showConfigEntrySystemOptionsDialog(this, {\n      entry: configEntry,\n      manifest: this.manifest,\n    });\n  }\n\n  private async _disableIntegration(configEntry: ConfigEntry) {\n    const entryId = configEntry.entry_id;\n\n    const confirmed = await showConfirmationDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.integrations.config_entry.disable_confirm_title\",\n        { title: configEntry.title }\n      ),\n      text: this.hass.localize(\n        \"ui.panel.config.integrations.config_entry.disable_confirm_text\"\n      ),\n      confirmText: this.hass!.localize(\"ui.common.disable\"),\n      dismissText: this.hass!.localize(\"ui.common.cancel\"),\n      destructive: true,\n    });\n\n    if (!confirmed) {\n      return;\n    }\n    let result: DisableConfigEntryResult;\n    try {\n      result = await disableConfigEntry(this.hass, entryId);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.integrations.config_entry.disable_error\"\n        ),\n        text: err.message,\n      });\n      return;\n    }\n    if (result.require_restart) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.config.integrations.config_entry.disable_restart_confirm\"\n        ),\n      });\n    }\n  }\n\n  private async _enableIntegration(configEntry: ConfigEntry) {\n    const entryId = configEntry.entry_id;\n\n    let result: DisableConfigEntryResult;\n    try {\n      result = await enableConfigEntry(this.hass, entryId);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.integrations.config_entry.disable_error\"\n        ),\n        text: err.message,\n      });\n      return;\n    }\n\n    if (result.require_restart) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.config.integrations.config_entry.enable_restart_confirm\"\n        ),\n      });\n    }\n  }\n\n  private async _removeIntegration(configEntry: ConfigEntry) {\n    const entryId = configEntry.entry_id;\n\n    const applicationCredentialsId = await this._applicationCredentialForRemove(\n      entryId\n    );\n\n    const confirmed = await showConfirmationDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.integrations.config_entry.delete_confirm_title\",\n        { title: configEntry.title }\n      ),\n      text: this.hass.localize(\n        \"ui.panel.config.integrations.config_entry.delete_confirm_text\"\n      ),\n      confirmText: this.hass!.localize(\"ui.common.delete\"),\n      dismissText: this.hass!.localize(\"ui.common.cancel\"),\n      destructive: true,\n    });\n\n    if (!confirmed) {\n      return;\n    }\n    const result = await deleteConfigEntry(this.hass, entryId);\n\n    if (result.require_restart) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.config.integrations.config_entry.restart_confirm\"\n        ),\n      });\n    }\n    if (applicationCredentialsId) {\n      this._removeApplicationCredential(applicationCredentialsId);\n    }\n  }\n\n  // Return an application credentials id for this config entry to prompt the\n  // user for removal. This is best effort so we don't stop overall removal\n  // if the integration isn't loaded or there is some other error.\n  private async _applicationCredentialForRemove(entryId: string) {\n    try {\n      return (await fetchApplicationCredentialsConfigEntry(this.hass, entryId))\n        .application_credentials_id;\n    } catch (err: any) {\n      // We won't prompt the user to remove credentials\n      return null;\n    }\n  }\n\n  private async _removeApplicationCredential(applicationCredentialsId: string) {\n    const confirmed = await showConfirmationDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.integrations.config_entry.application_credentials.delete_title\"\n      ),\n      text: html`${this.hass.localize(\n          \"ui.panel.config.integrations.config_entry.application_credentials.delete_prompt\"\n        )},\n        <br />\n        <br />\n        ${this.hass.localize(\n          \"ui.panel.config.integrations.config_entry.application_credentials.delete_detail\"\n        )}\n        <br />\n        <br />\n        <a\n          href=${documentationUrl(\n            this.hass,\n            \"/integrations/application_credentials/\"\n          )}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          ${this.hass.localize(\n            \"ui.panel.config.integrations.config_entry.application_credentials.learn_more\"\n          )}\n        </a>`,\n      destructive: true,\n      confirmText: this.hass.localize(\"ui.common.remove\"),\n      dismissText: this.hass.localize(\n        \"ui.panel.config.integrations.config_entry.application_credentials.dismiss\"\n      ),\n    });\n    if (!confirmed) {\n      return;\n    }\n    try {\n      await deleteApplicationCredential(this.hass, applicationCredentialsId);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.integrations.config_entry.application_credentials.delete_error_title\"\n        ),\n        text: err.message,\n      });\n    }\n  }\n\n  private async _reloadIntegration(configEntry: ConfigEntry) {\n    const entryId = configEntry.entry_id;\n\n    const result = await reloadConfigEntry(this.hass, entryId);\n    const locale_key = result.require_restart\n      ? \"reload_restart_confirm\"\n      : \"reload_confirm\";\n    showAlertDialog(this, {\n      text: this.hass.localize(\n        `ui.panel.config.integrations.config_entry.${locale_key}`\n      ),\n    });\n  }\n\n  private async _editEntryName(configEntry: ConfigEntry) {\n    const newName = await showPromptDialog(this, {\n      title: this.hass.localize(\"ui.panel.config.integrations.rename_dialog\"),\n      defaultValue: configEntry.title,\n      inputLabel: this.hass.localize(\n        \"ui.panel.config.integrations.rename_input_label\"\n      ),\n    });\n    if (newName === null) {\n      return;\n    }\n    await updateConfigEntry(this.hass, configEntry.entry_id, {\n      title: newName,\n    });\n  }\n\n  private async _signUrl(ev) {\n    const anchor = ev.target.closest(\"a\");\n    ev.preventDefault();\n    const signedUrl = await getSignedPath(\n      this.hass,\n      anchor.getAttribute(\"href\")\n    );\n    fileDownload(signedUrl.path);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleScrollbar,\n      css`\n        ha-card {\n          display: flex;\n          flex-direction: column;\n          height: 100%;\n          --state-color: var(--divider-color, #e0e0e0);\n          --ha-card-border-color: var(--state-color);\n          --state-message-color: var(--state-color);\n        }\n        .state-error {\n          --state-color: var(--error-color);\n          --text-on-state-color: var(--text-primary-color);\n        }\n        .state-failed-unload {\n          --state-color: var(--warning-color);\n          --text-on-state-color: var(--primary-text-color);\n        }\n        .state-not-loaded {\n          --state-message-color: var(--primary-text-color);\n        }\n        .state-setup {\n          --state-message-color: var(--secondary-text-color);\n        }\n        :host(.highlight) ha-card {\n          --state-color: var(--primary-color);\n          --text-on-state-color: var(--text-primary-color);\n        }\n\n        .back-btn {\n          background-color: var(--state-color);\n          color: var(--text-on-state-color);\n          --mdc-icon-button-size: 32px;\n          transition: height 0.1s;\n          overflow: hidden;\n        }\n        .hasMultiple.single .back-btn {\n          height: 24px;\n          display: flex;\n          align-items: center;\n        }\n        .hasMultiple.group .back-btn {\n          height: 0px;\n        }\n\n        .message {\n          font-weight: bold;\n          padding-bottom: 16px;\n          display: flex;\n          margin-left: 40px;\n        }\n        .message ha-svg-icon {\n          color: var(--state-message-color);\n        }\n        .message div {\n          flex: 1;\n          margin-left: 8px;\n          padding-top: 2px;\n          padding-right: 2px;\n          overflow-wrap: break-word;\n          display: -webkit-box;\n          -webkit-box-orient: vertical;\n          -webkit-line-clamp: 7;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n\n        .content {\n          flex: 1;\n          padding: 0px 16px 0 72px;\n        }\n\n        .actions {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          padding: 8px 0 0 8px;\n          height: 48px;\n        }\n        .actions a {\n          text-decoration: none;\n        }\n        a {\n          color: var(--primary-color);\n        }\n        ha-button-menu {\n          color: var(--secondary-text-color);\n          --mdc-menu-min-width: 200px;\n        }\n        @media (min-width: 563px) {\n          ha-card.group {\n            position: relative;\n            min-height: 164px;\n          }\n          paper-listbox {\n            position: absolute;\n            top: 64px;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            overflow: auto;\n          }\n          .disabled paper-listbox {\n            top: 88px;\n          }\n        }\n        paper-item {\n          cursor: pointer;\n          min-height: 35px;\n        }\n        paper-item-body {\n          word-wrap: break-word;\n          display: -webkit-box;\n          -webkit-box-orient: vertical;\n          -webkit-line-clamp: 2;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n        mwc-list-item ha-svg-icon {\n          color: var(--secondary-text-color);\n        }\n        ha-svg-icon[slot=\"meta\"] {\n          width: 18px;\n          height: 18px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-integration-card\": HaIntegrationCard;\n  }\n}\n","import { ActionDetail } from \"@material/mwc-list\";\nimport { mdiFilterVariant, mdiPlus } from \"@mdi/js\";\nimport Fuse from \"fuse.js\";\nimport type { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { protocolIntegrationPicked } from \"../../../common/integrations/protocolIntegrationPicked\";\nimport { navigate } from \"../../../common/navigate\";\nimport { caseInsensitiveStringCompare } from \"../../../common/string/compare\";\nimport type { LocalizeFunc } from \"../../../common/translations/localize\";\nimport { extractSearchParam } from \"../../../common/url/search-params\";\nimport { nextRender } from \"../../../common/util/render-status\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-check-list-item\";\nimport \"../../../components/ha-checkbox\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/search-input\";\nimport {\n  ConfigEntry,\n  subscribeConfigEntries,\n} from \"../../../data/config_entries\";\nimport {\n  getConfigFlowHandlers,\n  getConfigFlowInProgressCollection,\n  localizeConfigFlowTitle,\n  subscribeConfigFlowInProgress,\n} from \"../../../data/config_flow\";\nimport type { DataEntryFlowProgress } from \"../../../data/data_entry_flow\";\nimport {\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n} from \"../../../data/device_registry\";\nimport { fetchDiagnosticHandlers } from \"../../../data/diagnostics\";\nimport {\n  EntityRegistryEntry,\n  subscribeEntityRegistry,\n} from \"../../../data/entity_registry\";\nimport {\n  domainToName,\n  fetchIntegrationManifests,\n  IntegrationManifest,\n} from \"../../../data/integration\";\nimport {\n  getSupportedBrands,\n  getSupportedBrandsLookup,\n} from \"../../../data/supported_brands\";\nimport { scanUSBDevices } from \"../../../data/usb\";\nimport { showConfigFlowDialog } from \"../../../dialogs/config-flow/show-dialog-config-flow\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-loading-screen\";\nimport \"../../../layouts/hass-tabs-subpage\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant, Route } from \"../../../types\";\nimport { configSections } from \"../ha-panel-config\";\nimport { HELPER_DOMAINS } from \"../helpers/const\";\nimport \"./ha-config-flow-card\";\nimport \"./ha-ignored-config-entry-card\";\nimport \"./ha-integration-card\";\nimport type { HaIntegrationCard } from \"./ha-integration-card\";\nimport \"./ha-integration-overflow-menu\";\nimport { showAddIntegrationDialog } from \"./show-add-integration-dialog\";\n\nexport interface ConfigEntryUpdatedEvent {\n  entry: ConfigEntry;\n}\n\nexport interface ConfigEntryRemovedEvent {\n  entryId: string;\n}\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"entry-updated\": ConfigEntryUpdatedEvent;\n    \"entry-removed\": ConfigEntryRemovedEvent;\n  }\n}\n\nexport interface DataEntryFlowProgressExtended extends DataEntryFlowProgress {\n  localized_title?: string;\n}\n\nexport interface ConfigEntryExtended extends ConfigEntry {\n  localized_domain_name?: string;\n}\n\nconst groupByIntegration = (\n  entries: ConfigEntryExtended[]\n): Map<string, ConfigEntryExtended[]> => {\n  const result = new Map();\n  entries.forEach((entry) => {\n    if (result.has(entry.domain)) {\n      result.get(entry.domain).push(entry);\n    } else {\n      result.set(entry.domain, [entry]);\n    }\n  });\n  return result;\n};\n\n@customElement(\"ha-config-integrations\")\nclass HaConfigIntegrations extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property() public isWide!: boolean;\n\n  @property() public showAdvanced!: boolean;\n\n  @property() public route!: Route;\n\n  @state() private _configEntries?: ConfigEntryExtended[];\n\n  @property()\n  private _configEntriesInProgress: DataEntryFlowProgressExtended[] = [];\n\n  @state()\n  private _entityRegistryEntries: EntityRegistryEntry[] = [];\n\n  @state()\n  private _deviceRegistryEntries: DeviceRegistryEntry[] = [];\n\n  @state()\n  private _manifests: Record<string, IntegrationManifest> = {};\n\n  private _extraFetchedManifests?: Set<string>;\n\n  @state() private _showIgnored = false;\n\n  @state() private _showDisabled = false;\n\n  @state() private _searchParms = new URLSearchParams(\n    window.location.hash.substring(1)\n  );\n\n  @state() private _filter: string = history.state?.filter || \"\";\n\n  @state() private _diagnosticHandlers?: Record<string, boolean>;\n\n  public hassSubscribe(): Array<UnsubscribeFunc | Promise<UnsubscribeFunc>> {\n    return [\n      subscribeEntityRegistry(this.hass.connection, (entries) => {\n        this._entityRegistryEntries = entries;\n      }),\n      subscribeDeviceRegistry(this.hass.connection, (entries) => {\n        this._deviceRegistryEntries = entries;\n      }),\n      subscribeConfigFlowInProgress(this.hass, async (flowsInProgress) => {\n        const integrations: Set<string> = new Set();\n        const manifests: Set<string> = new Set();\n        flowsInProgress.forEach((flow) => {\n          // To render title placeholders\n          if (flow.context.title_placeholders) {\n            integrations.add(flow.handler);\n          }\n          manifests.add(flow.handler);\n        });\n        await this.hass.loadBackendTranslation(\n          \"config\",\n          Array.from(integrations)\n        );\n        this._fetchIntegrationManifests(manifests);\n        await nextRender();\n        this._configEntriesInProgress = flowsInProgress.map((flow) => ({\n          ...flow,\n          localized_title: localizeConfigFlowTitle(this.hass.localize, flow),\n        }));\n      }),\n      subscribeConfigEntries(\n        this.hass,\n        (messages) => {\n          let fullUpdate = false;\n          const newEntries: ConfigEntryExtended[] = [];\n          messages.forEach((message) => {\n            if (message.type === null || message.type === \"added\") {\n              newEntries.push({\n                ...message.entry,\n                localized_domain_name: domainToName(\n                  this.hass.localize,\n                  message.entry.domain\n                ),\n              });\n              if (message.type === null) {\n                fullUpdate = true;\n              }\n            } else if (message.type === \"removed\") {\n              this._configEntries = this._configEntries!.filter(\n                (entry) => entry.entry_id !== message.entry.entry_id\n              );\n            } else if (message.type === \"updated\") {\n              const newEntry = message.entry;\n              this._configEntries = this._configEntries!.map((entry) =>\n                entry.entry_id === newEntry.entry_id\n                  ? {\n                      ...newEntry,\n                      localized_domain_name: entry.localized_domain_name,\n                    }\n                  : entry\n              );\n            }\n          });\n          if (!newEntries.length && !fullUpdate) {\n            return;\n          }\n          const existingEntries = fullUpdate ? [] : this._configEntries;\n          this._configEntries = [...existingEntries!, ...newEntries].sort(\n            (conf1, conf2) =>\n              caseInsensitiveStringCompare(\n                conf1.localized_domain_name + conf1.title,\n                conf2.localized_domain_name + conf2.title\n              )\n          );\n        },\n        { type: \"integration\" }\n      ),\n    ];\n  }\n\n  private _filterConfigEntries = memoizeOne(\n    (\n      configEntries: ConfigEntryExtended[],\n      filter?: string\n    ): ConfigEntryExtended[] => {\n      if (!filter) {\n        return [...configEntries];\n      }\n      const options: Fuse.IFuseOptions<ConfigEntryExtended> = {\n        keys: [\"domain\", \"localized_domain_name\", \"title\"],\n        isCaseSensitive: false,\n        minMatchCharLength: 2,\n        threshold: 0.2,\n      };\n      const fuse = new Fuse(configEntries, options);\n      return fuse.search(filter).map((result) => result.item);\n    }\n  );\n\n  private _filterGroupConfigEntries = memoizeOne(\n    (\n      configEntries: ConfigEntryExtended[],\n      filter?: string\n    ): [\n      Map<string, ConfigEntryExtended[]>,\n      ConfigEntryExtended[],\n      Map<string, ConfigEntryExtended[]>,\n      // Counter for disabled integrations since the tuple element above will\n      // be grouped by the integration name and therefore not provide a valid count\n      number\n    ] => {\n      const filteredConfigEnties = this._filterConfigEntries(\n        configEntries,\n        filter\n      );\n      const ignored: ConfigEntryExtended[] = [];\n      const disabled: ConfigEntryExtended[] = [];\n      for (let i = filteredConfigEnties.length - 1; i >= 0; i--) {\n        if (filteredConfigEnties[i].source === \"ignore\") {\n          ignored.push(filteredConfigEnties.splice(i, 1)[0]);\n        } else if (filteredConfigEnties[i].disabled_by !== null) {\n          disabled.push(filteredConfigEnties.splice(i, 1)[0]);\n        }\n      }\n      return [\n        groupByIntegration(filteredConfigEnties),\n        ignored,\n        groupByIntegration(disabled),\n        disabled.length,\n      ];\n    }\n  );\n\n  private _filterConfigEntriesInProgress = memoizeOne(\n    (\n      configEntriesInProgress: DataEntryFlowProgressExtended[],\n      filter?: string\n    ): DataEntryFlowProgressExtended[] => {\n      if (!filter) {\n        return configEntriesInProgress;\n      }\n      const options: Fuse.IFuseOptions<DataEntryFlowProgressExtended> = {\n        keys: [\"handler\", \"localized_title\"],\n        isCaseSensitive: false,\n        minMatchCharLength: 2,\n        threshold: 0.2,\n      };\n      const fuse = new Fuse(configEntriesInProgress, options);\n      return fuse.search(filter).map((result) => result.item);\n    }\n  );\n\n  protected firstUpdated(changed: PropertyValues) {\n    super.firstUpdated(changed);\n    const localizePromise = this.hass.loadBackendTranslation(\n      \"title\",\n      undefined,\n      true\n    );\n    this._fetchManifests();\n    if (this.route.path === \"/add\") {\n      this._handleAdd(localizePromise);\n    }\n    this._scanUSBDevices();\n    if (isComponentLoaded(this.hass, \"diagnostics\")) {\n      fetchDiagnosticHandlers(this.hass).then((infos) => {\n        const handlers = {};\n        for (const info of infos) {\n          handlers[info.domain] = info.handlers.config_entry;\n        }\n        this._diagnosticHandlers = handlers;\n      });\n    }\n  }\n\n  protected updated(changed: PropertyValues) {\n    super.updated(changed);\n    if (\n      this._searchParms.has(\"config_entry\") &&\n      changed.has(\"_configEntries\") &&\n      !changed.get(\"_configEntries\") &&\n      this._configEntries\n    ) {\n      this._highlightEntry();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._configEntries) {\n      return html`<hass-loading-screen\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n      ></hass-loading-screen>`;\n    }\n    const [\n      groupedConfigEntries,\n      ignoredConfigEntries,\n      disabledConfigEntries,\n      disabledCount,\n    ] = this._filterGroupConfigEntries(this._configEntries, this._filter);\n    const configEntriesInProgress = this._filterConfigEntriesInProgress(\n      this._configEntriesInProgress,\n      this._filter\n    );\n\n    const filterMenu = html`\n      <div slot=${ifDefined(this.narrow ? \"toolbar-icon\" : \"suffix\")}>\n        <div class=\"menu-badge-container\">\n          ${!this._showDisabled && this.narrow && disabledCount\n            ? html`<span class=\"badge\">${disabledCount}</span>`\n            : \"\"}\n          <ha-button-menu\n            corner=\"BOTTOM_START\"\n            multi\n            @action=${this._handleMenuAction}\n            @click=${this._preventDefault}\n          >\n            <ha-icon-button\n              slot=\"trigger\"\n              .label=${this.hass.localize(\"ui.common.menu\")}\n              .path=${mdiFilterVariant}\n            >\n            </ha-icon-button>\n            <ha-check-list-item left .selected=${this._showIgnored}>\n              ${this.hass.localize(\n                \"ui.panel.config.integrations.ignore.show_ignored\"\n              )}\n            </ha-check-list-item>\n            <ha-check-list-item left .selected=${this._showDisabled}>\n              ${this.hass.localize(\n                \"ui.panel.config.integrations.disable.show_disabled\"\n              )}\n            </ha-check-list-item>\n          </ha-button-menu>\n        </div>\n        ${this.narrow\n          ? html`\n              <ha-integration-overflow-menu\n                .hass=${this.hass}\n                slot=\"toolbar-icon\"\n              ></ha-integration-overflow-menu>\n            `\n          : \"\"}\n      </div>\n    `;\n\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/config\"\n        .route=${this.route}\n        .tabs=${configSections.devices}\n      >\n        ${this.narrow\n          ? html`\n              <div slot=\"header\">\n                <search-input\n                  .hass=${this.hass}\n                  .filter=${this._filter}\n                  class=\"header\"\n                  @value-changed=${this._handleSearchChange}\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.integrations.search\"\n                  )}\n                ></search-input>\n              </div>\n              ${filterMenu}\n            `\n          : html`\n              <ha-integration-overflow-menu\n                .hass=${this.hass}\n                slot=\"toolbar-icon\"\n              ></ha-integration-overflow-menu>\n              <div class=\"search\">\n                <search-input\n                  .hass=${this.hass}\n                  suffix\n                  .filter=${this._filter}\n                  @value-changed=${this._handleSearchChange}\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.integrations.search\"\n                  )}\n                >\n                  ${!this._showDisabled && disabledCount\n                    ? html`<div\n                        class=\"active-filters\"\n                        slot=\"suffix\"\n                        @click=${this._preventDefault}\n                      >\n                        ${this.hass.localize(\n                          \"ui.panel.config.integrations.disable.disabled_integrations\",\n                          { number: disabledCount }\n                        )}\n                        <mwc-button\n                          @click=${this._toggleShowDisabled}\n                          .label=${this.hass.localize(\n                            \"ui.panel.config.integrations.disable.show\"\n                          )}\n                        ></mwc-button>\n                      </div>`\n                    : \"\"}\n                  ${filterMenu}\n                </search-input>\n              </div>\n            `}\n\n        <div class=\"container\">\n          ${this._showIgnored\n            ? ignoredConfigEntries.map(\n                (entry: ConfigEntryExtended) => html`\n                  <ha-ignored-config-entry-card\n                    .hass=${this.hass}\n                    .manifest=${this._manifests[entry.domain]}\n                    .entry=${entry}\n                    @change=${this._handleFlowUpdated}\n                  ></ha-ignored-config-entry-card>\n                `\n              )\n            : \"\"}\n          ${configEntriesInProgress.length\n            ? configEntriesInProgress.map(\n                (flow: DataEntryFlowProgressExtended) => html`\n                  <ha-config-flow-card\n                    .hass=${this.hass}\n                    .manifest=${this._manifests[flow.handler]}\n                    .flow=${flow}\n                    @change=${this._handleFlowUpdated}\n                  ></ha-config-flow-card>\n                `\n              )\n            : \"\"}\n          ${this._showDisabled\n            ? Array.from(disabledConfigEntries.entries()).map(\n                ([domain, items]) =>\n                  html`<ha-integration-card\n                    data-domain=${domain}\n                    disabled\n                    .hass=${this.hass}\n                    .domain=${domain}\n                    .items=${items}\n                    .manifest=${this._manifests[domain]}\n                    .entityRegistryEntries=${this._entityRegistryEntries}\n                    .deviceRegistryEntries=${this._deviceRegistryEntries}\n                  ></ha-integration-card> `\n              )\n            : \"\"}\n          ${groupedConfigEntries.size\n            ? Array.from(groupedConfigEntries.entries()).map(\n                ([domain, items]) =>\n                  html`<ha-integration-card\n                    data-domain=${domain}\n                    .hass=${this.hass}\n                    .domain=${domain}\n                    .items=${items}\n                    .manifest=${this._manifests[domain]}\n                    .entityRegistryEntries=${this._entityRegistryEntries}\n                    .deviceRegistryEntries=${this._deviceRegistryEntries}\n                    .supportsDiagnostics=${this._diagnosticHandlers\n                      ? this._diagnosticHandlers[domain]\n                      : false}\n                  ></ha-integration-card>`\n              )\n            : this._filter &&\n              !configEntriesInProgress.length &&\n              !groupedConfigEntries.size &&\n              this._configEntries.length\n            ? html`\n                <div class=\"empty-message\">\n                  <h1>\n                    ${this.hass.localize(\n                      \"ui.panel.config.integrations.none_found\"\n                    )}\n                  </h1>\n                  <p>\n                    ${this.hass.localize(\n                      \"ui.panel.config.integrations.none_found_detail\"\n                    )}\n                  </p>\n                  <mwc-button\n                    @click=${this._createFlow}\n                    unelevated\n                    .label=${this.hass.localize(\n                      \"ui.panel.config.integrations.add_integration\"\n                    )}\n                  ></mwc-button>\n                </div>\n              `\n            : // If we have a filter, never show a card\n            this._filter\n            ? \"\"\n            : // If we're showing 0 cards, show empty state text\n            (!this._showIgnored || ignoredConfigEntries.length === 0) &&\n              (!this._showDisabled || disabledConfigEntries.size === 0) &&\n              groupedConfigEntries.size === 0\n            ? html`\n                <div class=\"empty-message\">\n                  <h1>\n                    ${this.hass.localize(\"ui.panel.config.integrations.none\")}\n                  </h1>\n                  <p>\n                    ${this.hass.localize(\n                      \"ui.panel.config.integrations.no_integrations\"\n                    )}\n                  </p>\n                  <mwc-button\n                    @click=${this._createFlow}\n                    unelevated\n                    .label=${this.hass.localize(\n                      \"ui.panel.config.integrations.add_integration\"\n                    )}\n                  ></mwc-button>\n                </div>\n              `\n            : \"\"}\n        </div>\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.integrations.add_integration\"\n          )}\n          extended\n          @click=${this._createFlow}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  private _preventDefault(ev) {\n    ev.preventDefault();\n  }\n\n  private async _scanUSBDevices() {\n    if (!isComponentLoaded(this.hass, \"usb\")) {\n      return;\n    }\n    await scanUSBDevices(this.hass);\n  }\n\n  private async _fetchManifests(integrations?: string[]) {\n    const fetched = await fetchIntegrationManifests(this.hass, integrations);\n    // Make a copy so we can keep track of previously loaded manifests\n    // for discovered flows (which are not part of these results)\n    const manifests = { ...this._manifests };\n    for (const manifest of fetched) {\n      manifests[manifest.domain] = manifest;\n    }\n    this._manifests = manifests;\n  }\n\n  private async _fetchIntegrationManifests(integrations: Set<string>) {\n    const manifestsToFetch: string[] = [];\n    for (const integration of integrations) {\n      if (integration in this._manifests) {\n        continue;\n      }\n      if (this._extraFetchedManifests) {\n        if (this._extraFetchedManifests.has(integration)) {\n          continue;\n        }\n      } else {\n        this._extraFetchedManifests = new Set();\n      }\n      this._extraFetchedManifests.add(integration);\n      manifestsToFetch.push(integration);\n    }\n    if (manifestsToFetch.length) {\n      await this._fetchManifests(manifestsToFetch);\n    }\n  }\n\n  private _handleFlowUpdated() {\n    getConfigFlowInProgressCollection(this.hass.connection).refresh();\n    this._fetchManifests();\n  }\n\n  private _createFlow() {\n    showAddIntegrationDialog(this, {\n      initialFilter: this._filter,\n    });\n  }\n\n  private _handleMenuAction(ev: CustomEvent<ActionDetail>) {\n    switch (ev.detail.index) {\n      case 0:\n        this._showIgnored = !this._showIgnored;\n        break;\n      case 1:\n        this._toggleShowDisabled();\n        break;\n    }\n  }\n\n  private _toggleShowDisabled() {\n    this._showDisabled = !this._showDisabled;\n  }\n\n  private _handleSearchChange(ev: CustomEvent) {\n    this._filter = ev.detail.value;\n    history.replaceState({ filter: this._filter }, \"\");\n  }\n\n  private async _highlightEntry() {\n    await nextRender();\n    const entryId = this._searchParms.get(\"config_entry\")!;\n    const configEntry = this._configEntries!.find(\n      (entry) => entry.entry_id === entryId\n    );\n    if (!configEntry) {\n      return;\n    }\n    const card: HaIntegrationCard = this.shadowRoot!.querySelector(\n      `[data-domain=${configEntry?.domain}]`\n    ) as HaIntegrationCard;\n    if (card) {\n      card.scrollIntoView({\n        block: \"center\",\n      });\n      card.classList.add(\"highlight\");\n      card.selectedConfigEntryId = entryId;\n    }\n  }\n\n  private async _handleAdd(localizePromise: Promise<LocalizeFunc>) {\n    const brand = extractSearchParam(\"brand\");\n    const domain = extractSearchParam(\"domain\");\n    navigate(\"/config/integrations\", { replace: true });\n\n    if (brand) {\n      showAddIntegrationDialog(this, {\n        brand,\n      });\n      return;\n    }\n    if (!domain) {\n      return;\n    }\n\n    const handlers = await getConfigFlowHandlers(this.hass, \"integration\");\n\n    // Integration exists, so we can just create a flow\n    if (handlers.includes(domain)) {\n      const localize = await localizePromise;\n      if (\n        await showConfirmationDialog(this, {\n          title: localize(\"ui.panel.config.integrations.confirm_new\", {\n            integration: domainToName(localize, domain),\n          }),\n        })\n      ) {\n        showConfigFlowDialog(this, {\n          dialogClosedCallback: () => {\n            this._handleFlowUpdated();\n          },\n          startFlowHandler: domain,\n          manifest: this._manifests[domain],\n          showAdvanced: this.hass.userData?.showAdvanced,\n        });\n      }\n      return;\n    }\n\n    const supportedBrands = await getSupportedBrands(this.hass);\n    const supportedBrandsIntegrations =\n      getSupportedBrandsLookup(supportedBrands);\n\n    // Supported brand exists, so we can just create a flow\n    if (Object.keys(supportedBrandsIntegrations).includes(domain)) {\n      const supBrand = supportedBrandsIntegrations[domain];\n      const slug = supBrand.supported_flows![0];\n\n      showConfirmationDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.config.integrations.config_flow.supported_brand_flow\",\n          {\n            supported_brand: supBrand.name,\n            flow_domain_name: domainToName(this.hass.localize, slug),\n          }\n        ),\n        confirm: () => {\n          if ([\"zha\", \"zwave_js\"].includes(slug)) {\n            protocolIntegrationPicked(this, this.hass, slug);\n            return;\n          }\n          showConfigFlowDialog(this, {\n            dialogClosedCallback: () => {\n              this._handleFlowUpdated();\n            },\n            startFlowHandler: slug,\n            manifest: this._manifests[slug],\n            showAdvanced: this.hass.userData?.showAdvanced,\n          });\n        },\n      });\n\n      return;\n    }\n\n    // If not an integration or supported brand, try helper else show alert\n    if (HELPER_DOMAINS.includes(domain)) {\n      navigate(`/config/helpers/add?domain=${domain}`, {\n        replace: true,\n      });\n      return;\n    }\n    const helpers = await getConfigFlowHandlers(this.hass, \"helper\");\n    if (helpers.includes(domain)) {\n      navigate(`/config/helpers/add?domain=${domain}`, {\n        replace: true,\n      });\n      return;\n    }\n    showAlertDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.integrations.config_flow.error\"\n      ),\n      text: this.hass.localize(\n        \"ui.panel.config.integrations.config_flow.no_config_flow\"\n      ),\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host([narrow]) hass-tabs-subpage {\n          --main-title-margin: 0;\n        }\n        ha-button-menu {\n          margin-left: 8px;\n        }\n        .container {\n          display: grid;\n          grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n          grid-gap: 16px 16px;\n          padding: 8px 16px 16px;\n          margin-bottom: 64px;\n        }\n        .container > * {\n          max-width: 500px;\n        }\n\n        .empty-message {\n          margin: auto;\n          text-align: center;\n        }\n        .empty-message h1 {\n          margin-bottom: 0;\n        }\n        search-input {\n          --mdc-text-field-fill-color: var(--sidebar-background-color);\n          --mdc-text-field-idle-line-color: var(--divider-color);\n          --text-field-overflow: visible;\n        }\n        search-input.header {\n          display: block;\n          color: var(--secondary-text-color);\n          margin-left: 8px;\n          --mdc-ripple-color: transparant;\n        }\n        .search {\n          display: flex;\n          justify-content: flex-end;\n          width: 100%;\n          align-items: center;\n          height: 56px;\n          position: sticky;\n          top: 0;\n          z-index: 2;\n        }\n        .search search-input {\n          display: block;\n          position: absolute;\n          top: 0;\n          right: 0;\n          left: 0;\n        }\n        .active-filters {\n          color: var(--primary-text-color);\n          position: relative;\n          display: flex;\n          align-items: center;\n          padding: 2px 2px 2px 8px;\n          font-size: 14px;\n          width: max-content;\n          cursor: initial;\n        }\n        .active-filters mwc-button {\n          margin-left: 8px;\n        }\n        .active-filters::before {\n          background-color: var(--primary-color);\n          opacity: 0.12;\n          border-radius: 4px;\n          position: absolute;\n          top: 0;\n          right: 0;\n          bottom: 0;\n          left: 0;\n          content: \"\";\n        }\n        .badge {\n          min-width: 20px;\n          box-sizing: border-box;\n          border-radius: 50%;\n          font-weight: 400;\n          background-color: var(--primary-color);\n          line-height: 20px;\n          text-align: center;\n          padding: 0px 4px;\n          color: var(--text-primary-color);\n          position: absolute;\n          right: 0px;\n          top: 4px;\n          font-size: 0.65em;\n        }\n        .menu-badge-container {\n          position: relative;\n        }\n        ha-button-menu {\n          color: var(--primary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-integrations\": HaConfigIntegrations;\n  }\n}\n"],"names":[],"sourceRoot":""}