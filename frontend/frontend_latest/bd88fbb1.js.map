{"version":3,"file":"bd88fbb1.js","mappings":";;AAaA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;ACjBA;;;;;AAAA;;ACQA;;;;;;;;;;;;;;;;;;;;;;;;;AANA;;;;ACiEA;;AAIA;AACA;AACA;;;;AAIA;AAEA;AACA;;;;;AAMA;;AAzBA;;;AAoCA;;AAEA;AACA;AACA;;;;;AAKA;;AAIA;AACA;AACA;;;;;AAKA;AACA;AACA;;AAEA;;;AAKA;;;AAGA;;AAEA;;;AAtGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AC0BA;;AAIA;AACA;AACA;;;;AAIA;AAEA;AACA;;;;;AAMA;;;AAIA;;AAIA;AACA;AACA;;;;;AAOA;;;AAGA;;AAEA;;;AAKA;;AApDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA7BA;;;;AC0DA;;AAEA;AACA;AACA;;;;AAIA;AAEA;AACA;;;;;AAMA;;AAGA;AACA;;AAEA;;AAGA;;;;;;AASA;;AAIA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;;;AAKA;;AA3DA;;;;;;;;;;;;;;AAvCA;;;;ACMA;;AAIA;AACA;AACA;;;;AAIA;AAEA;AACA;;;;;;;AAUA;AACA;;AAGA;;;AAGA;AACA;;AAGA;;;;AA3DA;;;;;;;;;;;;;;;AAAA;;AC0DA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAnEA;;;;ACgDA;;AAIA;AACA;AACA;;;;AAIA;AAGA;;;;;;AAOA;AACA;AACA;;;;;;AAMA;AACA;;AAEA;;;;AAMA;AACA;;AAEA;;;;;AA7EA;;;;;;;;;;;;;;;;;;;;;AAAA;ACiDA;AAOA;AACA;AACA;;AAEA;AACA;AAGA;AAfA;;;;;AAHA;ACxCA;;AAJA;;;;ACoEA;AACA;;;;;;;AAUA;;;;;;AAQA;AAGA;;AAEA;;;;AAIA;AACA;;AAEA;;AAGA;;;;;;;AAUA;;AAIA;AACA;;AAEA;AAGA;;AAGA;AACA;AACA;;AAEA;AAEA;;AAGA;AACA;AACA;;AAEA;AAEA;;AAIA;AACA;;AAEA;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA/IA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-header-bar.ts","webpack://home-assistant-frontend/./src/components/ha-select.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/zha-cluster-attributes.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/zha-cluster-commands.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/zha-manage-clusters.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/zha-device-binding.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/zha-clusters-data-table.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/zha-group-binding.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/zha-device-children.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/zha-device-signature.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/dialog-zha-manage-zigbee-device.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","// @ts-ignore\nimport topAppBarStyles from \"@material/top-app-bar/dist/mdc.top-app-bar.min.css\";\nimport { css, html, LitElement, unsafeCSS } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-header-bar\")\nexport class HaHeaderBar extends LitElement {\n  protected render() {\n    return html`<header class=\"mdc-top-app-bar\">\n      <div class=\"mdc-top-app-bar__row\">\n        <section\n          class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-start\"\n          id=\"navigation\"\n        >\n          <slot name=\"navigationIcon\"></slot>\n          <span class=\"mdc-top-app-bar__title\">\n            <slot name=\"title\"></slot>\n          </span>\n        </section>\n        <section\n          class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-end\"\n          id=\"actions\"\n          role=\"toolbar\"\n        >\n          <slot name=\"actionItems\"></slot>\n        </section>\n      </div>\n    </header>`;\n  }\n\n  static get styles() {\n    return [\n      unsafeCSS(topAppBarStyles),\n      css`\n        .mdc-top-app-bar {\n          position: static;\n          color: var(--mdc-theme-on-primary, #fff);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-header-bar\": HaHeaderBar;\n  }\n}\n","import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-select:not(.mdc-select--disabled) .mdc-select__icon {\n        color: var(--secondary-text-color);\n      }\n      .mdc-select__anchor {\n        width: var(--ha-select-min-width, 200px);\n      }\n      .mdc-select--filled .mdc-floating-label {\n        inset-inline-start: 12px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select--filled.mdc-select--with-leading-icon .mdc-floating-label {\n        inset-inline-start: 48px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select .mdc-select__anchor {\n        padding-inline-start: 12px;\n        padding-inline-end: 0px;\n        direction: var(--direction);\n      }\n      .mdc-select__anchor .mdc-floating-label--float-above {\n        transform-origin: var(--float-start);\n      }\n    `,\n  ];\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { stopPropagation } from \"../../../../../common/dom/stop_propagation\";\nimport \"../../../../../components/buttons/ha-call-service-button\";\nimport \"../../../../../components/ha-card\";\nimport \"../../../../../components/ha-select\";\nimport \"../../../../../components/buttons/ha-progress-button\";\nimport {\n  Attribute,\n  Cluster,\n  fetchAttributesForCluster,\n  ReadAttributeServiceData,\n  readAttributeValue,\n  ZHADevice,\n} from \"../../../../../data/zha\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { forwardHaptic } from \"../../../../../data/haptics\";\nimport { formatAsPaddedHex } from \"./functions\";\nimport {\n  ChangeEvent,\n  ItemSelectedEvent,\n  SetAttributeServiceData,\n} from \"./types\";\n\n@customElement(\"zha-cluster-attributes\")\nexport class ZHAClusterAttributes extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public device?: ZHADevice;\n\n  @property() public selectedCluster?: Cluster;\n\n  @state() private _attributes: Attribute[] | undefined;\n\n  @state() private _selectedAttributeId?: number;\n\n  @state() private _attributeValue?: any = \"\";\n\n  @state() private _manufacturerCodeOverride?: string | number;\n\n  @state() private _readingAttribute = false;\n\n  @state()\n  private _setAttributeServiceData?: SetAttributeServiceData;\n\n  protected updated(changedProperties: PropertyValues): void {\n    if (changedProperties.has(\"selectedCluster\")) {\n      this._attributes = undefined;\n      this._selectedAttributeId = undefined;\n      this._attributeValue = \"\";\n      this._fetchAttributesForCluster();\n    }\n    super.updated(changedProperties);\n  }\n\n  protected render(): TemplateResult {\n    if (!this.device || !this.selectedCluster || !this._attributes) {\n      return html``;\n    }\n    return html`\n      <ha-card class=\"content\">\n        <div class=\"attribute-picker\">\n          <ha-select\n            .label=${this.hass!.localize(\n              \"ui.panel.config.zha.cluster_attributes.attributes_of_cluster\"\n            )}\n            class=\"menu\"\n            .value=${String(this._selectedAttributeId)}\n            @selected=${this._selectedAttributeChanged}\n            @closed=${stopPropagation}\n            fixedMenuPosition\n            naturalMenuWidth\n          >\n            ${this._attributes.map(\n              (entry) => html`\n                <mwc-list-item .value=${String(entry.id)}>\n                  ${`${entry.name} (id: ${formatAsPaddedHex(entry.id)})`}\n                </mwc-list-item>\n              `\n            )}\n          </ha-select>\n        </div>\n        ${this._selectedAttributeId !== undefined\n          ? this._renderAttributeInteractions()\n          : \"\"}\n      </ha-card>\n    `;\n  }\n\n  private _renderAttributeInteractions(): TemplateResult {\n    return html`\n      <div class=\"input-text\">\n        <paper-input\n          label=${this.hass!.localize(\"ui.panel.config.zha.common.value\")}\n          type=\"string\"\n          .value=${this._attributeValue}\n          @value-changed=${this._onAttributeValueChanged}\n          placeholder=${this.hass!.localize(\"ui.panel.config.zha.common.value\")}\n        ></paper-input>\n      </div>\n      <div class=\"input-text\">\n        <paper-input\n          label=${this.hass!.localize(\n            \"ui.panel.config.zha.common.manufacturer_code_override\"\n          )}\n          type=\"number\"\n          .value=${this._manufacturerCodeOverride}\n          @value-changed=${this._onManufacturerCodeOverrideChanged}\n          placeholder=${this.hass!.localize(\"ui.panel.config.zha.common.value\")}\n        ></paper-input>\n      </div>\n      <div class=\"card-actions\">\n        <ha-progress-button\n          @click=${this._onGetZigbeeAttributeClick}\n          .progress=${this._readingAttribute}\n          .disabled=${this._readingAttribute}\n        >\n          ${this.hass!.localize(\n            \"ui.panel.config.zha.cluster_attributes.read_zigbee_attribute\"\n          )}\n        </ha-progress-button>\n        <ha-call-service-button\n          .hass=${this.hass}\n          domain=\"zha\"\n          service=\"set_zigbee_cluster_attribute\"\n          .serviceData=${this._setAttributeServiceData}\n        >\n          ${this.hass!.localize(\n            \"ui.panel.config.zha.cluster_attributes.write_zigbee_attribute\"\n          )}\n        </ha-call-service-button>\n      </div>\n    `;\n  }\n\n  private async _fetchAttributesForCluster(): Promise<void> {\n    if (this.device && this.selectedCluster && this.hass) {\n      this._attributes = await fetchAttributesForCluster(\n        this.hass,\n        this.device!.ieee,\n        this.selectedCluster!.endpoint_id,\n        this.selectedCluster!.id,\n        this.selectedCluster!.type\n      );\n      this._attributes.sort((a, b) => a.name.localeCompare(b.name));\n      if (this._attributes.length > 0) {\n        this._selectedAttributeId = this._attributes[0].id;\n      }\n    }\n  }\n\n  private _computeReadAttributeServiceData():\n    | ReadAttributeServiceData\n    | undefined {\n    if (!this.selectedCluster || !this.device) {\n      return undefined;\n    }\n    return {\n      ieee: this.device!.ieee,\n      endpoint_id: this.selectedCluster!.endpoint_id,\n      cluster_id: this.selectedCluster!.id,\n      cluster_type: this.selectedCluster!.type,\n      attribute: this._selectedAttributeId!,\n      manufacturer: this._manufacturerCodeOverride\n        ? parseInt(this._manufacturerCodeOverride as string, 10)\n        : undefined,\n    };\n  }\n\n  private _computeSetAttributeServiceData():\n    | SetAttributeServiceData\n    | undefined {\n    if (!this.selectedCluster || !this.device) {\n      return undefined;\n    }\n    return {\n      ieee: this.device!.ieee,\n      endpoint_id: this.selectedCluster!.endpoint_id,\n      cluster_id: this.selectedCluster!.id,\n      cluster_type: this.selectedCluster!.type,\n      attribute: this._selectedAttributeId!,\n      value: this._attributeValue,\n      manufacturer: this._manufacturerCodeOverride\n        ? parseInt(this._manufacturerCodeOverride as string, 10)\n        : undefined,\n    };\n  }\n\n  private _onAttributeValueChanged(value: ChangeEvent): void {\n    this._attributeValue = value.detail!.value;\n    this._setAttributeServiceData = this._computeSetAttributeServiceData();\n  }\n\n  private _onManufacturerCodeOverrideChanged(value: ChangeEvent): void {\n    this._manufacturerCodeOverride = value.detail!.value;\n    this._setAttributeServiceData = this._computeSetAttributeServiceData();\n  }\n\n  private async _onGetZigbeeAttributeClick(ev: CustomEvent): Promise<void> {\n    const button = ev.currentTarget as any;\n    const data = this._computeReadAttributeServiceData();\n    if (data && this.hass) {\n      this._readingAttribute = true;\n      try {\n        this._attributeValue = await readAttributeValue(this.hass, data);\n        forwardHaptic(\"success\");\n        button.actionSuccess();\n      } catch (err: any) {\n        forwardHaptic(\"failure\");\n        button.actionError();\n      } finally {\n        this._readingAttribute = false;\n      }\n    }\n  }\n\n  private _selectedAttributeChanged(event: ItemSelectedEvent): void {\n    this._selectedAttributeId = Number(event.target!.value);\n    this._attributeValue = \"\";\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-select {\n          margin-top: 16px;\n        }\n\n        .menu {\n          width: 100%;\n        }\n\n        .card-actions.warning ha-call-service-button {\n          color: var(--error-color);\n        }\n\n        .attribute-picker {\n          align-items: center;\n          padding-left: 28px;\n          padding-right: 28px;\n          padding-bottom: 10px;\n        }\n\n        .input-text {\n          padding-left: 28px;\n          padding-right: 28px;\n          padding-bottom: 10px;\n        }\n\n        .header {\n          flex-grow: 1;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-cluster-attributes\": ZHAClusterAttributes;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { stopPropagation } from \"../../../../../common/dom/stop_propagation\";\nimport \"../../../../../components/buttons/ha-call-service-button\";\nimport \"../../../../../components/ha-card\";\nimport \"../../../../../components/ha-select\";\nimport {\n  Cluster,\n  Command,\n  fetchCommandsForCluster,\n  ZHADevice,\n} from \"../../../../../data/zha\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { formatAsPaddedHex } from \"./functions\";\nimport { ChangeEvent, IssueCommandServiceData } from \"./types\";\n\nexport class ZHAClusterCommands extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public isWide?: boolean;\n\n  @property() public device?: ZHADevice;\n\n  @property() public selectedCluster?: Cluster;\n\n  @state() private _commands: Command[] | undefined;\n\n  @state() private _selectedCommandId?: number;\n\n  @state() private _manufacturerCodeOverride?: number;\n\n  @state()\n  private _issueClusterCommandServiceData?: IssueCommandServiceData;\n\n  protected updated(changedProperties: PropertyValues): void {\n    if (changedProperties.has(\"selectedCluster\")) {\n      this._commands = undefined;\n      this._selectedCommandId = undefined;\n      this._fetchCommandsForCluster();\n    }\n    super.updated(changedProperties);\n  }\n\n  protected render(): TemplateResult {\n    if (!this.device || !this.selectedCluster || !this._commands) {\n      return html``;\n    }\n    return html`\n      <ha-card class=\"content\">\n        <div class=\"command-picker\">\n          <ha-select\n            .label=${this.hass!.localize(\n              \"ui.panel.config.zha.cluster_commands.commands_of_cluster\"\n            )}\n            class=\"menu\"\n            .value=${String(this._selectedCommandId)}\n            @selected=${this._selectedCommandChanged}\n            @closed=${stopPropagation}\n            fixedMenuPosition\n            naturalMenuWidth\n          >\n            ${this._commands.map(\n              (entry) => html`\n                <mwc-list-item .value=${String(entry.id)}>\n                  ${entry.name + \" (id: \" + formatAsPaddedHex(entry.id) + \")\"}\n                </mwc-list-item>\n              `\n            )}\n          </ha-select>\n        </div>\n        ${this._selectedCommandId !== undefined\n          ? html`\n              <div class=\"input-text\">\n                <paper-input\n                  label=${this.hass!.localize(\n                    \"ui.panel.config.zha.common.manufacturer_code_override\"\n                  )}\n                  type=\"number\"\n                  .value=${this._manufacturerCodeOverride}\n                  @value-changed=${this._onManufacturerCodeOverrideChanged}\n                  placeholder=${this.hass!.localize(\n                    \"ui.panel.config.zha.common.value\"\n                  )}\n                ></paper-input>\n              </div>\n              <div class=\"card-actions\">\n                <ha-call-service-button\n                  .hass=${this.hass}\n                  domain=\"zha\"\n                  service=\"issue_zigbee_cluster_command\"\n                  .serviceData=${this._issueClusterCommandServiceData}\n                >\n                  ${this.hass!.localize(\n                    \"ui.panel.config.zha.cluster_commands.issue_zigbee_command\"\n                  )}\n                </ha-call-service-button>\n              </div>\n            `\n          : \"\"}\n      </ha-card>\n    `;\n  }\n\n  private async _fetchCommandsForCluster(): Promise<void> {\n    if (this.device && this.selectedCluster && this.hass) {\n      this._commands = await fetchCommandsForCluster(\n        this.hass,\n        this.device!.ieee,\n        this.selectedCluster!.endpoint_id,\n        this.selectedCluster!.id,\n        this.selectedCluster!.type\n      );\n      this._commands.sort((a, b) => a.name.localeCompare(b.name));\n      if (this._commands.length > 0) {\n        this._selectedCommandId = this._commands[0].id;\n      }\n    }\n  }\n\n  private _computeIssueClusterCommandServiceData():\n    | IssueCommandServiceData\n    | undefined {\n    if (!this.device || !this.selectedCluster || !this._commands) {\n      return undefined;\n    }\n    return {\n      ieee: this.device!.ieee,\n      endpoint_id: this.selectedCluster!.endpoint_id,\n      cluster_id: this.selectedCluster!.id,\n      cluster_type: this.selectedCluster!.type,\n      command: this._selectedCommandId!,\n      command_type: this._commands.find(\n        (command) => command.id === this._selectedCommandId\n      )!.type,\n    };\n  }\n\n  private _onManufacturerCodeOverrideChanged(value: ChangeEvent): void {\n    this._manufacturerCodeOverride = value.detail!.value;\n    this._issueClusterCommandServiceData =\n      this._computeIssueClusterCommandServiceData();\n  }\n\n  private _selectedCommandChanged(event): void {\n    this._selectedCommandId = Number(event.target.value);\n    this._issueClusterCommandServiceData =\n      this._computeIssueClusterCommandServiceData();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-select {\n          margin-top: 16px;\n        }\n        .menu {\n          width: 100%;\n        }\n\n        .card-actions.warning ha-call-service-button {\n          color: var(--error-color);\n        }\n\n        .command-picker {\n          align-items: center;\n          padding-left: 28px;\n          padding-right: 28px;\n          padding-bottom: 10px;\n        }\n\n        .input-text {\n          padding-left: 28px;\n          padding-right: 28px;\n          padding-bottom: 10px;\n        }\n\n        .header {\n          flex-grow: 1;\n        }\n\n        .toggle-help-icon {\n          float: right;\n          top: -6px;\n          right: 0;\n          padding-right: 0px;\n          color: var(--primary-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-cluster-commands\": ZHAClusterCommands;\n  }\n}\n\ncustomElements.define(\"zha-cluster-commands\", ZHAClusterCommands);\n","import \"@material/mwc-list/mwc-list-item\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { cache } from \"lit/directives/cache\";\nimport { stopPropagation } from \"../../../../../common/dom/stop_propagation\";\nimport \"../../../../../components/ha-card\";\nimport \"../../../../../components/ha-select\";\nimport {\n  Cluster,\n  fetchClustersForZhaDevice,\n  ZHADevice,\n} from \"../../../../../data/zha\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { computeClusterKey } from \"./functions\";\nimport \"@material/mwc-tab-bar/mwc-tab-bar\";\nimport \"@material/mwc-tab/mwc-tab\";\nimport \"./zha-cluster-attributes\";\nimport \"./zha-cluster-commands\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"zha-cluster-selected\": {\n      cluster?: Cluster;\n    };\n  }\n}\n\nconst tabs = [\"attributes\", \"commands\"] as const;\n\n@customElement(\"zha-manage-clusters\")\nexport class ZHAManageClusters extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public isWide?: boolean;\n\n  @property() public device?: ZHADevice;\n\n  @state() private _selectedClusterIndex = -1;\n\n  @state() private _clusters: Cluster[] = [];\n\n  @state() private _selectedCluster?: Cluster;\n\n  @state() private _currTab: typeof tabs[number] = \"attributes\";\n\n  @state() private _clustersLoaded = false;\n\n  protected willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n    if (!this.device) {\n      return;\n    }\n    if (!tabs.includes(this._currTab)) {\n      this._currTab = tabs[0];\n    }\n  }\n\n  protected updated(changedProperties: PropertyValues): void {\n    if (changedProperties.has(\"device\")) {\n      this._clusters = [];\n      this._selectedClusterIndex = -1;\n      this._clustersLoaded = false;\n      this._fetchClustersForZhaDevice();\n    }\n    super.updated(changedProperties);\n  }\n\n  protected render(): TemplateResult {\n    if (!this.device || !this._clustersLoaded) {\n      return html``;\n    }\n    return html`\n      <ha-card class=\"content\">\n        <div class=\"node-picker\">\n          <ha-select\n            .label=${this.hass!.localize(\"ui.panel.config.zha.common.clusters\")}\n            class=\"menu\"\n            .value=${String(this._selectedClusterIndex)}\n            @selected=${this._selectedClusterChanged}\n            @closed=${stopPropagation}\n            fixedMenuPosition\n            naturalMenuWidth\n          >\n            ${this._clusters.map(\n              (entry, idx) => html`\n                <mwc-list-item .value=${String(idx)}\n                  >${computeClusterKey(entry)}</mwc-list-item\n                >\n              `\n            )}\n          </ha-select>\n        </div>\n        ${this._selectedCluster\n          ? html`\n              <mwc-tab-bar\n                .activeIndex=${tabs.indexOf(this._currTab)}\n                @MDCTabBar:activated=${this._handleTabChanged}\n              >\n                ${tabs.map(\n                  (tab) => html`\n                    <mwc-tab\n                      .label=${this.hass.localize(\n                        `ui.panel.config.zha.clusters.tabs.${tab}`\n                      )}\n                    ></mwc-tab>\n                  `\n                )}\n              </mwc-tab-bar>\n\n              <div class=\"content\" tabindex=\"-1\" dialogInitialFocus>\n                ${cache(\n                  this._currTab === \"attributes\"\n                    ? html`\n                        <zha-cluster-attributes\n                          .hass=${this.hass}\n                          .device=${this.device}\n                          .selectedCluster=${this._selectedCluster}\n                        ></zha-cluster-attributes>\n                      `\n                    : html`\n                        <zha-cluster-commands\n                          .hass=${this.hass}\n                          .device=${this.device}\n                          .selectedCluster=${this._selectedCluster}\n                        ></zha-cluster-commands>\n                      `\n                )}\n              </div>\n            `\n          : \"\"}\n      </ha-card>\n    `;\n  }\n\n  private async _fetchClustersForZhaDevice(): Promise<void> {\n    if (this.hass) {\n      this._clusters = await fetchClustersForZhaDevice(\n        this.hass,\n        this.device!.ieee\n      );\n      this._clusters.sort((a, b) => a.name.localeCompare(b.name));\n      if (this._clusters.length > 0) {\n        this._selectedClusterIndex = 0;\n        this._selectedCluster = this._clusters[0];\n      }\n      this._clustersLoaded = true;\n    }\n  }\n\n  private _handleTabChanged(ev: CustomEvent): void {\n    const newTab = tabs[ev.detail.index];\n    if (newTab === this._currTab) {\n      return;\n    }\n    this._currTab = newTab;\n  }\n\n  private _selectedClusterChanged(event): void {\n    this._selectedClusterIndex = Number(event.target!.value);\n    this._selectedCluster = this._clusters[this._selectedClusterIndex];\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-select {\n          margin-top: 16px;\n        }\n        .menu {\n          width: 100%;\n        }\n        .header {\n          flex-grow: 1;\n        }\n        .node-picker {\n          align-items: center;\n          padding-bottom: 10px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-manage-clusters\": ZHAManageClusters;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { stopPropagation } from \"../../../../../common/dom/stop_propagation\";\nimport \"../../../../../components/buttons/ha-progress-button\";\nimport \"../../../../../components/ha-card\";\nimport \"../../../../../components/ha-select\";\nimport { bindDevices, unbindDevices, ZHADevice } from \"../../../../../data/zha\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { ItemSelectedEvent } from \"./types\";\n\n@customElement(\"zha-device-binding-control\")\nexport class ZHADeviceBindingControl extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public device?: ZHADevice;\n\n  @state() private _bindTargetIndex = -1;\n\n  @state() private bindableDevices: ZHADevice[] = [];\n\n  @state() private _deviceToBind?: ZHADevice;\n\n  @state() private _bindingOperationInProgress = false;\n\n  protected updated(changedProperties: PropertyValues): void {\n    if (changedProperties.has(\"device\")) {\n      this._bindTargetIndex = -1;\n    }\n    super.updated(changedProperties);\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-card class=\"content\">\n        <div class=\"command-picker\">\n          <ha-select\n            label=${this.hass!.localize(\n              \"ui.panel.config.zha.device_binding.picker_label\"\n            )}\n            class=\"menu\"\n            .value=${String(this._bindTargetIndex)}\n            @selected=${this._bindTargetIndexChanged}\n            @closed=${stopPropagation}\n            fixedMenuPosition\n            naturalMenuWidth\n          >\n            ${this.bindableDevices.map(\n              (device, idx) => html`\n                <mwc-list-item .value=${String(idx)}>\n                  ${device.user_given_name\n                    ? device.user_given_name\n                    : device.name}\n                </mwc-list-item>\n              `\n            )}\n          </ha-select>\n        </div>\n        <div class=\"card-actions\">\n          <ha-progress-button\n            @click=${this._onBindDevicesClick}\n            .disabled=${!(this._deviceToBind && this.device) ||\n            this._bindingOperationInProgress}\n          >\n            ${this.hass!.localize(\"ui.panel.config.zha.device_binding.bind\")}\n          </ha-progress-button>\n          <ha-progress-button\n            @click=${this._onUnbindDevicesClick}\n            .disabled=${!(this._deviceToBind && this.device) ||\n            this._bindingOperationInProgress}\n          >\n            ${this.hass!.localize(\"ui.panel.config.zha.device_binding.unbind\")}\n          </ha-progress-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _bindTargetIndexChanged(event: ItemSelectedEvent): void {\n    this._bindTargetIndex = Number(event.target!.value);\n    this._deviceToBind =\n      this._bindTargetIndex === -1\n        ? undefined\n        : this.bindableDevices[this._bindTargetIndex];\n  }\n\n  private async _onBindDevicesClick(ev: CustomEvent): Promise<void> {\n    const button = ev.currentTarget as any;\n    if (this.hass && this._deviceToBind && this.device) {\n      this._bindingOperationInProgress = true;\n      button.progress = true;\n      try {\n        await bindDevices(this.hass, this.device.ieee, this._deviceToBind.ieee);\n        button.actionSuccess();\n      } catch (err: any) {\n        button.actionError();\n      } finally {\n        this._bindingOperationInProgress = false;\n        button.progress = false;\n      }\n    }\n  }\n\n  private async _onUnbindDevicesClick(ev: CustomEvent): Promise<void> {\n    const button = ev.currentTarget as any;\n    if (this.hass && this._deviceToBind && this.device) {\n      this._bindingOperationInProgress = true;\n      button.progress = true;\n      try {\n        await unbindDevices(\n          this.hass,\n          this.device.ieee,\n          this._deviceToBind.ieee\n        );\n        button.actionSuccess();\n      } catch (err: any) {\n        button.actionError();\n      } finally {\n        this._bindingOperationInProgress = false;\n        button.progress = false;\n      }\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .menu {\n          width: 100%;\n        }\n\n        .command-picker {\n          align-items: center;\n          padding-left: 28px;\n          padding-right: 28px;\n          padding-bottom: 10px;\n        }\n\n        .header {\n          flex-grow: 1;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-device-binding-control\": ZHADeviceBindingControl;\n  }\n}\n","import { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { computeRTLDirection } from \"../../../../../common/util/compute_rtl\";\nimport \"../../../../../components/data-table/ha-data-table\";\nimport type {\n  DataTableColumnContainer,\n  HaDataTable,\n} from \"../../../../../components/data-table/ha-data-table\";\nimport type { Cluster } from \"../../../../../data/zha\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport { formatAsPaddedHex } from \"./functions\";\n\nexport interface ClusterRowData extends Cluster {\n  cluster?: Cluster;\n  cluster_id?: string;\n}\n\n@customElement(\"zha-clusters-data-table\")\nexport class ZHAClustersDataTable extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public narrow = false;\n\n  @property() public clusters: Cluster[] = [];\n\n  @query(\"ha-data-table\", true) private _dataTable!: HaDataTable;\n\n  private _clusters = memoizeOne((clusters: Cluster[]) => {\n    let outputClusters: ClusterRowData[] = clusters;\n\n    outputClusters = outputClusters.map((cluster) => ({\n      ...cluster,\n      cluster_id: cluster.endpoint_id + \"-\" + cluster.id,\n    }));\n\n    return outputClusters;\n  });\n\n  private _columns = memoizeOne(\n    (narrow: boolean): DataTableColumnContainer =>\n      narrow\n        ? {\n            name: {\n              title: \"Name\",\n              sortable: true,\n              direction: \"asc\",\n              grows: true,\n            },\n          }\n        : {\n            name: {\n              title: \"Name\",\n              sortable: true,\n              direction: \"asc\",\n              grows: true,\n            },\n            id: {\n              title: \"ID\",\n              template: (id: number) => html` ${formatAsPaddedHex(id)} `,\n              sortable: true,\n              width: \"25%\",\n            },\n            endpoint_id: {\n              title: \"Endpoint ID\",\n              sortable: true,\n              width: \"15%\",\n            },\n          }\n  );\n\n  public clearSelection() {\n    this._dataTable.clearSelection();\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-data-table\n        .hass=${this.hass}\n        .columns=${this._columns(this.narrow)}\n        .data=${this._clusters(this.clusters)}\n        .id=${\"cluster_id\"}\n        selectable\n        auto-height\n        .dir=${computeRTLDirection(this.hass)}\n        .searchLabel=${this.hass.localize(\"ui.components.data-table.search\")}\n        .noDataText=${this.hass.localize(\"ui.components.data-table.no-data\")}\n      ></ha-data-table>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-clusters-data-table\": ZHAClustersDataTable;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state, query } from \"lit/decorators\";\nimport type { HASSDomEvent } from \"../../../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../../../common/dom/stop_propagation\";\nimport \"../../../../../components/buttons/ha-progress-button\";\nimport { SelectionChangedEvent } from \"../../../../../components/data-table/ha-data-table\";\nimport \"../../../../../components/ha-card\";\nimport {\n  bindDeviceToGroup,\n  Cluster,\n  fetchClustersForZhaDevice,\n  unbindDeviceFromGroup,\n  ZHADevice,\n  ZHAGroup,\n} from \"../../../../../data/zha\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport { ItemSelectedEvent } from \"./types\";\nimport \"./zha-clusters-data-table\";\nimport type { ZHAClustersDataTable } from \"./zha-clusters-data-table\";\nimport \"@material/mwc-list/mwc-list-item\";\n\n@customElement(\"zha-group-binding-control\")\nexport class ZHAGroupBindingControl extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public device?: ZHADevice;\n\n  @state() private _bindTargetIndex = -1;\n\n  @state() private groups: ZHAGroup[] = [];\n\n  @state() private _selectedClusters: string[] = [];\n\n  @state() private _clusters: Cluster[] = [];\n\n  @state() private _bindingOperationInProgress = false;\n\n  private _groupToBind?: ZHAGroup;\n\n  private _clustersToBind?: Cluster[];\n\n  @query(\"zha-clusters-data-table\", true)\n  private _zhaClustersDataTable!: ZHAClustersDataTable;\n\n  protected updated(changedProperties: PropertyValues): void {\n    if (changedProperties.has(\"device\")) {\n      this._bindTargetIndex = -1;\n      this._selectedClusters = [];\n      this._clustersToBind = [];\n      this._fetchClustersForZhaNode();\n    }\n    super.updated(changedProperties);\n  }\n\n  protected render(): TemplateResult {\n    return html`\n        <ha-card class=\"content\">\n          <div class=\"command-picker\">\n            <ha-select\n              .label=${this.hass!.localize(\n                \"ui.panel.config.zha.group_binding.group_picker_label\"\n              )}\n              class=\"menu\"\n              .value=${String(this._bindTargetIndex)}\n              @selected=${this._bindTargetIndexChanged}\n              @closed=${stopPropagation}\n              fixedMenuPosition\n              naturalMenuWidth\n            >\n              ${this.groups.map(\n                (group, idx) =>\n                  html`<mwc-list-item .value=${String(idx)}\n                    >${group.name}</mwc-list-item\n                  > `\n              )}\n            </ha-select>\n          </div>\n          <div class=\"command-picker\">\n            <zha-clusters-data-table\n              .hass=${this.hass}\n              .clusters=${this._clusters}\n              @selection-changed=${this._handleClusterSelectionChanged}\n              class=\"menu\"\n            ></zha-clusters-data-table>\n          </div>\n          <div class=\"card-actions\">\n          <ha-progress-button\n            @click=${this._onBindGroupClick}\n            .disabled=${!this._canBind || this._bindingOperationInProgress}\n          >\n            ${this.hass!.localize(\n              \"ui.panel.config.zha.group_binding.bind_button_label\"\n            )}\n          </ha-progress-button>\n\n          <ha-progress-button\n            @click=${this._onUnbindGroupClick}\n            .disabled=${!this._canBind || this._bindingOperationInProgress}\n          >\n            ${this.hass!.localize(\n              \"ui.panel.config.zha.group_binding.unbind_button_label\"\n            )}\n          </ha-progress-button>\n          </div>\n        </ha-card>\n      </ha-config-section>\n    `;\n  }\n\n  private _bindTargetIndexChanged(event: ItemSelectedEvent): void {\n    this._bindTargetIndex = Number(event.target!.value);\n    this._groupToBind =\n      this._bindTargetIndex === -1\n        ? undefined\n        : this.groups[this._bindTargetIndex];\n  }\n\n  private async _onBindGroupClick(ev: CustomEvent): Promise<void> {\n    const button = ev.currentTarget as any;\n    if (this.hass && this._canBind) {\n      this._bindingOperationInProgress = true;\n      button.progress = true;\n      try {\n        await bindDeviceToGroup(\n          this.hass,\n          this.device!.ieee,\n          this._groupToBind!.group_id,\n          this._clustersToBind!\n        );\n        this._zhaClustersDataTable.clearSelection();\n        button.actionSuccess();\n      } catch (err: any) {\n        button.actionError();\n      } finally {\n        this._bindingOperationInProgress = false;\n        button.progress = false;\n      }\n    }\n  }\n\n  private async _onUnbindGroupClick(ev: CustomEvent): Promise<void> {\n    const button = ev.currentTarget as any;\n    if (this.hass && this._canBind) {\n      this._bindingOperationInProgress = true;\n      button.progress = true;\n      try {\n        await unbindDeviceFromGroup(\n          this.hass,\n          this.device!.ieee,\n          this._groupToBind!.group_id,\n          this._clustersToBind!\n        );\n        this._zhaClustersDataTable.clearSelection();\n        button.actionSuccess();\n      } catch (err: any) {\n        button.actionError();\n      } finally {\n        this._bindingOperationInProgress = false;\n        button.progress = false;\n      }\n    }\n  }\n\n  private _handleClusterSelectionChanged(\n    ev: HASSDomEvent<SelectionChangedEvent>\n  ): void {\n    this._selectedClusters = ev.detail.value;\n\n    this._clustersToBind = [];\n    for (const clusterIndex of this._selectedClusters) {\n      const selectedCluster = this._clusters.find(\n        (cluster) => clusterIndex === cluster.endpoint_id + \"-\" + cluster.id\n      );\n      this._clustersToBind.push(selectedCluster!);\n    }\n  }\n\n  private async _fetchClustersForZhaNode(): Promise<void> {\n    if (this.hass) {\n      this._clusters = await fetchClustersForZhaDevice(\n        this.hass,\n        this.device!.ieee\n      );\n      this._clusters = this._clusters\n        .filter((cluster) => cluster.type.toLowerCase() === \"out\")\n        .sort((a, b) => a.name.localeCompare(b.name));\n    }\n  }\n\n  private get _canBind(): boolean {\n    return Boolean(\n      this._groupToBind &&\n        this._clustersToBind &&\n        this._clustersToBind?.length > 0 &&\n        this.device\n    );\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .menu {\n          width: 100%;\n        }\n\n        .command-picker {\n          align-items: center;\n          padding-left: 28px;\n          padding-right: 28px;\n          padding-bottom: 10px;\n        }\n\n        .input-text {\n          padding-left: 28px;\n          padding-right: 28px;\n          padding-bottom: 10px;\n        }\n\n        .sectionHeader {\n          flex-grow: 1;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-group-binding-control\": ZHAGroupBindingControl;\n  }\n}\n","import { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport memoizeOne from \"memoize-one\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { computeRTLDirection } from \"../../../../../common/util/compute_rtl\";\nimport \"../../../../../components/ha-code-editor\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport \"../../../../../components/data-table/ha-data-table\";\nimport type {\n  DataTableColumnContainer,\n  DataTableRowData,\n} from \"../../../../../components/data-table/ha-data-table\";\nimport \"../../../../../components/ha-circular-progress\";\nimport { fetchDevices, ZHADevice } from \"../../../../../data/zha\";\n\nexport interface DeviceRowData extends DataTableRowData {\n  id: string;\n  name: string;\n  lqi: number;\n}\n\n@customElement(\"zha-device-children\")\nclass ZHADeviceChildren extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public device: ZHADevice | undefined;\n\n  @state() private _devices: Map<string, ZHADevice> | undefined;\n\n  protected updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (this.hass && changedProperties.has(\"device\")) {\n      this._fetchData();\n    }\n  }\n\n  private _deviceChildren = memoizeOne(\n    (\n      device: ZHADevice | undefined,\n      devices: Map<string, ZHADevice> | undefined\n    ) => {\n      const outputDevices: DeviceRowData[] = [];\n      if (device && devices) {\n        device.neighbors.forEach((child) => {\n          const zhaDevice: ZHADevice | undefined = devices.get(child.ieee);\n          if (zhaDevice) {\n            outputDevices.push({\n              name: zhaDevice.user_given_name || zhaDevice.name,\n              id: zhaDevice.device_reg_id,\n              lqi: parseInt(child.lqi),\n            });\n          }\n        });\n      }\n      return outputDevices;\n    }\n  );\n\n  private _columns: DataTableColumnContainer = {\n    name: {\n      title: \"Name\",\n      sortable: true,\n      filterable: true,\n      direction: \"asc\",\n      grows: true,\n    },\n    lqi: {\n      title: \"LQI\",\n      sortable: true,\n      filterable: true,\n      type: \"numeric\",\n      width: \"75px\",\n    },\n  };\n\n  protected render(): TemplateResult {\n    if (!this.device) {\n      return html``;\n    }\n    return html`\n      ${!this._devices\n        ? html`<ha-circular-progress\n            alt=\"Loading\"\n            size=\"large\"\n            active\n          ></ha-circular-progress>`\n        : html`<ha-data-table\n            .hass=${this.hass}\n            .columns=${this._columns}\n            .data=${this._deviceChildren(this.device, this._devices)}\n            auto-height\n            .dir=${computeRTLDirection(this.hass)}\n            .searchLabel=${this.hass.localize(\n              \"ui.components.data-table.search\"\n            )}\n            .noDataText=${this.hass.localize(\n              \"ui.components.data-table.no-data\"\n            )}\n          ></ha-data-table>`}\n    `;\n  }\n\n  private async _fetchData(): Promise<void> {\n    if (this.device && this.hass) {\n      const devices = await fetchDevices(this.hass!);\n      this._devices = new Map(\n        devices.map((device: ZHADevice) => [device.ieee, device])\n      );\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-device-children\": ZHADeviceChildren;\n  }\n}\n","import { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../../../components/ha-code-editor\";\nimport { ZHADevice } from \"../../../../../data/zha\";\nimport { HomeAssistant } from \"../../../../../types\";\n\n@customElement(\"zha-device-zigbee-info\")\nclass ZHADeviceZigbeeInfo extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public device: ZHADevice | undefined;\n\n  @state() private _signature: any;\n\n  protected updated(changedProperties: PropertyValues): void {\n    if (changedProperties.has(\"device\") && this.hass && this.device) {\n      this._signature = JSON.stringify(\n        {\n          ...this.device.signature,\n          manufacturer: this.device.manufacturer,\n          model: this.device.model,\n          class: this.device.quirk_class,\n        },\n        null,\n        2\n      );\n    }\n    super.updated(changedProperties);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._signature) {\n      return html``;\n    }\n\n    return html`\n      <ha-code-editor mode=\"yaml\" readOnly .value=${this._signature} dir=\"ltr\">\n      </ha-code-editor>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-device-zigbee-info\": ZHADeviceZigbeeInfo;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { mdiClose } from \"@mdi/js\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { cache } from \"lit/directives/cache\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/ha-code-editor\";\nimport { createCloseHeading } from \"../../../../../components/ha-dialog\";\nimport {\n  fetchBindableDevices,\n  fetchGroups,\n  ZHADevice,\n  ZHAGroup,\n} from \"../../../../../data/zha\";\nimport { haStyleDialog } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { sortZHADevices, sortZHAGroups } from \"./functions\";\nimport \"./zha-cluster-attributes\";\nimport \"./zha-cluster-commands\";\nimport \"./zha-manage-clusters\";\nimport \"./zha-device-binding\";\nimport \"./zha-group-binding\";\nimport \"./zha-device-children\";\nimport \"./zha-device-signature\";\nimport {\n  Tab,\n  ZHAManageZigbeeDeviceDialogParams,\n} from \"./show-dialog-zha-manage-zigbee-device\";\nimport \"../../../../../components/ha-header-bar\";\nimport \"@material/mwc-tab-bar/mwc-tab-bar\";\nimport \"@material/mwc-tab/mwc-tab\";\n\n@customElement(\"dialog-zha-manage-zigbee-device\")\nclass DialogZHAManageZigbeeDevice extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public large = false;\n\n  @state() private _currTab: Tab = \"clusters\";\n\n  @state() private _device?: ZHADevice;\n\n  @state() private _bindableDevices: ZHADevice[] = [];\n\n  @state() private _groups: ZHAGroup[] = [];\n\n  public async showDialog(\n    params: ZHAManageZigbeeDeviceDialogParams\n  ): Promise<void> {\n    this._device = params.device;\n    if (!this._device) {\n      this.closeDialog();\n      return;\n    }\n    this._currTab = params.tab || \"clusters\";\n    this.large = false;\n  }\n\n  public closeDialog() {\n    this._device = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this.addEventListener(\"close-dialog\", () => this.closeDialog());\n  }\n\n  protected willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n    if (!this._device) {\n      return;\n    }\n    if (changedProps.has(\"_device\")) {\n      const tabs = this._getTabs(this._device);\n      if (!tabs.includes(this._currTab)) {\n        this._currTab = tabs[0];\n      }\n      this._fetchData();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._device) {\n      return html``;\n    }\n\n    const tabs = this._getTabs(this._device);\n\n    return html`\n      <ha-dialog\n        open\n        hideActions\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\"ui.dialogs.zha_manage_device.heading\")\n        )}\n      >\n        <div slot=\"heading\" class=\"heading\">\n          <ha-header-bar>\n            <ha-icon-button\n              slot=\"navigationIcon\"\n              dialogAction=\"cancel\"\n              .label=${this.hass.localize(\n                \"ui.dialogs.more_info_control.dismiss\"\n              )}\n              .path=${mdiClose}\n            ></ha-icon-button>\n            <div\n              slot=\"title\"\n              class=\"main-title\"\n              .title=${this.hass.localize(\n                \"ui.dialogs.zha_manage_device.heading\"\n              )}\n              @click=${this._enlarge}\n            >\n              ${this.hass.localize(\"ui.dialogs.zha_manage_device.heading\")}\n            </div>\n          </ha-header-bar>\n          <mwc-tab-bar\n            .activeIndex=${tabs.indexOf(this._currTab)}\n            @MDCTabBar:activated=${this._handleTabChanged}\n          >\n            ${tabs.map(\n              (tab) => html`\n                <mwc-tab\n                  .label=${this.hass.localize(\n                    `ui.dialogs.zha_manage_device.tabs.${tab}`\n                  )}\n                ></mwc-tab>\n              `\n            )}\n          </mwc-tab-bar>\n        </div>\n\n        <div class=\"content\" tabindex=\"-1\" dialogInitialFocus>\n          ${cache(\n            this._currTab === \"clusters\"\n              ? html`\n                  <zha-manage-clusters\n                    .hass=${this.hass}\n                    .device=${this._device}\n                  ></zha-manage-clusters>\n                `\n              : this._currTab === \"bindings\"\n              ? html`\n                  ${this._bindableDevices.length > 0\n                    ? html`\n                        <zha-device-binding-control\n                          .hass=${this.hass}\n                          .device=${this._device}\n                          .bindableDevices=${this._bindableDevices}\n                        ></zha-device-binding-control>\n                      `\n                    : \"\"}\n                  ${this._device && this._groups.length > 0\n                    ? html`\n                        <zha-group-binding-control\n                          .hass=${this.hass}\n                          .device=${this._device}\n                          .groups=${this._groups}\n                        ></zha-group-binding-control>\n                      `\n                    : \"\"}\n                `\n              : this._currTab === \"signature\"\n              ? html`\n                  <zha-device-zigbee-info\n                    .hass=${this.hass}\n                    .device=${this._device}\n                  ></zha-device-zigbee-info>\n                `\n              : html`\n                  <zha-device-children\n                    .hass=${this.hass}\n                    .device=${this._device}\n                  ></zha-device-children>\n                `\n          )}\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  private async _fetchData(): Promise<void> {\n    if (this._device && this.hass) {\n      this._bindableDevices =\n        this._device && this._device.device_type !== \"Coordinator\"\n          ? (await fetchBindableDevices(this.hass, this._device.ieee)).sort(\n              sortZHADevices\n            )\n          : [];\n      this._groups = (await fetchGroups(this.hass!)).sort(sortZHAGroups);\n    }\n  }\n\n  private _enlarge() {\n    this.large = !this.large;\n  }\n\n  private _handleTabChanged(ev: CustomEvent): void {\n    const newTab = this._getTabs(this._device)[ev.detail.index];\n    if (newTab === this._currTab) {\n      return;\n    }\n    this._currTab = newTab;\n  }\n\n  private _getTabs = memoizeOne((device: ZHADevice | undefined) => {\n    const tabs: Tab[] = [\"clusters\", \"bindings\", \"signature\"];\n\n    if (\n      device &&\n      (device.device_type === \"Router\" || device.device_type === \"Coordinator\")\n    ) {\n      tabs.push(\"children\");\n    }\n\n    return tabs;\n  });\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --dialog-surface-position: static;\n          --dialog-content-position: static;\n          --vertial-align-dialog: flex-start;\n        }\n\n        ha-header-bar {\n          --mdc-theme-on-primary: var(--primary-text-color);\n          --mdc-theme-primary: var(--mdc-theme-surface);\n          flex-shrink: 0;\n          display: block;\n        }\n        .content {\n          outline: none;\n        }\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          ha-header-bar {\n            --mdc-theme-primary: var(--app-header-background-color);\n            --mdc-theme-on-primary: var(--app-header-text-color, white);\n            border-bottom: none;\n          }\n        }\n\n        .heading {\n          border-bottom: 1px solid\n            var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n        }\n\n        @media all and (min-width: 600px) and (min-height: 501px) {\n          ha-dialog {\n            --mdc-dialog-min-width: 560px;\n            --mdc-dialog-max-width: 560px;\n            --dialog-surface-margin-top: 40px;\n            --mdc-dialog-max-height: calc(100% - 72px);\n          }\n\n          .main-title {\n            overflow: hidden;\n            text-overflow: ellipsis;\n            cursor: default;\n          }\n\n          :host([large]) ha-dialog,\n          ha-dialog[data-domain=\"camera\"] {\n            --mdc-dialog-min-width: 90vw;\n            --mdc-dialog-max-width: 90vw;\n          }\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-zha-manage-zigbee-device\": DialogZHAManageZigbeeDevice;\n  }\n}\n"],"names":[],"sourceRoot":""}