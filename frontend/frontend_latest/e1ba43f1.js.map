{"version":3,"file":"e1ba43f1.js","mappings":";;AAyCA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC2BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;;;;;;;;;;;AC0BA;;AC5FA;;AARA;;AC2CA;;AAGA;AACA;AACA;;AAEA;AAGA;;AAEA;;;AAGA;;AAGA;AACA;;;;AAIA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA1DA;AC+CA;;AAEA;;;AAMA;AAmBA;;AAEA;;AAMA;AAYA;AACA;AACA;;AAdA;AAGA;AACA;;AAcA;;AAGA;AACA;;;;AAxFA;;;AAyKA;AACA;;;;AAIA;;;;AAIA;;;;AAlLA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;ACLA;;;AAWA;AAGA;;AAGA;;AAMA;AAEA;;AAGA;;;AAKA;AACA;;;;AAOA;AAEA;;AAGA;;AAWA;AAEA;;AAGA;;AAMA;;;;;AAnFA;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACiQA;AACA;;AAOA;;AA2CA;;AAYA;;AAGA;AACA;;;AAGA;AAMA;;;AAMA;;AAIA;AACA;AACA;AAmBA;;;AAGA;;AAGA;;AAKA;;;AAOA;AACA;;;AAGA;;;;;AAKA;;AAGA;;;AAMA;;AAIA;;AAGA;;;;AAgBA;;;AAQA;;;AAKA;AACA;AACA;AAmBA;;;AAGA;;AAGA;;;AAMA;;;AAOA;AACA;;;AAGA;;;;;AAKA;;AAGA;;;;AAOA;;AAIA;;AAGA;;;;AAgBA;;;AAOA;;AAIA;AACA;AACA;AAmBA;;;AAGA;;AAGA;;AAKA;;AAEA;;AAEA;;;;;AAKA;;AAIA;;AAGA;;;;AAgBA;;AAKA;AACA;AACA;;;;;;AAMA;AACA;;;;AAMA;AAGA;AACA;;AAMA;;AAIA;;AAIA;;AAEA;AACA;AACA;;;AAGA;AAGA;;AAIA;;AAMA;AACA;;AAEA;;;;;AAOA;;AAIA;AAGA;AACA;;;;AAKA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;;;;AAMA;AACA;AAKA;;;AAGA;AACA;AACA;;;AAGA;AACA;;AAGA;AAGA;;;AAGA;AAEA;;AAGA;;;AAGA;;;;;AAMA;;;;AAKA;;;AAKA;;AAGA;AACA;AACA;;;AAOA;AAGA;AACA;;AAEA;;AAIA;AACA;;AAGA;AAGA;;;AAGA;AAEA;;;AAIA;;AAEA;;;;;AAOA;;AAGA;;AAIA;;;AAGA;;AAOA;AACA;AAGA;AACA;AACA;;;AAGA;;;AAKA;AACA;;;AAKA;;;AAGA;AACA;AACA;AACA;;;;;;AAMA;;;;AA/uBA;;AAmgCA;AACA;;AAIA;;AAMA;AACA;;AA/gCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;ACuJA;;AAEA;;AAZA;AAkFA;;AAEA;AACA;AACA;;AAMA;;;;;;AAeA;;AAEA;;AAqCA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAKA;;;AAGA;;;AAMA;;AAEA;AACA;;AAEA;;AAEA;;AAIA;;AAEA;;AAEA;;AAEA;;;;AAKA;;;AAKA;AAEA;AACA;;AAEA;;;AAIA;AACA;;AAEA;;;;AA3ZA;;;;;;;;;;;AAkfA;;ACnhBA;;;;AAOA;;;;;;AAlBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/mwc-check-list-item-base.ts","webpack://home-assistant-frontend/./node_modules/@polymer/paper-item/paper-icon-item.js","webpack://home-assistant-frontend/./node_modules/@polymer/paper-item/paper-item-body.js","webpack://home-assistant-frontend/./node_modules/@polymer/paper-item/paper-item.js","webpack://home-assistant-frontend/./src/components/entity/ha-battery-icon.ts","webpack://home-assistant-frontend/./src/layouts/hass-subpage.ts","webpack://home-assistant-frontend/./src/panels/config/devices/device-detail/ha-device-entities-card.ts","webpack://home-assistant-frontend/./src/panels/config/devices/device-detail/ha-device-info-card.ts","webpack://home-assistant-frontend/./src/panels/config/devices/ha-config-device-page.ts","webpack://home-assistant-frontend/./src/panels/config/devices/ha-config-devices-dashboard.ts","webpack://home-assistant-frontend/./src/panels/config/ha-config-section.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n\nimport '@material/mwc-checkbox';\n\nimport {Checkbox} from '@material/mwc-checkbox';\nimport {html} from 'lit';\nimport {property, query} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\nimport {GraphicType, ListItemBase} from './mwc-list-item-base';\n\nexport class CheckListItemBase extends ListItemBase {\n  @query('slot') protected override slotElement!: HTMLSlotElement|null;\n  @query('mwc-checkbox') protected checkboxElement!: Checkbox;\n\n  @property({type: Boolean}) left = false;\n  @property({type: String, reflect: true})\n  override graphic: GraphicType = 'control';\n\n  override render() {\n    const checkboxClasses = {\n      'mdc-deprecated-list-item__graphic': this.left,\n      'mdc-deprecated-list-item__meta': !this.left,\n    };\n\n    const text = this.renderText();\n    const graphic = this.graphic && this.graphic !== 'control' && !this.left ?\n        this.renderGraphic() :\n        html``;\n    const meta = this.hasMeta && this.left ? this.renderMeta() : html``;\n    const ripple = this.renderRipple();\n\n    return html`\n      ${ripple}\n      ${graphic}\n      ${this.left ? '' : text}\n      <span class=${classMap(checkboxClasses)}>\n        <mwc-checkbox\n            reducedTouchTarget\n            tabindex=${this.tabindex}\n            .checked=${this.selected}\n            ?disabled=${this.disabled}\n            @change=${this.onChange}>\n        </mwc-checkbox>\n      </span>\n      ${this.left ? text : ''}\n      ${meta}`;\n  }\n\n  protected async onChange(evt: Event) {\n    const checkbox = evt.target as Checkbox;\n    const changeFromProp = this.selected === checkbox.checked;\n\n    if (!changeFromProp) {\n      this._skipPropRequest = true;\n      this.selected = checkbox.checked;\n      await this.updateComplete;\n      this._skipPropRequest = false;\n    }\n  }\n}\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/typography.js';\nimport './paper-item-shared-styles.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperItemBehavior} from './paper-item-behavior.js';\n\n/*\n`<paper-icon-item>` is a convenience element to make an item with icon. It is an\ninteractive list item with a fixed-width icon area, according to Material\nDesign. This is useful if the icons are of varying widths, but you want the item\nbodies to line up. Use this like a `<paper-item>`. The child node with the slot\nname `item-icon` is placed in the icon area.\n\n    <paper-icon-item>\n      <iron-icon icon=\"favorite\" slot=\"item-icon\"></iron-icon>\n      Favorite\n    </paper-icon-item>\n    <paper-icon-item>\n      <div class=\"avatar\" slot=\"item-icon\"></div>\n      Avatar\n    </paper-icon-item>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-icon-width` | Width of the icon area | `56px`\n`--paper-item-icon` | Mixin applied to the icon area | `{}`\n`--paper-icon-item` | Mixin applied to the item | `{}`\n`--paper-item-selected-weight` | The font weight of a selected item | `bold`\n`--paper-item-selected` | Mixin applied to selected paper-items | `{}`\n`--paper-item-disabled-color` | The color for disabled paper-items | `--disabled-text-color`\n`--paper-item-disabled` | Mixin applied to disabled paper-items | `{}`\n`--paper-item-focused` | Mixin applied to focused paper-items | `{}`\n`--paper-item-focused-before` | Mixin applied to :before focused paper-items | `{}`\n\n*/\nPolymer({\n  _template: html`\n    <style include=\"paper-item-shared-styles\"></style>\n    <style>\n      :host {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        @apply --paper-font-subhead;\n\n        @apply --paper-item;\n        @apply --paper-icon-item;\n      }\n\n      .content-icon {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n\n        width: var(--paper-item-icon-width, 56px);\n        @apply --paper-item-icon;\n      }\n    </style>\n\n    <div id=\"contentIcon\" class=\"content-icon\">\n      <slot name=\"item-icon\"></slot>\n    </div>\n    <slot></slot>\n`,\n\n  is: 'paper-icon-item',\n  behaviors: [PaperItemBehavior]\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/default-theme.js';\nimport '@polymer/paper-styles/typography.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/*\nUse `<paper-item-body>` in a `<paper-item>` or `<paper-icon-item>` to make two-\nor three- line items. It is a flex item that is a vertical flexbox.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n    </paper-item>\n\nThe child elements with the `secondary` attribute is given secondary text\nstyling.\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-body-two-line-min-height` | Minimum height of a two-line item | `72px`\n`--paper-item-body-three-line-min-height` | Minimum height of a three-line item | `88px`\n`--paper-item-body-secondary-color` | Foreground color for the `secondary` area | `--secondary-text-color`\n`--paper-item-body-secondary` | Mixin applied to the `secondary` area | `{}`\n\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        overflow: hidden; /* needed for text-overflow: ellipsis to work on ff */\n        @apply --layout-vertical;\n        @apply --layout-center-justified;\n        @apply --layout-flex;\n      }\n\n      :host([two-line]) {\n        min-height: var(--paper-item-body-two-line-min-height, 72px);\n      }\n\n      :host([three-line]) {\n        min-height: var(--paper-item-body-three-line-min-height, 88px);\n      }\n\n      :host > ::slotted(*) {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n\n      :host > ::slotted([secondary]) {\n        @apply --paper-font-body1;\n\n        color: var(--paper-item-body-secondary-color, var(--secondary-text-color));\n\n        @apply --paper-item-body-secondary;\n      }\n    </style>\n\n    <slot></slot>\n`,\n\n  is: 'paper-item-body'\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport './paper-item-shared-styles.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperItemBehavior} from './paper-item-behavior.js';\n\n/**\nMaterial design:\n[Lists](https://www.google.com/design/spec/components/lists.html)\n\n`<paper-item>` is an interactive list item. By default, it is a horizontal\nflexbox.\n\n    <paper-item>Item</paper-item>\n\nUse this element with `<paper-item-body>` to make Material Design styled\ntwo-line and three-line items.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n      <iron-icon icon=\"warning\"></iron-icon>\n    </paper-item>\n\nTo use `paper-item` as a link, wrap it in an anchor tag. Since `paper-item` will\nalready receive focus, you may want to prevent the anchor tag from receiving\nfocus as well by setting its tabindex to -1.\n\n    <a href=\"https://www.polymer-project.org/\" tabindex=\"-1\">\n      <paper-item raised>Polymer Project</paper-item>\n    </a>\n\nIf you are concerned about performance and want to use `paper-item` in a\n`paper-listbox` with many items, you can just use a native `button` with the\n`paper-item` class applied (provided you have correctly included the shared\nstyles):\n\n    <style is=\"custom-style\" include=\"paper-item-shared-styles\"></style>\n\n    <paper-listbox>\n      <button class=\"paper-item\" role=\"option\">Inbox</button>\n      <button class=\"paper-item\" role=\"option\">Starred</button>\n      <button class=\"paper-item\" role=\"option\">Sent mail</button>\n    </paper-listbox>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-min-height` | Minimum height of the item | `48px`\n`--paper-item` | Mixin applied to the item | `{}`\n`--paper-item-selected-weight` | The font weight of a selected item | `bold`\n`--paper-item-selected` | Mixin applied to selected paper-items | `{}`\n`--paper-item-disabled-color` | The color for disabled paper-items | `--disabled-text-color`\n`--paper-item-disabled` | Mixin applied to disabled paper-items | `{}`\n`--paper-item-focused` | Mixin applied to focused paper-items | `{}`\n`--paper-item-focused-before` | Mixin applied to :before focused paper-items | `{}`\n\n### Accessibility\n\nThis element has `role=\"listitem\"` by default. Depending on usage, it may be\nmore appropriate to set `role=\"menuitem\"`, `role=\"menuitemcheckbox\"` or\n`role=\"menuitemradio\"`.\n\n    <paper-item role=\"menuitemcheckbox\">\n      <paper-item-body>\n        Show your status\n      </paper-item-body>\n      <paper-checkbox></paper-checkbox>\n    </paper-item>\n\n@group Paper Elements\n@element paper-item\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style include=\"paper-item-shared-styles\">\n      :host {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        @apply --paper-font-subhead;\n\n        @apply --paper-item;\n      }\n    </style>\n    <slot></slot>\n`,\n\n  is: 'paper-item',\n  behaviors: [PaperItemBehavior]\n});\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { batteryStateIcon } from \"../../common/entity/battery_icon\";\nimport \"../ha-svg-icon\";\n\n@customElement(\"ha-battery-icon\")\nexport class HaBatteryIcon extends LitElement {\n  @property() public batteryStateObj;\n\n  @property() public batteryChargingStateObj;\n\n  protected render() {\n    return html`\n      <ha-svg-icon\n        .path=${batteryStateIcon(\n          this.batteryStateObj,\n          this.batteryChargingStateObj\n        )}\n      ></ha-svg-icon>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-battery-icon\": HaBatteryIcon;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, eventOptions, property } from \"lit/decorators\";\nimport { restoreScroll } from \"../common/decorators/restore-scroll\";\nimport { toggleAttribute } from \"../common/dom/toggle_attribute\";\nimport { computeRTL } from \"../common/util/compute_rtl\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"hass-subpage\")\nclass HassSubpage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public header?: string;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  @property() public backCallback?: () => void;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  // @ts-ignore\n  @restoreScroll(\".content\") private _savedScrollPos?: number;\n\n  protected willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n    if (!changedProps.has(\"hass\")) {\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (!oldHass || oldHass.locale !== this.hass.locale) {\n      toggleAttribute(this, \"rtl\", computeRTL(this.hass));\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"toolbar\">\n        ${this.mainPage || history.state?.root\n          ? html`\n              <ha-menu-button\n                .hassio=${this.supervisor}\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n              ></ha-menu-button>\n            `\n          : this.backPath\n          ? html`\n              <a href=${this.backPath}>\n                <ha-icon-button-arrow-prev\n                  .hass=${this.hass}\n                ></ha-icon-button-arrow-prev>\n              </a>\n            `\n          : html`\n              <ha-icon-button-arrow-prev\n                .hass=${this.hass}\n                @click=${this._backTapped}\n              ></ha-icon-button-arrow-prev>\n            `}\n\n        <div class=\"main-title\">${this.header}</div>\n        <slot name=\"toolbar-icon\"></slot>\n      </div>\n      <div class=\"content\" @scroll=${this._saveScrollPos}><slot></slot></div>\n      <div id=\"fab\">\n        <slot name=\"fab\"></slot>\n      </div>\n    `;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _backTapped(): void {\n    if (this.backCallback) {\n      this.backCallback();\n      return;\n    }\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n        background-color: var(--primary-background-color);\n      }\n\n      :host([narrow]) {\n        width: 100%;\n        position: fixed;\n      }\n\n      .toolbar {\n        display: flex;\n        align-items: center;\n        font-size: 20px;\n        height: var(--header-height);\n        padding: 0 16px;\n        pointer-events: none;\n        background-color: var(--app-header-background-color);\n        font-weight: 400;\n        color: var(--app-header-text-color, white);\n        border-bottom: var(--app-header-border-bottom, none);\n        box-sizing: border-box;\n      }\n      .toolbar a {\n        color: var(--sidebar-text-color);\n        text-decoration: none;\n      }\n\n      ha-menu-button,\n      ha-icon-button-arrow-prev,\n      ::slotted([slot=\"toolbar-icon\"]) {\n        pointer-events: auto;\n        color: var(--sidebar-icon-color);\n      }\n\n      .main-title {\n        margin: 0 0 0 24px;\n        line-height: 20px;\n        flex-grow: 1;\n      }\n\n      .content {\n        position: relative;\n        width: 100%;\n        height: calc(100% - 1px - var(--header-height));\n        overflow-y: auto;\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n\n      #fab {\n        position: fixed;\n        right: calc(16px + env(safe-area-inset-right));\n        bottom: calc(16px + env(safe-area-inset-bottom));\n        z-index: 1;\n      }\n      :host([narrow]) #fab.tabs {\n        bottom: calc(84px + env(safe-area-inset-bottom));\n      }\n      #fab[is-wide] {\n        bottom: 24px;\n        right: 24px;\n      }\n      :host([rtl]) #fab {\n        right: auto;\n        left: calc(16px + env(safe-area-inset-left));\n      }\n      :host([rtl][is-wide]) #fab {\n        bottom: 24px;\n        left: 24px;\n        right: auto;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-subpage\": HassSubpage;\n  }\n}\n","import \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../../../common/entity/compute_state_name\";\nimport { domainIcon } from \"../../../../common/entity/domain_icon\";\nimport { stripPrefixFromEntityName } from \"../../../../common/entity/strip_prefix_from_entity_name\";\nimport \"../../../../components/entity/state-badge\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-icon\";\nimport {\n  ExtEntityRegistryEntry,\n  getExtendedEntityRegistryEntry,\n} from \"../../../../data/entity_registry\";\nimport { showMoreInfoDialog } from \"../../../../dialogs/more-info/show-ha-more-info-dialog\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { HuiErrorCard } from \"../../../lovelace/cards/hui-error-card\";\nimport { createRowElement } from \"../../../lovelace/create-element/create-row-element\";\nimport { addEntitiesToLovelaceView } from \"../../../lovelace/editor/add-entities-to-view\";\nimport type { LovelaceRowConfig } from \"../../../lovelace/entity-rows/types\";\nimport { LovelaceRow } from \"../../../lovelace/entity-rows/types\";\nimport { EntityRegistryStateEntry } from \"../ha-config-device-page\";\n\n@customElement(\"ha-device-entities-card\")\nexport class HaDeviceEntitiesCard extends LitElement {\n  @property() public header!: string;\n\n  @property() public deviceName!: string;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entities!: EntityRegistryStateEntry[];\n\n  @property() public showHidden = false;\n\n  @state() private _extDisabledEntityEntries?: Record<\n    string,\n    ExtEntityRegistryEntry\n  >;\n\n  private _entityRows: Array<LovelaceRow | HuiErrorCard> = [];\n\n  protected shouldUpdate(changedProps: PropertyValues) {\n    if (changedProps.has(\"hass\") && changedProps.size === 1) {\n      this._entityRows.forEach((element) => {\n        element.hass = this.hass;\n      });\n      return false;\n    }\n    return true;\n  }\n\n  protected render(): TemplateResult {\n    if (!this.entities.length) {\n      return html`\n        <ha-card outlined .header=${this.header}>\n          <div class=\"empty card-content\">\n            ${this.hass.localize(\"ui.panel.config.devices.entities.none\")}\n          </div>\n        </ha-card>\n      `;\n    }\n\n    const shownEntities: EntityRegistryStateEntry[] = [];\n    const hiddenEntities: EntityRegistryStateEntry[] = [];\n    this._entityRows = [];\n\n    this.entities.forEach((entry) => {\n      if (entry.disabled_by) {\n        if (this._extDisabledEntityEntries) {\n          hiddenEntities.push(\n            this._extDisabledEntityEntries[entry.entity_id] || entry\n          );\n        } else {\n          hiddenEntities.push(entry);\n        }\n      } else {\n        shownEntities.push(entry);\n      }\n    });\n\n    return html`\n      <ha-card outlined .header=${this.header}>\n        <div id=\"entities\">\n          ${shownEntities.map((entry) =>\n            this.hass.states[entry.entity_id]\n              ? this._renderEntity(entry)\n              : this._renderEntry(entry)\n          )}\n        </div>\n        ${hiddenEntities.length\n          ? !this.showHidden\n            ? html`\n                <button class=\"show-more\" @click=${this._toggleShowHidden}>\n                  ${this.hass.localize(\n                    \"ui.panel.config.devices.entities.hidden_entities\",\n                    \"count\",\n                    hiddenEntities.length\n                  )}\n                </button>\n              `\n            : html`\n                ${hiddenEntities.map((entry) => this._renderEntry(entry))}\n                <button class=\"show-more\" @click=${this._toggleShowHidden}>\n                  ${this.hass.localize(\n                    \"ui.panel.config.devices.entities.hide_disabled\"\n                  )}\n                </button>\n              `\n          : \"\"}\n        <div class=\"card-actions\">\n          <mwc-button @click=${this._addToLovelaceView}>\n            ${this.hass.localize(\n              \"ui.panel.config.devices.entities.add_entities_lovelace\"\n            )}\n          </mwc-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _toggleShowHidden() {\n    this.showHidden = !this.showHidden;\n    if (!this.showHidden || this._extDisabledEntityEntries !== undefined) {\n      return;\n    }\n    this._extDisabledEntityEntries = {};\n    const toFetch = this.entities.filter((entry) => entry.disabled_by);\n\n    const worker = async () => {\n      if (toFetch.length === 0) {\n        return;\n      }\n\n      const entityId = toFetch.pop()!.entity_id;\n      const entry = await getExtendedEntityRegistryEntry(this.hass, entityId);\n      this._extDisabledEntityEntries![entityId] = entry;\n      this.requestUpdate(\"_extDisabledEntityEntries\");\n      worker();\n    };\n\n    // Fetch 3 in parallel\n    worker();\n    worker();\n    worker();\n  }\n\n  private _renderEntity(entry: EntityRegistryStateEntry): TemplateResult {\n    const config: LovelaceRowConfig = {\n      entity: entry.entity_id,\n    };\n\n    const element = createRowElement(config);\n    if (this.hass) {\n      element.hass = this.hass;\n      const stateObj = this.hass.states[entry.entity_id];\n\n      let name = entry.name\n        ? stripPrefixFromEntityName(entry.name, this.deviceName.toLowerCase())\n        : entry.has_entity_name\n        ? entry.original_name || this.deviceName\n        : stripPrefixFromEntityName(\n            computeStateName(stateObj),\n            this.deviceName.toLowerCase()\n          );\n\n      if (!name) {\n        name = computeStateName(stateObj);\n      }\n\n      if (entry.hidden_by) {\n        name += ` (${this.hass.localize(\n          \"ui.panel.config.devices.entities.hidden\"\n        )})`;\n      }\n\n      config.name = name;\n    }\n    // @ts-ignore\n    element.entry = entry;\n    this._entityRows.push(element);\n    return html` <div>${element}</div> `;\n  }\n\n  private _renderEntry(entry: EntityRegistryStateEntry): TemplateResult {\n    const name =\n      entry.stateName ||\n      entry.name ||\n      (entry as ExtEntityRegistryEntry).original_name;\n\n    return html`\n      <paper-icon-item\n        class=\"disabled-entry\"\n        .entry=${entry}\n        @click=${this._openEditEntry}\n      >\n        <ha-svg-icon\n          slot=\"item-icon\"\n          .path=${domainIcon(computeDomain(entry.entity_id))}\n        ></ha-svg-icon>\n        <paper-item-body>\n          <div class=\"name\">\n            ${name\n              ? stripPrefixFromEntityName(\n                  name,\n                  this.deviceName.toLowerCase()\n                ) || name\n              : entry.entity_id}\n          </div>\n        </paper-item-body>\n      </paper-icon-item>\n    `;\n  }\n\n  private _openEditEntry(ev: Event): void {\n    const entry = (ev.currentTarget! as any).entry;\n    showMoreInfoDialog(this, {\n      entityId: entry.entity_id,\n      tab: \"settings\",\n    });\n  }\n\n  private _addToLovelaceView(): void {\n    addEntitiesToLovelaceView(\n      this,\n      this.hass,\n      this.entities\n        .filter((entity) => !entity.disabled_by)\n        .map((entity) => entity.entity_id),\n      this.deviceName\n    );\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n      }\n      ha-icon {\n        margin-left: 8px;\n      }\n      .entity-id {\n        color: var(--secondary-text-color);\n      }\n      .buttons {\n        text-align: right;\n        margin: 0 0 0 8px;\n      }\n      .disabled-entry {\n        color: var(--secondary-text-color);\n      }\n      #entities {\n        margin-top: -24px; /* match the spacing between card title and content of the device info card above it */\n      }\n      #entities > * {\n        margin: 8px 16px 8px 8px;\n      }\n      #entities > paper-icon-item {\n        margin: 0;\n      }\n      paper-icon-item {\n        min-height: 40px;\n        padding: 0 16px;\n        cursor: pointer;\n        --paper-item-icon-width: 48px;\n      }\n      .name {\n        font-size: 14px;\n      }\n      .empty {\n        text-align: center;\n      }\n      button.show-more {\n        color: var(--primary-color);\n        text-align: left;\n        cursor: pointer;\n        background: none;\n        border-width: initial;\n        border-style: none;\n        border-color: initial;\n        border-image: initial;\n        padding: 16px;\n        font: inherit;\n      }\n      button.show-more:focus {\n        outline: none;\n        text-decoration: underline;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-device-entities-card\": HaDeviceEntitiesCard;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../../../components/ha-card\";\nimport { AreaRegistryEntry } from \"../../../../data/area_registry\";\nimport {\n  computeDeviceName,\n  DeviceRegistryEntry,\n} from \"../../../../data/device_registry\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { loadDeviceRegistryDetailDialog } from \"../device-registry-detail/show-dialog-device-registry-detail\";\n\n@customElement(\"ha-device-info-card\")\nexport class HaDeviceCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public device!: DeviceRegistryEntry;\n\n  @property() public devices!: DeviceRegistryEntry[];\n\n  @property() public areas!: AreaRegistryEntry[];\n\n  @property() public narrow!: boolean;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-card\n        outlined\n        .header=${this.hass.localize(\n          \"ui.panel.config.devices.device_info\",\n          \"type\",\n          this.hass.localize(\n            `ui.panel.config.devices.type.${\n              this.device.entry_type || \"device\"\n            }_heading`\n          )\n        )}\n      >\n        <div class=\"card-content\">\n          ${this.device.model\n            ? html` <div class=\"model\">${this.device.model}</div> `\n            : \"\"}\n          ${this.device.manufacturer\n            ? html`\n                <div class=\"manuf\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.integrations.config_entry.manuf\",\n                    \"manufacturer\",\n                    this.device.manufacturer\n                  )}\n                </div>\n              `\n            : \"\"}\n          ${this.device.via_device_id\n            ? html`\n                <div class=\"extra-info\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.integrations.config_entry.via\"\n                  )}\n                  <span class=\"hub\"\n                    ><a\n                      href=\"/config/devices/device/${this.device.via_device_id}\"\n                      >${this._computeDeviceName(\n                        this.devices,\n                        this.device.via_device_id\n                      )}</a\n                    ></span\n                  >\n                </div>\n              `\n            : \"\"}\n          ${this.device.sw_version\n            ? html`\n                <div class=\"extra-info\">\n                  ${this.hass.localize(\n                    `ui.panel.config.integrations.config_entry.${\n                      this.device.entry_type === \"service\" &&\n                      !this.device.hw_version\n                        ? \"version\"\n                        : \"firmware\"\n                    }`,\n                    \"version\",\n                    this.device.sw_version\n                  )}\n                </div>\n              `\n            : \"\"}\n          ${this.device.hw_version\n            ? html`\n                <div class=\"extra-info\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.integrations.config_entry.hardware\",\n                    \"version\",\n                    this.device.hw_version\n                  )}\n                </div>\n              `\n            : \"\"}\n          <slot></slot>\n        </div>\n        <slot name=\"actions\"></slot>\n      </ha-card>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    loadDeviceRegistryDetailDialog();\n  }\n\n  private _computeDeviceName(devices, deviceId) {\n    const device = devices.find((dev) => dev.id === deviceId);\n    return device\n      ? computeDeviceName(device, this.hass)\n      : `<${this.hass.localize(\n          \"ui.panel.config.integrations.config_entry.unknown_via_device\"\n        )}>`;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: block;\n        }\n        ha-card {\n          flex: 1 0 100%;\n          min-width: 0;\n        }\n        .device {\n          width: 30%;\n        }\n        .area {\n          color: var(--primary-text-color);\n        }\n        .extra-info {\n          margin-top: 8px;\n          word-wrap: break-word;\n        }\n        .manuf,\n        .model {\n          color: var(--secondary-text-color);\n          word-wrap: break-word;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-device-info-card\": HaDeviceCard;\n  }\n}\n","import {\n  mdiCog,\n  mdiDelete,\n  mdiDotsVertical,\n  mdiDownload,\n  mdiOpenInNew,\n  mdiPencil,\n  mdiPlusCircle,\n} from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateDomain } from \"../../../common/entity/compute_state_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { stringCompare } from \"../../../common/string/compare\";\nimport { slugify } from \"../../../common/string/slugify\";\nimport { groupBy } from \"../../../common/util/group-by\";\nimport \"../../../components/entity/ha-battery-icon\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-icon-next\";\nimport \"../../../components/ha-svg-icon\";\nimport { AreaRegistryEntry } from \"../../../data/area_registry\";\nimport { getSignedPath } from \"../../../data/auth\";\nimport {\n  ConfigEntry,\n  disableConfigEntry,\n  DisableConfigEntryResult,\n} from \"../../../data/config_entries\";\nimport {\n  computeDeviceName,\n  DeviceRegistryEntry,\n  removeConfigEntryFromDevice,\n  updateDeviceRegistryEntry,\n} from \"../../../data/device_registry\";\nimport {\n  DiagnosticInfo,\n  fetchDiagnosticHandler,\n  getConfigEntryDiagnosticsDownloadUrl,\n  getDeviceDiagnosticsDownloadUrl,\n} from \"../../../data/diagnostics\";\nimport {\n  EntityRegistryEntry,\n  findBatteryChargingEntity,\n  findBatteryEntity,\n  updateEntityRegistryEntry,\n} from \"../../../data/entity_registry\";\nimport { domainToName } from \"../../../data/integration\";\nimport { SceneEntities, showSceneEditor } from \"../../../data/scene\";\nimport { findRelated, RelatedResult } from \"../../../data/search\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-error-screen\";\nimport \"../../../layouts/hass-tabs-subpage\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { brandsUrl } from \"../../../util/brands-url\";\nimport { fileDownload } from \"../../../util/file_download\";\nimport \"../../logbook/ha-logbook\";\nimport \"../ha-config-section\";\nimport \"./device-detail/ha-device-entities-card\";\nimport \"./device-detail/ha-device-info-card\";\nimport { showDeviceAutomationDialog } from \"./device-detail/show-dialog-device-automation\";\nimport {\n  loadDeviceRegistryDetailDialog,\n  showDeviceRegistryDetailDialog,\n} from \"./device-registry-detail/show-dialog-device-registry-detail\";\nimport \"../../../layouts/hass-subpage\";\n\nexport interface EntityRegistryStateEntry extends EntityRegistryEntry {\n  stateName?: string | null;\n}\n\nexport interface DeviceAction {\n  href?: string;\n  target?: string;\n  action?: (ev: any) => void;\n  label: string;\n  icon?: string;\n  trailingIcon?: string;\n  classes?: string;\n}\n\nexport interface DeviceAlert {\n  level: \"warning\" | \"error\" | \"info\";\n  text: string;\n}\n\n@customElement(\"ha-config-device-page\")\nexport class HaConfigDevicePage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public devices!: DeviceRegistryEntry[];\n\n  @property({ attribute: false }) public entries!: ConfigEntry[];\n\n  @property({ attribute: false }) public entities!: EntityRegistryEntry[];\n\n  @property({ attribute: false }) public areas!: AreaRegistryEntry[];\n\n  @property() public deviceId!: string;\n\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property({ type: Boolean }) public showAdvanced!: boolean;\n\n  @state() private _related?: RelatedResult;\n\n  // If a number, it's the request ID so we make sure we don't show older info\n  @state() private _diagnosticDownloadLinks?: number | DeviceAction[];\n\n  @state() private _deleteButtons?: DeviceAction[];\n\n  @state() private _deviceActions?: DeviceAction[];\n\n  @state() private _deviceAlerts?: DeviceAlert[];\n\n  private _logbookTime = { recent: 86400 };\n\n  private _device = memoizeOne(\n    (\n      deviceId: string,\n      devices: DeviceRegistryEntry[]\n    ): DeviceRegistryEntry | undefined =>\n      devices ? devices.find((device) => device.id === deviceId) : undefined\n  );\n\n  private _integrations = memoizeOne(\n    (device: DeviceRegistryEntry, entries: ConfigEntry[]): ConfigEntry[] =>\n      entries.filter((entry) => device.config_entries.includes(entry.entry_id))\n  );\n\n  private _entities = memoizeOne(\n    (\n      deviceId: string,\n      entities: EntityRegistryEntry[]\n    ): EntityRegistryStateEntry[] =>\n      entities\n        .filter((entity) => entity.device_id === deviceId)\n        .map((entity) => ({\n          ...entity,\n          stateName: this._computeEntityName(entity),\n        }))\n        .sort((ent1, ent2) =>\n          stringCompare(\n            ent1.stateName || `zzz${ent1.entity_id}`,\n            ent2.stateName || `zzz${ent2.entity_id}`\n          )\n        )\n  );\n\n  private _deviceIdInList = memoizeOne((deviceId: string) => [deviceId]);\n\n  private _entityIds = memoizeOne(\n    (entries: EntityRegistryStateEntry[]): string[] =>\n      entries.map((entry) => entry.entity_id)\n  );\n\n  private _entitiesByCategory = memoizeOne(\n    (entities: EntityRegistryEntry[]) => {\n      const result = groupBy(entities, (entry) =>\n        entry.entity_category\n          ? entry.entity_category\n          : [\n              \"sensor\",\n              \"binary_sensor\",\n              \"camera\",\n              \"device_tracker\",\n              \"weather\",\n            ].includes(computeDomain(entry.entity_id))\n          ? \"sensor\"\n          : \"control\"\n      ) as Record<\n        | \"control\"\n        | \"sensor\"\n        | NonNullable<EntityRegistryEntry[\"entity_category\"]>,\n        EntityRegistryStateEntry[]\n      >;\n      for (const key of [\"control\", \"sensor\", \"diagnostic\", \"config\"]) {\n        if (!(key in result)) {\n          result[key] = [];\n        }\n      }\n\n      return result;\n    }\n  );\n\n  private _computeArea = memoizeOne(\n    (areas, device): AreaRegistryEntry | undefined => {\n      if (!areas || !device || !device.area_id) {\n        return undefined;\n      }\n      return areas.find((area) => area.area_id === device.area_id);\n    }\n  );\n\n  private _batteryEntity = memoizeOne(\n    (entities: EntityRegistryEntry[]): EntityRegistryEntry | undefined =>\n      findBatteryEntity(this.hass, entities)\n  );\n\n  private _batteryChargingEntity = memoizeOne(\n    (entities: EntityRegistryEntry[]): EntityRegistryEntry | undefined =>\n      findBatteryChargingEntity(this.hass, entities)\n  );\n\n  public willUpdate(changedProps) {\n    super.willUpdate(changedProps);\n\n    if (\n      changedProps.has(\"deviceId\") ||\n      changedProps.has(\"devices\") ||\n      changedProps.has(\"entries\")\n    ) {\n      this._diagnosticDownloadLinks = undefined;\n      this._deleteButtons = undefined;\n      this._deviceActions = undefined;\n      this._deviceAlerts = undefined;\n    }\n\n    if (\n      (this._diagnosticDownloadLinks &&\n        this._deleteButtons &&\n        this._deviceActions &&\n        this._deviceAlerts) ||\n      !this.devices ||\n      !this.deviceId ||\n      !this.entries\n    ) {\n      return;\n    }\n\n    this._diagnosticDownloadLinks = Math.random();\n    this._deleteButtons = []; // To prevent re-rendering if no delete buttons\n    this._deviceActions = [];\n    this._deviceAlerts = [];\n    this._getDiagnosticButtons(this._diagnosticDownloadLinks);\n    this._getDeleteActions();\n    this._getDeviceActions();\n    this._getDeviceAlerts();\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    loadDeviceRegistryDetailDialog();\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (changedProps.has(\"deviceId\")) {\n      this._findRelated();\n    }\n  }\n\n  protected render() {\n    const device = this._device(this.deviceId, this.devices);\n\n    if (!device) {\n      return html`\n        <hass-error-screen\n          .hass=${this.hass}\n          .error=${this.hass.localize(\n            \"ui.panel.config.devices.device_not_found\"\n          )}\n        ></hass-error-screen>\n      `;\n    }\n\n    const deviceName = computeDeviceName(device, this.hass);\n    const integrations = this._integrations(device, this.entries);\n    const entities = this._entities(this.deviceId, this.entities);\n    const entitiesByCategory = this._entitiesByCategory(entities);\n    const batteryEntity = this._batteryEntity(entities);\n    const batteryChargingEntity = this._batteryChargingEntity(entities);\n    const batteryState = batteryEntity\n      ? this.hass.states[batteryEntity.entity_id]\n      : undefined;\n    const batteryIsBinary =\n      batteryState && computeStateDomain(batteryState) === \"binary_sensor\";\n    const batteryChargingState = batteryChargingEntity\n      ? this.hass.states[batteryChargingEntity.entity_id]\n      : undefined;\n    const area = this._computeArea(this.areas, device);\n\n    const deviceInfo: TemplateResult[] = [];\n\n    const actions = [...(this._deviceActions || [])];\n    if (Array.isArray(this._diagnosticDownloadLinks)) {\n      actions.push(...this._diagnosticDownloadLinks);\n    }\n    if (this._deleteButtons) {\n      actions.push(...this._deleteButtons);\n    }\n\n    // Move all warning actions to the end\n    actions.sort((a, b) => {\n      if (a.classes === \"warning\" && b.classes !== \"warning\") {\n        return 1;\n      }\n      if (a.classes !== \"warning\" && b.classes === \"warning\") {\n        return -1;\n      }\n      return 0;\n    });\n\n    const firstDeviceAction = actions.shift();\n\n    if (device.disabled_by) {\n      deviceInfo.push(\n        html`\n          <ha-alert alert-type=\"warning\">\n            ${this.hass.localize(\n              \"ui.panel.config.devices.enabled_cause\",\n              \"type\",\n              this.hass.localize(\n                `ui.panel.config.devices.type.${device.entry_type || \"device\"}`\n              ),\n              \"cause\",\n              this.hass.localize(\n                `ui.panel.config.devices.disabled_by.${device.disabled_by}`\n              )\n            )}\n          </ha-alert>\n          ${device.disabled_by === \"user\"\n            ? html`\n                <div class=\"card-actions\" slot=\"actions\">\n                  <mwc-button unelevated @click=${this._enableDevice}>\n                    ${this.hass.localize(\"ui.common.enable\")}\n                  </mwc-button>\n                </div>\n              `\n            : \"\"}\n        `\n      );\n    }\n\n    this._renderIntegrationInfo(device, integrations, deviceInfo);\n\n    const automationCard = isComponentLoaded(this.hass, \"automation\")\n      ? html`\n          <ha-card outlined>\n            <h1 class=\"card-header\">\n              ${this.hass.localize(\n                \"ui.panel.config.devices.automation.automations_heading\"\n              )}\n              <ha-icon-button\n                @click=${this._showAutomationDialog}\n                .disabled=${device.disabled_by}\n                .label=${device.disabled_by\n                  ? this.hass.localize(\n                      \"ui.panel.config.devices.automation.create_disable\",\n                      \"type\",\n                      this.hass.localize(\n                        `ui.panel.config.devices.type.${\n                          device.entry_type || \"device\"\n                        }`\n                      )\n                    )\n                  : this.hass.localize(\n                      \"ui.panel.config.devices.automation.create\",\n                      \"type\",\n                      this.hass.localize(\n                        `ui.panel.config.devices.type.${\n                          device.entry_type || \"device\"\n                        }`\n                      )\n                    )}\n                .path=${mdiPlusCircle}\n              ></ha-icon-button>\n            </h1>\n            ${this._related?.automation?.length\n              ? html`\n                  <div class=\"items\">\n                    ${this._related.automation.map((automation) => {\n                      const entityState = this.hass.states[automation];\n                      return entityState\n                        ? html`<div>\n                            <a\n                              href=${ifDefined(\n                                entityState.attributes.id\n                                  ? `/config/automation/edit/${entityState.attributes.id}`\n                                  : undefined\n                              )}\n                            >\n                              <paper-item\n                                .automation=${entityState}\n                                .disabled=${!entityState.attributes.id}\n                              >\n                                <paper-item-body>\n                                  ${computeStateName(entityState)}\n                                </paper-item-body>\n                                <ha-icon-next></ha-icon-next>\n                              </paper-item>\n                            </a>\n                            ${!entityState.attributes.id\n                              ? html`\n                                  <paper-tooltip animation-delay=\"0\">\n                                    ${this.hass.localize(\n                                      \"ui.panel.config.devices.cant_edit\"\n                                    )}\n                                  </paper-tooltip>\n                                `\n                              : \"\"}\n                          </div> `\n                        : \"\";\n                    })}\n                  </div>\n                `\n              : html`\n                  <div class=\"card-content\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.devices.add_prompt\",\n                      \"name\",\n                      this.hass.localize(\n                        \"ui.panel.config.devices.automation.automations\"\n                      ),\n                      \"type\",\n                      this.hass.localize(\n                        `ui.panel.config.devices.type.${\n                          device.entry_type || \"device\"\n                        }`\n                      )\n                    )}\n                  </div>\n                `}\n          </ha-card>\n        `\n      : \"\";\n\n    const sceneCard =\n      isComponentLoaded(this.hass, \"scene\") && entities.length\n        ? html`\n            <ha-card outlined>\n              <h1 class=\"card-header\">\n                ${this.hass.localize(\n                  \"ui.panel.config.devices.scene.scenes_heading\"\n                )}\n\n                <ha-icon-button\n                  @click=${this._createScene}\n                  .disabled=${device.disabled_by}\n                  .label=${device.disabled_by\n                    ? this.hass.localize(\n                        \"ui.panel.config.devices.scene.create_disable\",\n                        \"type\",\n                        this.hass.localize(\n                          `ui.panel.config.devices.type.${\n                            device.entry_type || \"device\"\n                          }`\n                        )\n                      )\n                    : this.hass.localize(\n                        \"ui.panel.config.devices.scene.create\",\n                        \"type\",\n                        this.hass.localize(\n                          `ui.panel.config.devices.type.${\n                            device.entry_type || \"device\"\n                          }`\n                        )\n                      )}\n                  .path=${mdiPlusCircle}\n                ></ha-icon-button>\n              </h1>\n              ${this._related?.scene?.length\n                ? html`\n                    <div class=\"items\">\n                      ${this._related.scene.map((scene) => {\n                        const entityState = this.hass.states[scene];\n                        return entityState\n                          ? html`\n                              <div>\n                                <a\n                                  href=${ifDefined(\n                                    entityState.attributes.id\n                                      ? `/config/scene/edit/${entityState.attributes.id}`\n                                      : undefined\n                                  )}\n                                >\n                                  <paper-item\n                                    .scene=${entityState}\n                                    .disabled=${!entityState.attributes.id}\n                                  >\n                                    <paper-item-body>\n                                      ${computeStateName(entityState)}\n                                    </paper-item-body>\n                                    <ha-icon-next></ha-icon-next>\n                                  </paper-item>\n                                </a>\n                                ${!entityState.attributes.id\n                                  ? html`\n                                      <paper-tooltip animation-delay=\"0\">\n                                        ${this.hass.localize(\n                                          \"ui.panel.config.devices.cant_edit\"\n                                        )}\n                                      </paper-tooltip>\n                                    `\n                                  : \"\"}\n                              </div>\n                            `\n                          : \"\";\n                      })}\n                    </div>\n                  `\n                : html`\n                    <div class=\"card-content\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.devices.add_prompt\",\n                        \"name\",\n                        this.hass.localize(\n                          \"ui.panel.config.devices.scene.scenes\"\n                        ),\n                        \"type\",\n                        this.hass.localize(\n                          `ui.panel.config.devices.type.${\n                            device.entry_type || \"device\"\n                          }`\n                        )\n                      )}\n                    </div>\n                  `}\n            </ha-card>\n          `\n        : \"\";\n\n    const scriptCard = isComponentLoaded(this.hass, \"script\")\n      ? html`\n          <ha-card outlined>\n            <h1 class=\"card-header\">\n              ${this.hass.localize(\n                \"ui.panel.config.devices.script.scripts_heading\"\n              )}\n              <ha-icon-button\n                @click=${this._showScriptDialog}\n                .disabled=${device.disabled_by}\n                .label=${device.disabled_by\n                  ? this.hass.localize(\n                      \"ui.panel.config.devices.script.create_disable\",\n                      \"type\",\n                      this.hass.localize(\n                        `ui.panel.config.devices.type.${\n                          device.entry_type || \"device\"\n                        }`\n                      )\n                    )\n                  : this.hass.localize(\n                      \"ui.panel.config.devices.script.create\",\n                      \"type\",\n                      this.hass.localize(\n                        `ui.panel.config.devices.type.${\n                          device.entry_type || \"device\"\n                        }`\n                      )\n                    )}\n                .path=${mdiPlusCircle}\n              ></ha-icon-button>\n            </h1>\n            ${this._related?.script?.length\n              ? html`\n                  <div class=\"items\">\n                    ${this._related.script.map((script) => {\n                      const entityState = this.hass.states[script];\n                      return entityState\n                        ? html`\n                            <a\n                              href=${`/config/script/edit/${entityState.entity_id}`}\n                            >\n                              <paper-item .script=${script}>\n                                <paper-item-body>\n                                  ${computeStateName(entityState)}\n                                </paper-item-body>\n                                <ha-icon-next></ha-icon-next>\n                              </paper-item>\n                            </a>\n                          `\n                        : \"\";\n                    })}\n                  </div>\n                `\n              : html`\n                  <div class=\"card-content\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.devices.add_prompt\",\n                      \"name\",\n                      this.hass.localize(\n                        \"ui.panel.config.devices.script.scripts\"\n                      ),\n                      \"type\",\n                      this.hass.localize(\n                        `ui.panel.config.devices.type.${\n                          device.entry_type || \"device\"\n                        }`\n                      )\n                    )}\n                  </div>\n                `}\n          </ha-card>\n        `\n      : \"\";\n\n    return html`\n      <hass-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .header=${deviceName}\n      >\n\n                <ha-icon-button\n                  slot=\"toolbar-icon\"\n                  .path=${mdiPencil}\n                  @click=${this._showSettings}\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.devices.edit_settings\"\n                  )}\n                ></ha-icon-button>\n        <div class=\"container\">\n          <div class=\"header fullwidth\">\n            ${\n              area\n                ? html`<div class=\"header-name\">\n                    <a href=\"/config/areas/area/${area.area_id}\"\n                      >${this.hass.localize(\n                        \"ui.panel.config.integrations.config_entry.area\",\n                        \"area\",\n                        area.name || \"Unnamed Area\"\n                      )}</a\n                    >\n                  </div>`\n                : \"\"\n            }\n                <div class=\"header-right\">\n                  ${\n                    batteryState\n                      ? html`\n                          <div class=\"battery\">\n                            ${batteryIsBinary ? \"\" : batteryState.state + \" %\"}\n                            <ha-battery-icon\n                              .hass=${this.hass!}\n                              .batteryStateObj=${batteryState}\n                              .batteryChargingStateObj=${batteryChargingState}\n                            ></ha-battery-icon>\n                          </div>\n                        `\n                      : \"\"\n                  }\n                  ${\n                    integrations.length\n                      ? html`\n                          <img\n                            src=${brandsUrl({\n                              domain: integrations[0].domain,\n                              type: \"logo\",\n                              darkOptimized: this.hass.themes?.darkMode,\n                            })}\n                            referrerpolicy=\"no-referrer\"\n                            @load=${this._onImageLoad}\n                            @error=${this._onImageError}\n                          />\n                        `\n                      : \"\"\n                  }\n\n                </div>\n          </div>\n          <div class=\"column\">\n              ${\n                this._deviceAlerts?.length\n                  ? html`\n                      <div>\n                        ${this._deviceAlerts.map(\n                          (alert) =>\n                            html`\n                              <ha-alert .alertType=${alert.level}>\n                                ${alert.text}\n                              </ha-alert>\n                            `\n                        )}\n                      </div>\n                    `\n                  : \"\"\n              }\n              <ha-device-info-card\n                .hass=${this.hass}\n                .areas=${this.areas}\n                .devices=${this.devices}\n                .device=${device}\n              >\n                ${deviceInfo}\n                ${\n                  firstDeviceAction || actions.length\n                    ? html`\n                        <div class=\"card-actions\" slot=\"actions\">\n                          <div>\n                            <a\n                              href=${ifDefined(firstDeviceAction!.href)}\n                              rel=${ifDefined(\n                                firstDeviceAction!.target\n                                  ? \"noreferrer\"\n                                  : undefined\n                              )}\n                              target=${ifDefined(firstDeviceAction!.target)}\n                            >\n                              <mwc-button\n                                class=${ifDefined(firstDeviceAction!.classes)}\n                                .action=${firstDeviceAction!.action}\n                                @click=${this._deviceActionClicked}\n                                graphic=\"icon\"\n                              >\n                                ${firstDeviceAction!.label}\n                                ${firstDeviceAction!.icon\n                                  ? html`\n                                      <ha-svg-icon\n                                        class=${ifDefined(\n                                          firstDeviceAction!.classes\n                                        )}\n                                        .path=${firstDeviceAction!.icon}\n                                        slot=\"graphic\"\n                                      ></ha-svg-icon>\n                                    `\n                                  : \"\"}\n                                ${firstDeviceAction!.trailingIcon\n                                  ? html`\n                                      <ha-svg-icon\n                                        .path=${firstDeviceAction!.trailingIcon}\n                                        slot=\"trailingIcon\"\n                                      ></ha-svg-icon>\n                                    `\n                                  : \"\"}\n                              </mwc-button>\n                            </a>\n                          </div>\n\n                          ${actions.length\n                            ? html`\n                                <ha-button-menu corner=\"BOTTOM_START\">\n                                  <ha-icon-button\n                                    slot=\"trigger\"\n                                    .label=${this.hass.localize(\n                                      \"ui.common.menu\"\n                                    )}\n                                    .path=${mdiDotsVertical}\n                                  ></ha-icon-button>\n                                  ${actions.map(\n                                    (deviceAction) => html`\n                                      <a\n                                        href=${ifDefined(deviceAction.href)}\n                                        target=${ifDefined(deviceAction.target)}\n                                        rel=${ifDefined(\n                                          deviceAction.target\n                                            ? \"noreferrer\"\n                                            : undefined\n                                        )}\n                                      >\n                                        <mwc-list-item\n                                          class=${ifDefined(\n                                            deviceAction.classes\n                                          )}\n                                          .action=${deviceAction.action}\n                                          @click=${this._deviceActionClicked}\n                                          graphic=\"icon\"\n                                          .hasMeta=${Boolean(\n                                            deviceAction.trailingIcon\n                                          )}\n                                        >\n                                          ${deviceAction.label}\n                                          ${deviceAction.icon\n                                            ? html`\n                                                <ha-svg-icon\n                                                  class=${ifDefined(\n                                                    deviceAction.classes\n                                                  )}\n                                                  .path=${deviceAction.icon}\n                                                  slot=\"graphic\"\n                                                ></ha-svg-icon>\n                                              `\n                                            : \"\"}\n                                          ${deviceAction.trailingIcon\n                                            ? html`\n                                                <ha-svg-icon\n                                                  slot=\"meta\"\n                                                  .path=${deviceAction.trailingIcon}\n                                                ></ha-svg-icon>\n                                              `\n                                            : \"\"}\n                                        </mwc-list-item>\n                                      </a>\n                                    `\n                                  )}\n                                </ha-button-menu>\n                              `\n                            : \"\"}\n                        </div>\n                      `\n                    : \"\"\n                }\n              </ha-device-info-card>\n            ${!this.narrow ? [automationCard, sceneCard, scriptCard] : \"\"}\n          </div>\n          <div class=\"column\">\n            ${([\"control\", \"sensor\", \"config\", \"diagnostic\"] as const).map(\n              (category) =>\n                // Make sure we render controls if no other cards will be rendered\n                entitiesByCategory[category].length > 0 ||\n                (entities.length === 0 && category === \"control\")\n                  ? html`\n                      <ha-device-entities-card\n                        .hass=${this.hass}\n                        .header=${this.hass.localize(\n                          `ui.panel.config.devices.entities.${category}`\n                        )}\n                        .deviceName=${deviceName}\n                        .entities=${entitiesByCategory[category]}\n                        .showHidden=${device.disabled_by !== null}\n                      >\n                      </ha-device-entities-card>\n                    `\n                  : \"\"\n            )}\n          </div>\n          <div class=\"column\">\n            ${this.narrow ? [automationCard, sceneCard, scriptCard] : \"\"}\n            ${\n              isComponentLoaded(this.hass, \"logbook\")\n                ? html`\n                    <ha-card outlined>\n                      <h1 class=\"card-header\">\n                        ${this.hass.localize(\"panel.logbook\")}\n                      </h1>\n                      <ha-logbook\n                        .hass=${this.hass}\n                        .time=${this._logbookTime}\n                        .entityIds=${this._entityIds(entities)}\n                        .deviceIds=${this._deviceIdInList(this.deviceId)}\n                        virtualize\n                        narrow\n                        no-icon\n                      ></ha-logbook>\n                    </ha-card>\n                  `\n                : \"\"\n            }\n            </div>\n          </div>\n        </ha-config-section>\n      </hass-subpage>    `;\n  }\n\n  private async _getDiagnosticButtons(requestId: number): Promise<void> {\n    if (!isComponentLoaded(this.hass, \"diagnostics\")) {\n      return;\n    }\n\n    const device = this._device(this.deviceId, this.devices);\n\n    if (!device) {\n      return;\n    }\n\n    let links = await Promise.all(\n      this._integrations(device, this.entries).map(\n        async (entry): Promise<boolean | { link: string; domain: string }> => {\n          if (entry.state !== \"loaded\") {\n            return false;\n          }\n          let info: DiagnosticInfo;\n          try {\n            info = await fetchDiagnosticHandler(this.hass, entry.domain);\n          } catch (err: any) {\n            if (err.code === \"not_found\") {\n              return false;\n            }\n            throw err;\n          }\n\n          if (!info.handlers.device && !info.handlers.config_entry) {\n            return false;\n          }\n          return {\n            link: info.handlers.device\n              ? getDeviceDiagnosticsDownloadUrl(entry.entry_id, this.deviceId)\n              : getConfigEntryDiagnosticsDownloadUrl(entry.entry_id),\n            domain: entry.domain,\n          };\n        }\n      )\n    );\n\n    links = links.filter(Boolean);\n\n    if (this._diagnosticDownloadLinks !== requestId) {\n      return;\n    }\n    if (links.length > 0) {\n      this._diagnosticDownloadLinks = (\n        links as { link: string; domain: string }[]\n      ).map((link) => ({\n        href: link.link,\n        icon: mdiDownload,\n        action: (ev) => this._signUrl(ev),\n        label:\n          links.length > 1\n            ? this.hass.localize(\n                `ui.panel.config.devices.download_diagnostics_integration`,\n                {\n                  integration: domainToName(this.hass.localize, link.domain),\n                }\n              )\n            : this.hass.localize(\n                `ui.panel.config.devices.download_diagnostics`\n              ),\n      }));\n    }\n  }\n\n  private _getDeleteActions() {\n    const device = this._device(this.deviceId, this.devices);\n\n    if (!device) {\n      return;\n    }\n\n    const buttons: DeviceAction[] = [];\n    this._integrations(device, this.entries).forEach((entry) => {\n      if (entry.state !== \"loaded\" || !entry.supports_remove_device) {\n        return;\n      }\n      buttons.push({\n        action: async () => {\n          const confirmed = await showConfirmationDialog(this, {\n            text:\n              this._integrations(device, this.entries).length > 1\n                ? this.hass.localize(\n                    `ui.panel.config.devices.confirm_delete_integration`,\n                    {\n                      integration: domainToName(\n                        this.hass.localize,\n                        entry.domain\n                      ),\n                    }\n                  )\n                : this.hass.localize(`ui.panel.config.devices.confirm_delete`),\n          });\n\n          if (!confirmed) {\n            return;\n          }\n\n          await removeConfigEntryFromDevice(\n            this.hass!,\n            this.deviceId,\n            entry.entry_id\n          );\n        },\n        classes: \"warning\",\n        icon: mdiDelete,\n        label:\n          this._integrations(device, this.entries).length > 1\n            ? this.hass.localize(\n                `ui.panel.config.devices.delete_device_integration`,\n                {\n                  integration: domainToName(this.hass.localize, entry.domain),\n                }\n              )\n            : this.hass.localize(`ui.panel.config.devices.delete_device`),\n      });\n    });\n\n    if (buttons.length > 0) {\n      this._deleteButtons = buttons;\n    }\n  }\n\n  private async _getDeviceActions() {\n    const device = this._device(this.deviceId, this.devices);\n\n    if (!device) {\n      return;\n    }\n\n    const deviceActions: DeviceAction[] = [];\n\n    const configurationUrlIsHomeAssistant =\n      device.configuration_url?.startsWith(\"homeassistant://\") || false;\n\n    const configurationUrl = configurationUrlIsHomeAssistant\n      ? device.configuration_url!.replace(\"homeassistant://\", \"/\")\n      : device.configuration_url;\n\n    if (configurationUrl) {\n      deviceActions.push({\n        href: configurationUrl,\n        target: configurationUrlIsHomeAssistant ? undefined : \"_blank\",\n        icon: mdiCog,\n        label: this.hass.localize(\n          \"ui.panel.config.devices.open_configuration_url\"\n        ),\n        trailingIcon: mdiOpenInNew,\n      });\n    }\n\n    const domains = this._integrations(device, this.entries).map(\n      (int) => int.domain\n    );\n\n    if (domains.includes(\"mqtt\")) {\n      const mqtt = await import(\n        \"./device-detail/integration-elements/mqtt/device-actions\"\n      );\n      const actions = mqtt.getMQTTDeviceActions(this, device);\n      deviceActions.push(...actions);\n    }\n    if (domains.includes(\"zha\")) {\n      const zha = await import(\n        \"./device-detail/integration-elements/zha/device-actions\"\n      );\n      const actions = await zha.getZHADeviceActions(this, this.hass, device);\n      deviceActions.push(...actions);\n    }\n    if (domains.includes(\"zwave_js\")) {\n      const zwave = await import(\n        \"./device-detail/integration-elements/zwave_js/device-actions\"\n      );\n      const actions = await zwave.getZwaveDeviceActions(\n        this,\n        this.hass,\n        device\n      );\n      deviceActions.push(...actions);\n    }\n\n    this._deviceActions = deviceActions;\n  }\n\n  private async _getDeviceAlerts() {\n    const device = this._device(this.deviceId, this.devices);\n\n    if (!device) {\n      return;\n    }\n\n    const deviceAlerts: DeviceAlert[] = [];\n\n    const domains = this._integrations(device, this.entries).map(\n      (int) => int.domain\n    );\n\n    if (domains.includes(\"zwave_js\")) {\n      const zwave = await import(\n        \"./device-detail/integration-elements/zwave_js/device-alerts\"\n      );\n\n      const alerts = await zwave.getZwaveDeviceAlerts(this.hass, device);\n      deviceAlerts.push(...alerts);\n    }\n\n    if (deviceAlerts.length) {\n      this._deviceAlerts = deviceAlerts;\n    }\n  }\n\n  private _computeEntityName(entity: EntityRegistryEntry) {\n    if (entity.name) {\n      return entity.name;\n    }\n    const entityState = this.hass.states[entity.entity_id];\n    return entityState ? computeStateName(entityState) : null;\n  }\n\n  private _onImageLoad(ev) {\n    ev.target.style.display = \"inline-block\";\n  }\n\n  private _onImageError(ev) {\n    ev.target.style.display = \"none\";\n  }\n\n  private async _findRelated() {\n    this._related = await findRelated(this.hass, \"device\", this.deviceId);\n  }\n\n  private _createScene() {\n    const entities: SceneEntities = {};\n    this._entities(this.deviceId, this.entities).forEach((entity) => {\n      entities[entity.entity_id] = \"\";\n    });\n    showSceneEditor({\n      entities,\n    });\n  }\n\n  private _showScriptDialog() {\n    showDeviceAutomationDialog(this, {\n      device: this._device(this.deviceId, this.devices)!,\n      script: true,\n    });\n  }\n\n  private _showAutomationDialog() {\n    showDeviceAutomationDialog(this, {\n      device: this._device(this.deviceId, this.devices)!,\n      script: false,\n    });\n  }\n\n  private _renderIntegrationInfo(\n    device: DeviceRegistryEntry,\n    integrations: ConfigEntry[],\n    deviceInfo: TemplateResult[]\n  ) {\n    const domains = integrations.map((int) => int.domain);\n    if (domains.includes(\"zha\")) {\n      import(\"./device-detail/integration-elements/zha/ha-device-info-zha\");\n      deviceInfo.push(html`\n        <ha-device-info-zha\n          .hass=${this.hass}\n          .device=${device}\n        ></ha-device-info-zha>\n      `);\n    }\n    if (domains.includes(\"zwave_js\")) {\n      import(\n        \"./device-detail/integration-elements/zwave_js/ha-device-info-zwave_js\"\n      );\n      deviceInfo.push(html`\n        <ha-device-info-zwave_js\n          .hass=${this.hass}\n          .device=${device}\n        ></ha-device-info-zwave_js>\n      `);\n    }\n  }\n\n  private async _showSettings() {\n    const device = this._device(this.deviceId, this.devices)!;\n    showDeviceRegistryDetailDialog(this, {\n      device,\n      updateEntry: async (updates) => {\n        const oldDeviceName = device.name_by_user || device.name;\n        const newDeviceName = updates.name_by_user;\n        const disabled =\n          updates.disabled_by === \"user\" && device.disabled_by !== \"user\";\n\n        if (disabled) {\n          for (const cnfg_entry of device.config_entries) {\n            if (\n              !this.devices.some(\n                (dvc) =>\n                  dvc.id !== device.id &&\n                  dvc.config_entries.includes(cnfg_entry)\n              )\n            ) {\n              const config_entry = this.entries.find(\n                (entry) => entry.entry_id === cnfg_entry\n              );\n              if (\n                config_entry &&\n                !config_entry.disabled_by &&\n                // eslint-disable-next-line no-await-in-loop\n                (await showConfirmationDialog(this, {\n                  title: this.hass.localize(\n                    \"ui.panel.config.devices.confirm_disable_config_entry\",\n                    \"entry_name\",\n                    config_entry.title\n                  ),\n                  confirmText: this.hass.localize(\"ui.common.yes\"),\n                  dismissText: this.hass.localize(\"ui.common.no\"),\n                }))\n              ) {\n                let result: DisableConfigEntryResult;\n                try {\n                  // eslint-disable-next-line no-await-in-loop\n                  result = await disableConfigEntry(this.hass, cnfg_entry);\n                } catch (err: any) {\n                  showAlertDialog(this, {\n                    title: this.hass.localize(\n                      \"ui.panel.config.integrations.config_entry.disable_error\"\n                    ),\n                    text: err.message,\n                  });\n                  return;\n                }\n                if (result.require_restart) {\n                  showAlertDialog(this, {\n                    text: this.hass.localize(\n                      \"ui.panel.config.integrations.config_entry.disable_restart_confirm\"\n                    ),\n                  });\n                }\n                delete updates.disabled_by;\n              }\n            }\n          }\n        }\n        try {\n          await updateDeviceRegistryEntry(this.hass, this.deviceId, updates);\n        } catch (err: any) {\n          showAlertDialog(this, {\n            title: this.hass.localize(\n              \"ui.panel.config.devices.update_device_error\"\n            ),\n            text: err.message,\n          });\n        }\n\n        if (\n          !oldDeviceName ||\n          !newDeviceName ||\n          oldDeviceName === newDeviceName\n        ) {\n          return;\n        }\n        const entities = this._entities(this.deviceId, this.entities);\n\n        const renameEntityid =\n          this.showAdvanced &&\n          (await showConfirmationDialog(this, {\n            title: this.hass.localize(\n              \"ui.panel.config.devices.confirm_rename_entity_ids\"\n            ),\n            text: this.hass.localize(\n              \"ui.panel.config.devices.confirm_rename_entity_ids_warning\"\n            ),\n            confirmText: this.hass.localize(\"ui.common.rename\"),\n            dismissText: this.hass.localize(\"ui.common.no\"),\n            warning: true,\n          }));\n\n        const updateProms = entities.map((entity) => {\n          const name = entity.name || entity.stateName;\n          let newEntityId: string | null = null;\n          let newName: string | null = null;\n\n          if (name && name.includes(oldDeviceName)) {\n            newName = name.replace(oldDeviceName, newDeviceName);\n          }\n\n          if (renameEntityid) {\n            const oldSearch = slugify(oldDeviceName);\n            if (entity.entity_id.includes(oldSearch)) {\n              newEntityId = entity.entity_id.replace(\n                oldSearch,\n                slugify(newDeviceName)\n              );\n            }\n          }\n\n          if (!newName && !newEntityId) {\n            return undefined;\n          }\n\n          return updateEntityRegistryEntry(this.hass!, entity.entity_id, {\n            name: newName || name,\n            new_entity_id: newEntityId || entity.entity_id,\n          });\n        });\n        await Promise.all(updateProms);\n      },\n    });\n  }\n\n  private async _enableDevice(): Promise<void> {\n    await updateDeviceRegistryEntry(this.hass, this.deviceId, {\n      disabled_by: null,\n    });\n  }\n\n  private async _signUrl(ev) {\n    const anchor = ev.currentTarget.closest(\"a\");\n    const signedUrl = await getSignedPath(\n      this.hass,\n      anchor.getAttribute(\"href\")\n    );\n    fileDownload(signedUrl.path);\n  }\n\n  private _deviceActionClicked(ev) {\n    if (!ev.currentTarget.action) {\n      return;\n    }\n\n    ev.preventDefault();\n\n    (ev.currentTarget as any).action(ev);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .container {\n          display: flex;\n          flex-wrap: wrap;\n          margin: auto;\n          max-width: 1000px;\n          margin-top: 32px;\n          margin-bottom: 32px;\n        }\n\n        .card-header {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          padding-bottom: 12px;\n        }\n\n        .card-header ha-icon-button {\n          margin-right: -8px;\n          margin-inline-end: -8px;\n          margin-inline-start: initial;\n          color: var(--primary-color);\n          height: auto;\n          direction: var(--direction);\n        }\n\n        .device-info {\n          padding: 16px;\n        }\n\n        h1 {\n          margin: 0;\n          font-family: var(--paper-font-headline_-_font-family);\n          -webkit-font-smoothing: var(\n            --paper-font-headline_-_-webkit-font-smoothing\n          );\n          font-size: var(--paper-font-headline_-_font-size);\n          font-weight: var(--paper-font-headline_-_font-weight);\n          letter-spacing: var(--paper-font-headline_-_letter-spacing);\n          line-height: var(--paper-font-headline_-_line-height);\n          opacity: var(--dark-primary-opacity);\n        }\n\n        .header {\n          display: flex;\n          justify-content: space-between;\n        }\n\n        .header-name {\n          display: flex;\n          align-items: center;\n          padding-left: 8px;\n          padding-inline-start: 8px;\n          direction: var(--direction);\n        }\n\n        .column,\n        .fullwidth {\n          padding: 8px;\n          box-sizing: border-box;\n        }\n        .column {\n          width: 33%;\n          flex-grow: 1;\n        }\n        .fullwidth {\n          width: 100%;\n          flex-grow: 1;\n        }\n\n        .header-right {\n          align-self: center;\n        }\n\n        .header-right img {\n          height: 30px;\n        }\n\n        .header-right {\n          display: flex;\n        }\n\n        .header-right:first-child {\n          width: 100%;\n          justify-content: flex-end;\n        }\n\n        .header-right > *:not(:first-child) {\n          margin-left: 16px;\n          margin-inline-start: 16px;\n          margin-inline-end: initial;\n          direction: var(--direction);\n        }\n\n        .battery {\n          align-self: center;\n          align-items: center;\n          display: flex;\n          white-space: nowrap;\n        }\n\n        .column > *:not(:first-child) {\n          margin-top: 16px;\n        }\n\n        :host([narrow]) .column {\n          width: 100%;\n        }\n\n        :host([narrow]) .container {\n          margin-top: 0;\n        }\n\n        paper-item {\n          cursor: pointer;\n          font-size: var(--paper-font-body1_-_font-size);\n        }\n\n        a {\n          text-decoration: none;\n          color: var(--primary-color);\n        }\n\n        ha-card a {\n          color: var(--primary-text-color);\n        }\n\n        ha-svg-icon[slot=\"trailingIcon\"] {\n          display: block;\n          width: 18px;\n          height: 18px;\n        }\n\n        ha-svg-icon[slot=\"meta\"] {\n          width: 18px;\n          height: 18px;\n        }\n\n        .items {\n          padding-bottom: 16px;\n        }\n\n        ha-logbook {\n          height: 400px;\n        }\n        :host([narrow]) ha-logbook {\n          height: 235px;\n        }\n\n        .card-actions {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-device-page\": HaConfigDevicePage;\n  }\n}\n","import type { RequestSelectedDetail } from \"@material/mwc-list/mwc-list-item\";\nimport { mdiCancel, mdiFilterVariant, mdiPlus } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { HASSDomEvent } from \"../../../common/dom/fire_event\";\nimport { computeStateDomain } from \"../../../common/entity/compute_state_domain\";\nimport { navigate } from \"../../../common/navigate\";\nimport { LocalizeFunc } from \"../../../common/translations/localize\";\nimport { computeRTL } from \"../../../common/util/compute_rtl\";\nimport {\n  DataTableColumnContainer,\n  DataTableRowData,\n  RowClickedEvent,\n} from \"../../../components/data-table/ha-data-table\";\nimport \"../../../components/entity/ha-battery-icon\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-check-list-item\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport { AreaRegistryEntry } from \"../../../data/area_registry\";\nimport { ConfigEntry } from \"../../../data/config_entries\";\nimport {\n  computeDeviceName,\n  DeviceEntityLookup,\n  DeviceRegistryEntry,\n} from \"../../../data/device_registry\";\nimport {\n  EntityRegistryEntry,\n  findBatteryChargingEntity,\n  findBatteryEntity,\n} from \"../../../data/entity_registry\";\nimport { domainToName } from \"../../../data/integration\";\nimport \"../../../layouts/hass-tabs-subpage-data-table\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { configSections } from \"../ha-panel-config\";\nimport \"../integrations/ha-integration-overflow-menu\";\nimport { showZWaveJSAddNodeDialog } from \"../integrations/integration-panels/zwave_js/show-dialog-zwave_js-add-node\";\n\ninterface DeviceRowData extends DeviceRegistryEntry {\n  device?: DeviceRowData;\n  area?: string;\n  integration?: string;\n  battery_entity?: [string | undefined, string | undefined];\n}\n\n@customElement(\"ha-config-devices-dashboard\")\nexport class HaConfigDeviceDashboard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public narrow = false;\n\n  @property() public isWide = false;\n\n  @property() public devices!: DeviceRegistryEntry[];\n\n  @property() public entries!: ConfigEntry[];\n\n  @property() public entities!: EntityRegistryEntry[];\n\n  @property() public areas!: AreaRegistryEntry[];\n\n  @property() public route!: Route;\n\n  @state() private _searchParms = new URLSearchParams(window.location.search);\n\n  @state() private _showDisabled = false;\n\n  @state() private _filter: string = history.state?.filter || \"\";\n\n  @state() private _numHiddenDevices = 0;\n\n  private _ignoreLocationChange = false;\n\n  public constructor() {\n    super();\n    window.addEventListener(\"location-changed\", () => {\n      if (this._ignoreLocationChange) {\n        this._ignoreLocationChange = false;\n        return;\n      }\n      if (\n        window.location.search.substring(1) !== this._searchParms.toString()\n      ) {\n        this._searchParms = new URLSearchParams(window.location.search);\n      }\n    });\n    window.addEventListener(\"popstate\", () => {\n      if (\n        window.location.search.substring(1) !== this._searchParms.toString()\n      ) {\n        this._searchParms = new URLSearchParams(window.location.search);\n      }\n    });\n  }\n\n  private _activeFilters = memoizeOne(\n    (\n      entries: ConfigEntry[],\n      filters: URLSearchParams,\n      localize: LocalizeFunc\n    ): string[] | undefined => {\n      const filterTexts: string[] = [];\n      filters.forEach((value, key) => {\n        switch (key) {\n          case \"config_entry\": {\n            const configEntry = entries.find(\n              (entry) => entry.entry_id === value\n            );\n            if (!configEntry) {\n              break;\n            }\n            const integrationName = domainToName(localize, configEntry.domain);\n            filterTexts.push(\n              `${this.hass.localize(\n                \"ui.panel.config.integrations.integration\"\n              )} \"${integrationName}${\n                integrationName !== configEntry.title\n                  ? `: ${configEntry.title}`\n                  : \"\"\n              }\"`\n            );\n            break;\n          }\n        }\n      });\n      return filterTexts.length ? filterTexts : undefined;\n    }\n  );\n\n  private _devicesAndFilterDomains = memoizeOne(\n    (\n      devices: DeviceRegistryEntry[],\n      entries: ConfigEntry[],\n      entities: EntityRegistryEntry[],\n      areas: AreaRegistryEntry[],\n      filters: URLSearchParams,\n      showDisabled: boolean,\n      localize: LocalizeFunc\n    ) => {\n      // Some older installations might have devices pointing at invalid entryIDs\n      // So we guard for that.\n      let outputDevices: DeviceRowData[] = devices;\n\n      const deviceLookup: { [deviceId: string]: DeviceRegistryEntry } = {};\n      for (const device of devices) {\n        deviceLookup[device.id] = device;\n      }\n\n      // If nothing gets filtered, this is our correct count of devices\n      let startLength = outputDevices.length;\n\n      const deviceEntityLookup: DeviceEntityLookup = {};\n      for (const entity of entities) {\n        if (!entity.device_id) {\n          continue;\n        }\n        if (!(entity.device_id in deviceEntityLookup)) {\n          deviceEntityLookup[entity.device_id] = [];\n        }\n        deviceEntityLookup[entity.device_id].push(entity);\n      }\n\n      const entryLookup: { [entryId: string]: ConfigEntry } = {};\n      for (const entry of entries) {\n        entryLookup[entry.entry_id] = entry;\n      }\n\n      const areaLookup: { [areaId: string]: AreaRegistryEntry } = {};\n      for (const area of areas) {\n        areaLookup[area.area_id] = area;\n      }\n\n      let filterConfigEntry: ConfigEntry | undefined;\n\n      filters.forEach((value, key) => {\n        if (key === \"config_entry\") {\n          outputDevices = outputDevices.filter((device) =>\n            device.config_entries.includes(value)\n          );\n          startLength = outputDevices.length;\n          filterConfigEntry = entries.find((entry) => entry.entry_id === value);\n        }\n      });\n\n      if (!showDisabled) {\n        outputDevices = outputDevices.filter((device) => !device.disabled_by);\n      }\n\n      outputDevices = outputDevices.map((device) => ({\n        ...device,\n        name: computeDeviceName(\n          device,\n          this.hass,\n          deviceEntityLookup[device.id]\n        ),\n        model: device.model || \"<unknown>\",\n        manufacturer: device.manufacturer || \"<unknown>\",\n        area:\n          device.area_id && areaLookup[device.area_id]\n            ? areaLookup[device.area_id].name\n            : \"—\",\n        integration: device.config_entries.length\n          ? device.config_entries\n              .filter((entId) => entId in entryLookup)\n              .map(\n                (entId) =>\n                  localize(`component.${entryLookup[entId].domain}.title`) ||\n                  entryLookup[entId].domain\n              )\n              .join(\", \")\n          : this.hass.localize(\n              \"ui.panel.config.devices.data_table.no_integration\"\n            ),\n        battery_entity: [\n          this._batteryEntity(device.id, deviceEntityLookup),\n          this._batteryChargingEntity(device.id, deviceEntityLookup),\n        ],\n        battery_level:\n          this.hass.states[\n            this._batteryEntity(device.id, deviceEntityLookup) || \"\"\n          ]?.state,\n      }));\n\n      this._numHiddenDevices = startLength - outputDevices.length;\n      return {\n        devicesOutput: outputDevices,\n        filteredConfigEntry: filterConfigEntry,\n      };\n    }\n  );\n\n  private _columns = memoizeOne(\n    (narrow: boolean, showDisabled: boolean): DataTableColumnContainer => {\n      const columns: DataTableColumnContainer = narrow\n        ? {\n            name: {\n              title: this.hass.localize(\n                \"ui.panel.config.devices.data_table.device\"\n              ),\n              sortable: true,\n              filterable: true,\n              direction: \"asc\",\n              grows: true,\n              template: (name, device: DataTableRowData) => html`\n                ${name}\n                <div class=\"secondary\">\n                  ${device.area} | ${device.integration}\n                </div>\n              `,\n            },\n          }\n        : {\n            name: {\n              title: this.hass.localize(\n                \"ui.panel.config.devices.data_table.device\"\n              ),\n              sortable: true,\n              filterable: true,\n              grows: true,\n              direction: \"asc\",\n            },\n          };\n\n      columns.manufacturer = {\n        title: this.hass.localize(\n          \"ui.panel.config.devices.data_table.manufacturer\"\n        ),\n        sortable: true,\n        hidden: narrow,\n        filterable: true,\n        width: \"15%\",\n      };\n      columns.model = {\n        title: this.hass.localize(\"ui.panel.config.devices.data_table.model\"),\n        sortable: true,\n        hidden: narrow,\n        filterable: true,\n        width: \"15%\",\n      };\n      columns.area = {\n        title: this.hass.localize(\"ui.panel.config.devices.data_table.area\"),\n        sortable: true,\n        hidden: narrow,\n        filterable: true,\n        width: \"15%\",\n      };\n      columns.integration = {\n        title: this.hass.localize(\n          \"ui.panel.config.devices.data_table.integration\"\n        ),\n        sortable: true,\n        hidden: narrow,\n        filterable: true,\n        width: \"15%\",\n      };\n      columns.battery_entity = {\n        title: this.hass.localize(\"ui.panel.config.devices.data_table.battery\"),\n        sortable: true,\n        filterable: true,\n        type: \"numeric\",\n        width: narrow ? \"95px\" : \"15%\",\n        maxWidth: \"95px\",\n        valueColumn: \"battery_level\",\n        template: (batteryEntityPair: DeviceRowData[\"battery_entity\"]) => {\n          const battery =\n            batteryEntityPair && batteryEntityPair[0]\n              ? this.hass.states[batteryEntityPair[0]]\n              : undefined;\n          const batteryCharging =\n            batteryEntityPair && batteryEntityPair[1]\n              ? this.hass.states[batteryEntityPair[1]]\n              : undefined;\n          const batteryIsBinary =\n            battery && computeStateDomain(battery) === \"binary_sensor\";\n          return battery && (batteryIsBinary || !isNaN(battery.state as any))\n            ? html`\n                ${batteryIsBinary ? \"\" : battery.state + \" %\"}\n                <ha-battery-icon\n                  .hass=${this.hass!}\n                  .batteryStateObj=${battery}\n                  .batteryChargingStateObj=${batteryCharging}\n                ></ha-battery-icon>\n              `\n            : html`—`;\n        },\n      };\n      if (showDisabled) {\n        columns.disabled_by = {\n          title: \"\",\n          label: this.hass.localize(\n            \"ui.panel.config.devices.data_table.disabled_by\"\n          ),\n          type: \"icon\",\n          template: (disabled_by) =>\n            disabled_by\n              ? html`<div\n                  tabindex=\"0\"\n                  style=\"display:inline-block; position: relative;\"\n                >\n                  <ha-svg-icon .path=${mdiCancel}></ha-svg-icon>\n                  <paper-tooltip animation-delay=\"0\" position=\"left\">\n                    ${this.hass.localize(\"ui.panel.config.devices.disabled\")}\n                  </paper-tooltip>\n                </div>`\n              : \"—\",\n        };\n      }\n      return columns;\n    }\n  );\n\n  public willUpdate(changedProps) {\n    if (changedProps.has(\"_searchParms\")) {\n      if (this._searchParms.get(\"config_entry\")) {\n        // If we are requested to show the devices for a given config entry,\n        // also show the disabled ones by default.\n        this._showDisabled = true;\n      }\n    }\n  }\n\n  protected render(): TemplateResult {\n    const { devicesOutput, filteredConfigEntry } =\n      this._devicesAndFilterDomains(\n        this.devices,\n        this.entries,\n        this.entities,\n        this.areas,\n        this._searchParms,\n        this._showDisabled,\n        this.hass.localize\n      );\n    const activeFilters = this._activeFilters(\n      this.entries,\n      this._searchParms,\n      this.hass.localize\n    );\n\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .backPath=${this._searchParms.has(\"historyBack\")\n          ? undefined\n          : \"/config\"}\n        .tabs=${configSections.devices}\n        .route=${this.route}\n        .activeFilters=${activeFilters}\n        .numHidden=${this._numHiddenDevices}\n        .searchLabel=${this.hass.localize(\n          \"ui.panel.config.devices.picker.search\"\n        )}\n        .hiddenLabel=${this.hass.localize(\n          \"ui.panel.config.devices.picker.filter.hidden_devices\",\n          \"number\",\n          this._numHiddenDevices\n        )}\n        .columns=${this._columns(this.narrow, this._showDisabled)}\n        .data=${devicesOutput}\n        .filter=${this._filter}\n        @clear-filter=${this._clearFilter}\n        @search-changed=${this._handleSearchChange}\n        @row-click=${this._handleRowClicked}\n        clickable\n        .hasFab=${filteredConfigEntry &&\n        (filteredConfigEntry.domain === \"zha\" ||\n          filteredConfigEntry.domain === \"zwave_js\")}\n      >\n        <ha-integration-overflow-menu\n          .hass=${this.hass}\n          slot=\"toolbar-icon\"\n        ></ha-integration-overflow-menu>\n        ${!filteredConfigEntry\n          ? \"\"\n          : filteredConfigEntry.domain === \"zwave_js\"\n          ? html`\n              <ha-fab\n                slot=\"fab\"\n                .label=${this.hass.localize(\"ui.panel.config.zha.add_device\")}\n                extended\n                ?rtl=${computeRTL(this.hass)}\n                @click=${this._showZJSAddDeviceDialog}\n              >\n                <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n              </ha-fab>\n            `\n          : filteredConfigEntry.domain === \"zha\"\n          ? html`<a href=\"/config/zha/add\" slot=\"fab\">\n              <ha-fab\n                .label=${this.hass.localize(\"ui.panel.config.zha.add_device\")}\n                extended\n                ?rtl=${computeRTL(this.hass)}\n              >\n                <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n              </ha-fab>\n            </a>`\n          : html``}\n        <ha-button-menu slot=\"filter-menu\" corner=\"BOTTOM_START\" multi>\n          <ha-icon-button\n            slot=\"trigger\"\n            .label=${this.hass!.localize(\n              \"ui.panel.config.devices.picker.filter.filter\"\n            )}\n            .path=${mdiFilterVariant}\n          ></ha-icon-button>\n          ${this.narrow && activeFilters?.length\n            ? html`<mwc-list-item @click=${this._clearFilter}\n                >${this.hass.localize(\"ui.components.data-table.filtering_by\")}\n                ${activeFilters.join(\", \")}\n                <span class=\"clear\">Clear</span></mwc-list-item\n              >`\n            : \"\"}\n          <ha-check-list-item\n            left\n            @request-selected=${this._showDisabledChanged}\n            .selected=${this._showDisabled}\n          >\n            ${this.hass!.localize(\n              \"ui.panel.config.devices.picker.filter.show_disabled\"\n            )}\n          </ha-check-list-item>\n        </ha-button-menu>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  private _batteryEntity(\n    deviceId: string,\n    deviceEntityLookup: DeviceEntityLookup\n  ): string | undefined {\n    const batteryEntity = findBatteryEntity(\n      this.hass,\n      deviceEntityLookup[deviceId] || []\n    );\n    return batteryEntity ? batteryEntity.entity_id : undefined;\n  }\n\n  private _batteryChargingEntity(\n    deviceId: string,\n    deviceEntityLookup: DeviceEntityLookup\n  ): string | undefined {\n    const batteryChargingEntity = findBatteryChargingEntity(\n      this.hass,\n      deviceEntityLookup[deviceId] || []\n    );\n    return batteryChargingEntity ? batteryChargingEntity.entity_id : undefined;\n  }\n\n  private _handleRowClicked(ev: HASSDomEvent<RowClickedEvent>) {\n    const deviceId = ev.detail.id;\n    this._ignoreLocationChange = true;\n    navigate(`/config/devices/device/${deviceId}`);\n  }\n\n  private _showDisabledChanged(ev: CustomEvent<RequestSelectedDetail>) {\n    if (ev.detail.source !== \"property\") {\n      return;\n    }\n    this._showDisabled = ev.detail.selected;\n  }\n\n  private _handleSearchChange(ev: CustomEvent) {\n    this._filter = ev.detail.value;\n    history.replaceState({ filter: this._filter }, \"\");\n  }\n\n  private _clearFilter() {\n    if (\n      this._activeFilters(this.entries, this._searchParms, this.hass.localize)\n    ) {\n      navigate(window.location.pathname, { replace: true });\n    }\n    this._showDisabled = true;\n  }\n\n  private _showZJSAddDeviceDialog() {\n    const { filteredConfigEntry } = this._devicesAndFilterDomains(\n      this.devices,\n      this.entries,\n      this.entities,\n      this.areas,\n      this._searchParms,\n      this._showDisabled,\n      this.hass.localize\n    );\n\n    showZWaveJSAddNodeDialog(this, {\n      entry_id: filteredConfigEntry!.entry_id,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      css`\n        ha-button-menu {\n          margin-left: 8px;\n        }\n        .clear {\n          color: var(--primary-color);\n          padding-left: 8px;\n          padding-inline-start: 8px;\n          text-transform: uppercase;\n          direction: var(--direction);\n        }\n      `,\n      haStyle,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-devices-dashboard\": HaConfigDeviceDashboard;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\n\n@customElement(\"ha-config-section\")\nexport class HaConfigSection extends LitElement {\n  @property() public isWide = false;\n\n  @property({ type: Boolean }) public vertical = false;\n\n  @property({ type: Boolean, attribute: \"full-width\" })\n  public fullWidth = false;\n\n  protected render() {\n    return html`\n      <div\n        class=\"content ${classMap({\n          narrow: !this.isWide,\n          \"full-width\": this.fullWidth,\n        })}\"\n      >\n        <div class=\"header\"><slot name=\"header\"></slot></div>\n        <div\n          class=\"together layout ${classMap({\n            narrow: !this.isWide,\n            vertical: this.vertical || !this.isWide,\n            horizontal: !this.vertical && this.isWide,\n          })}\"\n        >\n          <div class=\"intro\"><slot name=\"introduction\"></slot></div>\n          <div class=\"panel flex-auto\"><slot></slot></div>\n        </div>\n      </div>\n    `;\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n      }\n      .content {\n        padding: 28px 20px 0;\n        max-width: 1040px;\n        margin: 0 auto;\n      }\n\n      .layout {\n        display: flex;\n      }\n\n      .horizontal {\n        flex-direction: row;\n      }\n\n      .vertical {\n        flex-direction: column;\n      }\n\n      .flex-auto {\n        flex: 1 1 auto;\n      }\n\n      .header {\n        font-family: var(--paper-font-headline_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-headline_-_-webkit-font-smoothing\n        );\n        font-size: var(--paper-font-headline_-_font-size);\n        font-weight: var(--paper-font-headline_-_font-weight);\n        letter-spacing: var(--paper-font-headline_-_letter-spacing);\n        line-height: var(--paper-font-headline_-_line-height);\n        opacity: var(--dark-primary-opacity);\n      }\n\n      .together {\n        margin-top: 32px;\n      }\n\n      .intro {\n        font-family: var(--paper-font-subhead_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-subhead_-_-webkit-font-smoothing\n        );\n        font-weight: var(--paper-font-subhead_-_font-weight);\n        line-height: var(--paper-font-subhead_-_line-height);\n        width: 100%;\n        opacity: var(--dark-primary-opacity);\n        font-size: 14px;\n        padding-bottom: 20px;\n      }\n\n      .horizontal .intro {\n        max-width: 400px;\n        margin-right: 40px;\n      }\n\n      .panel {\n        margin-top: -24px;\n      }\n\n      .panel ::slotted(*) {\n        margin-top: 24px;\n        display: block;\n      }\n\n      .narrow.content {\n        max-width: 640px;\n      }\n      .narrow .together {\n        margin-top: 20px;\n      }\n      .narrow .intro {\n        padding-bottom: 20px;\n        margin-right: 0;\n        max-width: 500px;\n      }\n\n      .full-width {\n        padding: 0;\n      }\n\n      .full-width .layout {\n        flex-direction: column;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-section\": HaConfigSection;\n  }\n}\n"],"names":[],"sourceRoot":""}